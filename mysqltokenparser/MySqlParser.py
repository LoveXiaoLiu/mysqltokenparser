# Generated from MySqlParser.g4 by ANTLR 4.7.2
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
import sys


def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3")
        buf.write(u"\u03cf\u1793\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6")
        buf.write(u"\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4")
        buf.write(u"\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t")
        buf.write(u"\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27")
        buf.write(u"\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4")
        buf.write(u"\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t")
        buf.write(u"#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4")
        buf.write(u",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62")
        buf.write(u"\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\4")
        buf.write(u"8\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@")
        buf.write(u"\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\t")
        buf.write(u"I\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\4O\tO\4P\tP\4Q\tQ\4R")
        buf.write(u"\tR\4S\tS\4T\tT\4U\tU\4V\tV\4W\tW\4X\tX\4Y\tY\4Z\tZ\4")
        buf.write(u"[\t[\4\\\t\\\4]\t]\4^\t^\4_\t_\4`\t`\4a\ta\4b\tb\4c\t")
        buf.write(u"c\4d\td\4e\te\4f\tf\4g\tg\4h\th\4i\ti\4j\tj\4k\tk\4l")
        buf.write(u"\tl\4m\tm\4n\tn\4o\to\4p\tp\4q\tq\4r\tr\4s\ts\4t\tt\4")
        buf.write(u"u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4z\tz\4{\t{\4|\t|\4}\t}")
        buf.write(u"\4~\t~\4\177\t\177\4\u0080\t\u0080\4\u0081\t\u0081\4")
        buf.write(u"\u0082\t\u0082\4\u0083\t\u0083\4\u0084\t\u0084\4\u0085")
        buf.write(u"\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087\4\u0088\t\u0088")
        buf.write(u"\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b\t\u008b\4\u008c")
        buf.write(u"\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e\4\u008f\t\u008f")
        buf.write(u"\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092\t\u0092\4\u0093")
        buf.write(u"\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095\4\u0096\t\u0096")
        buf.write(u"\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099\t\u0099\4\u009a")
        buf.write(u"\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c\4\u009d\t\u009d")
        buf.write(u"\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0\t\u00a0\4\u00a1")
        buf.write(u"\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3\4\u00a4\t\u00a4")
        buf.write(u"\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7\t\u00a7\4\u00a8")
        buf.write(u"\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa\4\u00ab\t\u00ab")
        buf.write(u"\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae\t\u00ae\4\u00af")
        buf.write(u"\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1\4\u00b2\t\u00b2")
        buf.write(u"\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5\t\u00b5\4\u00b6")
        buf.write(u"\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8\4\u00b9\t\u00b9")
        buf.write(u"\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc\t\u00bc\4\u00bd")
        buf.write(u"\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf\4\u00c0\t\u00c0")
        buf.write(u"\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3\t\u00c3\4\u00c4")
        buf.write(u"\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6\4\u00c7\t\u00c7")
        buf.write(u"\4\u00c8\t\u00c8\4\u00c9\t\u00c9\4\u00ca\t\u00ca\4\u00cb")
        buf.write(u"\t\u00cb\4\u00cc\t\u00cc\4\u00cd\t\u00cd\4\u00ce\t\u00ce")
        buf.write(u"\4\u00cf\t\u00cf\4\u00d0\t\u00d0\4\u00d1\t\u00d1\4\u00d2")
        buf.write(u"\t\u00d2\4\u00d3\t\u00d3\4\u00d4\t\u00d4\4\u00d5\t\u00d5")
        buf.write(u"\4\u00d6\t\u00d6\4\u00d7\t\u00d7\4\u00d8\t\u00d8\4\u00d9")
        buf.write(u"\t\u00d9\4\u00da\t\u00da\4\u00db\t\u00db\4\u00dc\t\u00dc")
        buf.write(u"\4\u00dd\t\u00dd\4\u00de\t\u00de\4\u00df\t\u00df\4\u00e0")
        buf.write(u"\t\u00e0\4\u00e1\t\u00e1\4\u00e2\t\u00e2\4\u00e3\t\u00e3")
        buf.write(u"\4\u00e4\t\u00e4\4\u00e5\t\u00e5\4\u00e6\t\u00e6\4\u00e7")
        buf.write(u"\t\u00e7\4\u00e8\t\u00e8\4\u00e9\t\u00e9\4\u00ea\t\u00ea")
        buf.write(u"\4\u00eb\t\u00eb\4\u00ec\t\u00ec\4\u00ed\t\u00ed\4\u00ee")
        buf.write(u"\t\u00ee\4\u00ef\t\u00ef\4\u00f0\t\u00f0\4\u00f1\t\u00f1")
        buf.write(u"\4\u00f2\t\u00f2\4\u00f3\t\u00f3\4\u00f4\t\u00f4\4\u00f5")
        buf.write(u"\t\u00f5\4\u00f6\t\u00f6\4\u00f7\t\u00f7\4\u00f8\t\u00f8")
        buf.write(u"\4\u00f9\t\u00f9\4\u00fa\t\u00fa\4\u00fb\t\u00fb\4\u00fc")
        buf.write(u"\t\u00fc\4\u00fd\t\u00fd\4\u00fe\t\u00fe\4\u00ff\t\u00ff")
        buf.write(u"\4\u0100\t\u0100\4\u0101\t\u0101\4\u0102\t\u0102\4\u0103")
        buf.write(u"\t\u0103\4\u0104\t\u0104\4\u0105\t\u0105\4\u0106\t\u0106")
        buf.write(u"\4\u0107\t\u0107\4\u0108\t\u0108\4\u0109\t\u0109\4\u010a")
        buf.write(u"\t\u010a\4\u010b\t\u010b\4\u010c\t\u010c\4\u010d\t\u010d")
        buf.write(u"\4\u010e\t\u010e\4\u010f\t\u010f\4\u0110\t\u0110\4\u0111")
        buf.write(u"\t\u0111\4\u0112\t\u0112\4\u0113\t\u0113\4\u0114\t\u0114")
        buf.write(u"\4\u0115\t\u0115\4\u0116\t\u0116\4\u0117\t\u0117\4\u0118")
        buf.write(u"\t\u0118\4\u0119\t\u0119\4\u011a\t\u011a\4\u011b\t\u011b")
        buf.write(u"\4\u011c\t\u011c\4\u011d\t\u011d\4\u011e\t\u011e\4\u011f")
        buf.write(u"\t\u011f\4\u0120\t\u0120\4\u0121\t\u0121\4\u0122\t\u0122")
        buf.write(u"\4\u0123\t\u0123\4\u0124\t\u0124\4\u0125\t\u0125\4\u0126")
        buf.write(u"\t\u0126\4\u0127\t\u0127\4\u0128\t\u0128\4\u0129\t\u0129")
        buf.write(u"\4\u012a\t\u012a\4\u012b\t\u012b\4\u012c\t\u012c\4\u012d")
        buf.write(u"\t\u012d\4\u012e\t\u012e\4\u012f\t\u012f\4\u0130\t\u0130")
        buf.write(u"\4\u0131\t\u0131\4\u0132\t\u0132\4\u0133\t\u0133\4\u0134")
        buf.write(u"\t\u0134\4\u0135\t\u0135\3\2\5\2\u026c\n\2\3\2\5\2\u026f")
        buf.write(u"\n\2\3\2\3\2\3\3\3\3\5\3\u0275\n\3\3\3\3\3\3\3\7\3\u027a")
        buf.write(u"\n\3\f\3\16\3\u027d\13\3\3\3\3\3\5\3\u0281\n\3\3\3\5")
        buf.write(u"\3\u0284\n\3\3\3\5\3\u0287\n\3\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\3\4\5\4\u0290\n\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\5\6\u02b7\n\6\3\7\3\7\3\7\3\7\3\7\3\7\3")
        buf.write(u"\7\3\7\3\7\3\7\5\7\u02c3\n\7\3\b\3\b\3\b\3\b\3\b\3\b")
        buf.write(u"\3\b\3\b\3\b\5\b\u02ce\n\b\3\t\3\t\3\t\3\t\3\t\3\t\3")
        buf.write(u"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u02df\n\t\3\n")
        buf.write(u"\3\n\3\n\5\n\u02e4\n\n\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\5\13\u02f0\n\13\3\f\3\f\3\f\3\f")
        buf.write(u"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write(u"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u030b\n\f\3\r\3")
        buf.write(u"\r\3\r\3\r\5\r\u0311\n\r\3\16\3\16\3\16\5\16\u0316\n")
        buf.write(u"\16\3\16\3\16\7\16\u031a\n\16\f\16\16\16\u031d\13\16")
        buf.write(u"\3\17\3\17\5\17\u0321\n\17\3\17\3\17\5\17\u0325\n\17")
        buf.write(u"\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u032e\n\17\3")
        buf.write(u"\17\5\17\u0331\n\17\3\17\5\17\u0334\n\17\3\17\3\17\5")
        buf.write(u"\17\u0338\n\17\3\17\3\17\3\17\3\20\3\20\5\20\u033f\n")
        buf.write(u"\20\3\20\5\20\u0342\n\20\3\20\3\20\3\20\5\20\u0347\n")
        buf.write(u"\20\3\20\3\20\3\20\3\20\7\20\u034d\n\20\f\20\16\20\u0350")
        buf.write(u"\13\20\3\20\3\20\5\20\u0354\n\20\3\20\3\20\3\20\5\20")
        buf.write(u"\u0359\n\20\3\20\5\20\u035c\n\20\3\21\3\21\3\21\3\21")
        buf.write(u"\3\21\3\21\3\21\3\21\3\21\5\21\u0367\n\21\3\21\5\21\u036a")
        buf.write(u"\n\21\3\21\3\21\5\21\u036e\n\21\3\21\5\21\u0371\n\21")
        buf.write(u"\3\21\3\21\5\21\u0375\n\21\3\21\5\21\u0378\n\21\3\21")
        buf.write(u"\3\21\5\21\u037c\n\21\3\21\5\21\u037f\n\21\3\21\5\21")
        buf.write(u"\u0382\n\21\3\21\3\21\5\21\u0386\n\21\3\21\5\21\u0389")
        buf.write(u"\n\21\3\21\3\21\5\21\u038d\n\21\3\21\3\21\3\22\3\22\5")
        buf.write(u"\22\u0393\n\22\3\22\3\22\3\22\3\22\5\22\u0399\n\22\3")
        buf.write(u"\22\3\22\7\22\u039d\n\22\f\22\16\22\u03a0\13\22\3\22")
        buf.write(u"\3\22\7\22\u03a4\n\22\f\22\16\22\u03a7\13\22\3\22\3\22")
        buf.write(u"\3\23\3\23\5\23\u03ad\n\23\3\23\3\23\3\23\3\23\5\23\u03b3")
        buf.write(u"\n\23\3\23\3\23\7\23\u03b7\n\23\f\23\16\23\u03ba\13\23")
        buf.write(u"\3\23\3\23\3\23\3\23\7\23\u03c0\n\23\f\23\16\23\u03c3")
        buf.write(u"\13\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\3\24\3\24\3\24\7\24\u03d3\n\24\f\24\16\24\u03d6")
        buf.write(u"\13\24\3\24\3\24\3\25\3\25\5\25\u03dc\n\25\3\25\3\25")
        buf.write(u"\5\25\u03e0\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write(u"\25\5\25\u03ea\n\25\3\25\3\25\5\25\u03ee\n\25\3\25\3")
        buf.write(u"\25\5\25\u03f2\n\25\3\25\3\25\5\25\u03f6\n\25\3\25\3")
        buf.write(u"\25\5\25\u03fa\n\25\3\25\7\25\u03fd\n\25\f\25\16\25\u0400")
        buf.write(u"\13\25\5\25\u0402\n\25\3\25\5\25\u0405\n\25\3\25\5\25")
        buf.write(u"\u0408\n\25\3\25\5\25\u040b\n\25\3\25\3\25\3\25\3\25")
        buf.write(u"\5\25\u0411\n\25\3\25\3\25\5\25\u0415\n\25\3\25\3\25")
        buf.write(u"\3\25\3\25\5\25\u041b\n\25\3\25\7\25\u041e\n\25\f\25")
        buf.write(u"\16\25\u0421\13\25\5\25\u0423\n\25\3\25\5\25\u0426\n")
        buf.write(u"\25\5\25\u0428\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write(u"\3\26\3\26\5\26\u0433\n\26\3\26\3\26\5\26\u0437\n\26")
        buf.write(u"\3\26\5\26\u043a\n\26\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write(u"\27\3\27\3\27\3\27\3\27\3\27\5\27\u0448\n\27\3\27\5\27")
        buf.write(u"\u044b\n\27\3\27\3\27\5\27\u044f\n\27\3\27\5\27\u0452")
        buf.write(u"\n\27\3\27\3\27\5\27\u0456\n\27\3\27\5\27\u0459\n\27")
        buf.write(u"\3\27\3\27\5\27\u045d\n\27\3\27\5\27\u0460\n\27\3\27")
        buf.write(u"\3\27\5\27\u0464\n\27\3\27\5\27\u0467\n\27\3\27\5\27")
        buf.write(u"\u046a\n\27\3\27\3\27\5\27\u046e\n\27\3\27\5\27\u0471")
        buf.write(u"\n\27\3\27\3\27\5\27\u0475\n\27\3\27\3\27\3\30\3\30\5")
        buf.write(u"\30\u047b\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write(u"\3\30\3\30\3\30\5\30\u0488\n\30\3\30\3\30\3\31\3\31\3")
        buf.write(u"\31\5\31\u048f\n\31\3\31\3\31\3\31\5\31\u0494\n\31\3")
        buf.write(u"\31\5\31\u0497\n\31\3\31\3\31\3\31\5\31\u049c\n\31\3")
        buf.write(u"\31\3\31\3\31\3\31\3\31\3\31\5\31\u04a4\n\31\3\31\3\31")
        buf.write(u"\3\31\3\31\5\31\u04aa\n\31\3\31\3\31\5\31\u04ae\n\31")
        buf.write(u"\3\32\5\32\u04b1\n\32\3\32\3\32\3\32\5\32\u04b6\n\32")
        buf.write(u"\3\32\5\32\u04b9\n\32\3\32\3\32\5\32\u04bd\n\32\3\32")
        buf.write(u"\3\32\5\32\u04c1\n\32\3\32\5\32\u04c4\n\32\3\33\3\33")
        buf.write(u"\3\33\3\33\3\33\3\33\5\33\u04cc\n\33\5\33\u04ce\n\33")
        buf.write(u"\3\34\3\34\3\34\7\34\u04d3\n\34\f\34\16\34\u04d6\13\34")
        buf.write(u"\3\34\3\34\3\34\5\34\u04db\n\34\3\34\3\34\3\34\3\34\7")
        buf.write(u"\34\u04e1\n\34\f\34\16\34\u04e4\13\34\5\34\u04e6\n\34")
        buf.write(u"\3\34\3\34\3\34\7\34\u04eb\n\34\f\34\16\34\u04ee\13\34")
        buf.write(u"\5\34\u04f0\n\34\5\34\u04f2\n\34\3\35\3\35\3\35\3\35")
        buf.write(u"\5\35\u04f8\n\35\3\36\3\36\3\36\3\36\5\36\u04fe\n\36")
        buf.write(u"\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write(u"\37\3\37\3\37\3\37\3\37\5\37\u050f\n\37\3 \3 \3 \3 \3")
        buf.write(u" \5 \u0516\n \3!\3!\3!\3\"\3\"\5\"\u051d\n\"\3\"\3\"")
        buf.write(u"\3\"\3\"\3\"\3\"\3\"\5\"\u0526\n\"\3#\3#\3#\3#\3$\3$")
        buf.write(u"\3$\3%\3%\3%\3%\3%\5%\u0534\n%\3%\3%\3%\3%\3%\3%\3%\3")
        buf.write(u"%\3%\3%\3%\5%\u0541\n%\3%\3%\3%\5%\u0546\n%\3&\3&\3&")
        buf.write(u"\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0556\n&\3\'\3\'")
        buf.write(u"\3\'\3\'\7\'\u055c\n\'\f\'\16\'\u055f\13\'\3\'\3\'\3")
        buf.write(u"(\3(\3(\3(\3(\5(\u0568\n(\3)\3)\7)\u056c\n)\f)\16)\u056f")
        buf.write(u"\13)\3*\3*\3*\3*\3*\5*\u0576\n*\3*\3*\3*\5*\u057b\n*")
        buf.write(u"\3*\3*\3*\3*\3*\3*\3*\5*\u0584\n*\3+\3+\5+\u0588\n+\5")
        buf.write(u"+\u058a\n+\3+\3+\3+\5+\u058f\n+\3+\3+\7+\u0593\n+\f+")
        buf.write(u"\16+\u0596\13+\3+\3+\5+\u059a\n+\5+\u059c\n+\3+\3+\5")
        buf.write(u"+\u05a0\n+\3+\5+\u05a3\n+\3+\5+\u05a6\n+\3+\3+\7+\u05aa")
        buf.write(u"\n+\f+\16+\u05ad\13+\3+\3+\5+\u05b1\n+\5+\u05b3\n+\3")
        buf.write(u"+\3+\3+\5+\u05b8\n+\3+\3+\3+\3+\3+\5+\u05bf\n+\5+\u05c1")
        buf.write(u"\n+\3+\3+\3+\3+\3+\5+\u05c8\n+\3,\3,\3,\3,\3,\5,\u05cf")
        buf.write(u"\n,\3,\5,\u05d2\n,\3-\3-\3-\3-\3-\3-\5-\u05da\n-\3-\3")
        buf.write(u"-\3-\3-\3-\3-\5-\u05e2\n-\5-\u05e4\n-\3.\3.\3.\3.\3.")
        buf.write(u"\3.\5.\u05ec\n.\3/\3/\5/\u05f0\n/\3/\5/\u05f3\n/\3/\3")
        buf.write(u"/\7/\u05f7\n/\f/\16/\u05fa\13/\3/\3/\5/\u05fe\n/\3/\5")
        buf.write(u"/\u0601\n/\3/\3/\7/\u0605\n/\f/\16/\u0608\13/\5/\u060a")
        buf.write(u"\n/\3\60\3\60\5\60\u060e\n\60\3\60\3\60\3\60\5\60\u0613")
        buf.write(u"\n\60\3\60\3\60\3\60\5\60\u0618\n\60\3\60\3\60\5\60\u061c")
        buf.write(u"\n\60\3\60\3\60\3\60\5\60\u0621\n\60\3\60\5\60\u0624")
        buf.write(u"\n\60\3\60\3\60\3\60\5\60\u0629\n\60\3\60\3\60\5\60\u062d")
        buf.write(u"\n\60\3\60\3\60\5\60\u0631\n\60\3\60\3\60\3\60\5\60\u0636")
        buf.write(u"\n\60\3\60\3\60\3\60\5\60\u063b\n\60\3\60\3\60\3\60\5")
        buf.write(u"\60\u0640\n\60\3\60\3\60\3\60\3\60\5\60\u0646\n\60\3")
        buf.write(u"\60\3\60\3\60\5\60\u064b\n\60\3\60\3\60\3\60\5\60\u0650")
        buf.write(u"\n\60\3\60\3\60\3\60\3\60\5\60\u0656\n\60\3\60\3\60\3")
        buf.write(u"\60\5\60\u065b\n\60\3\60\3\60\3\60\5\60\u0660\n\60\3")
        buf.write(u"\60\3\60\3\60\5\60\u0665\n\60\3\60\3\60\3\60\5\60\u066a")
        buf.write(u"\n\60\3\60\3\60\3\60\5\60\u066f\n\60\3\60\3\60\3\60\5")
        buf.write(u"\60\u0674\n\60\3\60\3\60\3\60\5\60\u0679\n\60\3\60\3")
        buf.write(u"\60\3\60\5\60\u067e\n\60\3\60\3\60\3\60\5\60\u0683\n")
        buf.write(u"\60\3\60\3\60\3\60\5\60\u0688\n\60\3\60\3\60\3\60\3\60")
        buf.write(u"\5\60\u068e\n\60\3\60\3\60\5\60\u0692\n\60\3\60\3\60")
        buf.write(u"\3\60\3\60\5\60\u0698\n\60\3\61\3\61\3\61\3\62\3\62\3")
        buf.write(u"\62\3\62\3\62\5\62\u06a2\n\62\3\62\3\62\3\62\3\62\3\62")
        buf.write(u"\5\62\u06a9\n\62\5\62\u06ab\n\62\3\62\3\62\3\62\3\62")
        buf.write(u"\7\62\u06b1\n\62\f\62\16\62\u06b4\13\62\3\62\3\62\5\62")
        buf.write(u"\u06b8\n\62\3\63\5\63\u06bb\n\63\3\63\3\63\3\63\3\63")
        buf.write(u"\3\63\3\63\5\63\u06c3\n\63\3\63\3\63\3\63\3\63\5\63\u06c9")
        buf.write(u"\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write(u"\63\3\63\3\63\3\63\3\63\5\63\u06d9\n\63\3\63\3\63\3\63")
        buf.write(u"\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u06e5\n\63\5")
        buf.write(u"\63\u06e7\n\63\3\64\5\64\u06ea\n\64\3\64\3\64\3\64\3")
        buf.write(u"\64\3\64\3\64\5\64\u06f2\n\64\3\64\3\64\3\64\3\64\5\64")
        buf.write(u"\u06f8\n\64\3\64\3\64\3\64\3\64\5\64\u06fe\n\64\3\65")
        buf.write(u"\3\65\3\65\3\65\3\65\3\65\3\65\3\65\3\65\7\65\u0709\n")
        buf.write(u"\65\f\65\16\65\u070c\13\65\3\65\3\65\7\65\u0710\n\65")
        buf.write(u"\f\65\16\65\u0713\13\65\3\65\3\65\3\65\7\65\u0718\n\65")
        buf.write(u"\f\65\16\65\u071b\13\65\5\65\u071d\n\65\3\65\3\65\3\65")
        buf.write(u"\3\65\3\65\3\65\3\65\3\65\7\65\u0727\n\65\f\65\16\65")
        buf.write(u"\u072a\13\65\3\65\3\65\7\65\u072e\n\65\f\65\16\65\u0731")
        buf.write(u"\13\65\3\65\3\65\3\65\7\65\u0736\n\65\f\65\16\65\u0739")
        buf.write(u"\13\65\5\65\u073b\n\65\3\65\3\65\3\65\3\65\3\65\3\65")
        buf.write(u"\3\65\3\65\7\65\u0745\n\65\f\65\16\65\u0748\13\65\3\65")
        buf.write(u"\3\65\7\65\u074c\n\65\f\65\16\65\u074f\13\65\3\65\3\65")
        buf.write(u"\3\65\7\65\u0754\n\65\f\65\16\65\u0757\13\65\5\65\u0759")
        buf.write(u"\n\65\3\65\3\65\3\65\7\65\u075e\n\65\f\65\16\65\u0761")
        buf.write(u"\13\65\3\65\3\65\3\65\7\65\u0766\n\65\f\65\16\65\u0769")
        buf.write(u"\13\65\5\65\u076b\n\65\5\65\u076d\n\65\3\66\3\66\3\66")
        buf.write(u"\5\66\u0772\n\66\3\67\3\67\3\67\3\67\6\67\u0778\n\67")
        buf.write(u"\r\67\16\67\u0779\3\67\3\67\38\38\38\78\u0781\n8\f8\16")
        buf.write(u"8\u0784\138\39\59\u0787\n9\39\39\59\u078b\n9\39\39\3")
        buf.write(u"9\59\u0790\n9\39\39\39\39\59\u0796\n9\39\39\39\39\59")
        buf.write(u"\u079c\n9\39\39\39\59\u07a1\n9\39\39\39\59\u07a6\n9\3")
        buf.write(u"9\39\39\59\u07ab\n9\39\39\39\59\u07b0\n9\39\59\u07b3")
        buf.write(u"\n9\3:\3:\3:\5:\u07b8\n:\3:\6:\u07bb\n:\r:\16:\u07bc")
        buf.write(u"\3:\3:\3:\3:\3:\3:\3:\3:\5:\u07c7\n:\3;\3;\5;\u07cb\n")
        buf.write(u";\3;\3;\3;\3;\3;\5;\u07d2\n;\3;\3;\3;\5;\u07d7\n;\3;")
        buf.write(u"\5;\u07da\n;\3;\3;\3;\5;\u07df\n;\3;\5;\u07e2\n;\3;\3")
        buf.write(u";\5;\u07e6\n;\3;\3;\5;\u07ea\n;\3<\3<\3<\3<\7<\u07f0")
        buf.write(u"\n<\f<\16<\u07f3\13<\3=\3=\3=\3=\3=\3=\3=\3>\3>\3>\3")
        buf.write(u">\3>\3>\3>\3>\3>\5>\u0805\n>\3>\5>\u0808\n>\3>\5>\u080b")
        buf.write(u"\n>\3>\3>\5>\u080f\n>\3>\3>\3?\3?\3?\3?\7?\u0817\n?\f")
        buf.write(u"?\16?\u081a\13?\3@\3@\3@\3@\3@\3@\3@\3@\7@\u0824\n@\f")
        buf.write(u"@\16@\u0827\13@\3@\3@\3A\3A\5A\u082d\nA\3A\5A\u0830\n")
        buf.write(u"A\3A\3A\3A\3A\3A\7A\u0837\nA\fA\16A\u083a\13A\3A\5A\u083d")
        buf.write(u"\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u0848\nB\3B\5B\u084b")
        buf.write(u"\nB\3B\3B\5B\u084f\nB\3B\3B\3C\3C\3C\3C\5C\u0857\nC\3")
        buf.write(u"C\5C\u085a\nC\3C\3C\3C\5C\u085f\nC\3C\3C\3C\3C\3C\3C")
        buf.write(u"\5C\u0867\nC\3C\3C\3C\3C\5C\u086d\nC\3C\3C\5C\u0871\n")
        buf.write(u"C\3D\3D\3D\5D\u0876\nD\3D\3D\3D\3D\3D\5D\u087d\nD\3D")
        buf.write(u"\3D\5D\u0881\nD\3D\3D\3D\3D\3D\3D\3D\7D\u088a\nD\fD\16")
        buf.write(u"D\u088d\13D\3D\3D\3D\3D\3D\5D\u0894\nD\3D\5D\u0897\n")
        buf.write(u"D\3D\3D\7D\u089b\nD\fD\16D\u089e\13D\3D\3D\3D\5D\u08a3")
        buf.write(u"\nD\5D\u08a5\nD\3D\3D\3D\5D\u08aa\nD\3D\3D\7D\u08ae\n")
        buf.write(u"D\fD\16D\u08b1\13D\3D\3D\3D\5D\u08b6\nD\5D\u08b8\nD\3")
        buf.write(u"D\3D\5D\u08bc\nD\3D\5D\u08bf\nD\3D\5D\u08c2\nD\3D\3D")
        buf.write(u"\7D\u08c6\nD\fD\16D\u08c9\13D\3D\3D\3D\5D\u08ce\nD\3")
        buf.write(u"D\5D\u08d1\nD\3D\3D\7D\u08d5\nD\fD\16D\u08d8\13D\3D\3")
        buf.write(u"D\3D\5D\u08dd\nD\5D\u08df\nD\3D\3D\3D\5D\u08e4\nD\3D")
        buf.write(u"\3D\3D\3D\3D\3D\5D\u08ec\nD\5D\u08ee\nD\3D\3D\3D\3D\3")
        buf.write(u"D\3D\3D\5D\u08f7\nD\3D\3D\3D\5D\u08fc\nD\3D\3D\3D\3D")
        buf.write(u"\3D\3D\5D\u0904\nD\3D\3D\5D\u0908\nD\3D\3D\3D\3D\3D\3")
        buf.write(u"D\5D\u0910\nD\3D\3D\3D\3D\3D\3D\3D\3D\5D\u091a\nD\3D")
        buf.write(u"\3D\3D\5D\u091f\nD\3D\3D\3D\3D\3D\5D\u0926\nD\3D\3D\5")
        buf.write(u"D\u092a\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D")
        buf.write(u"\3D\3D\3D\5D\u093d\nD\3D\3D\5D\u0941\nD\3D\3D\3D\3D\3")
        buf.write(u"D\3D\3D\3D\3D\3D\5D\u094d\nD\3D\5D\u0950\nD\3D\3D\3D")
        buf.write(u"\3D\3D\3D\3D\5D\u0959\nD\3D\3D\3D\3D\3D\3D\3D\3D\3D\3")
        buf.write(u"D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u096f\nD\3D\3D\3D")
        buf.write(u"\3D\3D\5D\u0976\nD\3D\3D\3D\3D\3D\5D\u097d\nD\3D\3D\3")
        buf.write(u"D\3D\3D\3D\3D\3D\3D\3D\3D\7D\u098a\nD\fD\16D\u098d\13")
        buf.write(u"D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0999\nD\3D\3D\3D")
        buf.write(u"\3D\5D\u099f\nD\3D\3D\3D\3D\5D\u09a5\nD\3D\3D\3D\3D\5")
        buf.write(u"D\u09ab\nD\3D\3D\3D\3D\5D\u09b1\nD\3D\3D\3D\3D\5D\u09b7")
        buf.write(u"\nD\3D\3D\3D\3D\5D\u09bd\nD\3E\3E\3E\5E\u09c2\nE\3E\3")
        buf.write(u"E\3F\3F\3F\5F\u09c9\nF\3F\3F\3G\3G\3G\5G\u09d0\nG\3G")
        buf.write(u"\3G\3G\3G\3G\5G\u09d7\nG\3G\5G\u09da\nG\3G\3G\5G\u09de")
        buf.write(u"\nG\3G\5G\u09e1\nG\3H\3H\3H\3H\3H\3H\3H\3H\3I\3I\3I\5")
        buf.write(u"I\u09ee\nI\3I\3I\3J\3J\3J\5J\u09f5\nJ\3J\3J\3K\3K\3K")
        buf.write(u"\5K\u09fc\nK\3K\3K\3L\3L\5L\u0a02\nL\3L\3L\5L\u0a06\n")
        buf.write(u"L\3L\3L\5L\u0a0a\nL\3M\3M\3M\3M\3M\5M\u0a11\nM\3M\5M")
        buf.write(u"\u0a14\nM\3N\3N\3N\5N\u0a19\nN\3N\3N\3O\3O\3O\5O\u0a20")
        buf.write(u"\nO\3O\3O\3O\7O\u0a25\nO\fO\16O\u0a28\13O\3O\5O\u0a2b")
        buf.write(u"\nO\3P\3P\3P\3P\3P\7P\u0a32\nP\fP\16P\u0a35\13P\3Q\3")
        buf.write(u"Q\3Q\3Q\3R\3R\5R\u0a3d\nR\3R\3R\3S\3S\3S\3S\3S\5S\u0a46")
        buf.write(u"\nS\3S\5S\u0a49\nS\3T\3T\5T\u0a4d\nT\3U\3U\3U\3V\3V\3")
        buf.write(u"V\3V\5V\u0a56\nV\3W\3W\5W\u0a5a\nW\3W\5W\u0a5d\nW\3W")
        buf.write(u"\5W\u0a60\nW\3W\3W\3W\3W\3W\3W\5W\u0a68\nW\3W\3W\3W\3")
        buf.write(u"W\5W\u0a6e\nW\3W\3W\3W\3W\3W\7W\u0a75\nW\fW\16W\u0a78")
        buf.write(u"\13W\5W\u0a7a\nW\3W\3W\3W\3W\3W\3W\3W\7W\u0a83\nW\fW")
        buf.write(u"\16W\u0a86\13W\5W\u0a88\nW\3X\3X\3X\5X\u0a8d\nX\3X\5")
        buf.write(u"X\u0a90\nX\3X\3X\3X\5X\u0a95\nX\3X\3X\3X\3X\3X\3X\3X")
        buf.write(u"\3X\5X\u0a9f\nX\3X\3X\3X\5X\u0aa4\nX\3X\3X\6X\u0aa8\n")
        buf.write(u"X\rX\16X\u0aa9\5X\u0aac\nX\3X\3X\6X\u0ab0\nX\rX\16X\u0ab1")
        buf.write(u"\5X\u0ab4\nX\3X\3X\3X\3X\5X\u0aba\nX\3X\3X\3X\3X\7X\u0ac0")
        buf.write(u"\nX\fX\16X\u0ac3\13X\3X\3X\5X\u0ac7\nX\3X\3X\3X\3X\7")
        buf.write(u"X\u0acd\nX\fX\16X\u0ad0\13X\5X\u0ad2\nX\3Y\3Y\3Y\5Y\u0ad7")
        buf.write(u"\nY\3Y\5Y\u0ada\nY\3Y\3Y\3Y\5Y\u0adf\nY\3Y\3Y\3Y\3Y\3")
        buf.write(u"Y\3Y\5Y\u0ae7\nY\3Y\3Y\3Y\3Y\3Y\3Y\5Y\u0aef\nY\3Y\3Y")
        buf.write(u"\3Y\3Y\5Y\u0af5\nY\3Y\3Y\3Y\3Y\7Y\u0afb\nY\fY\16Y\u0afe")
        buf.write(u"\13Y\3Y\3Y\5Y\u0b02\nY\3Y\3Y\3Y\3Y\7Y\u0b08\nY\fY\16")
        buf.write(u"Y\u0b0b\13Y\5Y\u0b0d\nY\3Z\3Z\5Z\u0b11\nZ\3Z\5Z\u0b14")
        buf.write(u"\nZ\3Z\3Z\3Z\3Z\3Z\3Z\5Z\u0b1c\nZ\3Z\3Z\3Z\3Z\5Z\u0b22")
        buf.write(u"\nZ\3Z\3Z\3Z\3Z\3Z\7Z\u0b29\nZ\fZ\16Z\u0b2c\13Z\5Z\u0b2e")
        buf.write(u"\nZ\3[\3[\5[\u0b32\n[\3[\3[\5[\u0b36\n[\3[\3[\6[\u0b3a")
        buf.write(u"\n[\r[\16[\u0b3b\3[\3[\5[\u0b40\n[\3[\3[\5[\u0b44\n[")
        buf.write(u"\5[\u0b46\n[\3[\5[\u0b49\n[\3[\5[\u0b4c\n[\3[\5[\u0b4f")
        buf.write(u"\n[\3[\3[\6[\u0b53\n[\r[\16[\u0b54\3[\3[\5[\u0b59\n[")
        buf.write(u"\3[\5[\u0b5c\n[\3[\5[\u0b5f\n[\3[\5[\u0b62\n[\3[\5[\u0b65")
        buf.write(u"\n[\5[\u0b67\n[\3\\\3\\\5\\\u0b6b\n\\\3]\3]\3]\3]\3]")
        buf.write(u"\3]\3]\3]\3]\3]\7]\u0b77\n]\f]\16]\u0b7a\13]\5]\u0b7c")
        buf.write(u"\n]\3^\3^\3^\3^\5^\u0b82\n^\3_\3_\5_\u0b86\n_\3`\3`\3")
        buf.write(u"`\3`\3`\3`\5`\u0b8e\n`\3a\3a\5a\u0b92\na\3a\5a\u0b95")
        buf.write(u"\na\3a\5a\u0b98\na\3a\3a\3a\3a\3a\3a\3a\5a\u0ba1\na\3")
        buf.write(u"a\3a\5a\u0ba5\na\3a\5a\u0ba8\na\3a\3a\5a\u0bac\na\3b")
        buf.write(u"\3b\5b\u0bb0\nb\3b\5b\u0bb3\nb\3b\5b\u0bb6\nb\3b\3b\3")
        buf.write(u"b\5b\u0bbb\nb\3b\3b\3b\3b\5b\u0bc1\nb\7b\u0bc3\nb\fb")
        buf.write(u"\16b\u0bc6\13b\3b\3b\3b\3b\3b\3b\3b\5b\u0bcf\nb\3b\3")
        buf.write(u"b\3b\3b\5b\u0bd5\nb\7b\u0bd7\nb\fb\16b\u0bda\13b\3b\3")
        buf.write(u"b\3b\5b\u0bdf\nb\3b\3b\5b\u0be3\nb\3c\3c\3c\3c\5c\u0be9")
        buf.write(u"\nc\3c\5c\u0bec\nc\3d\3d\3d\3d\3d\3d\3d\3d\3d\3d\5d\u0bf8")
        buf.write(u"\nd\3d\3d\5d\u0bfc\nd\3d\3d\5d\u0c00\nd\3e\3e\3e\3e\3")
        buf.write(u"e\3e\5e\u0c08\ne\3e\3e\5e\u0c0c\ne\3f\3f\3f\3f\3g\3g")
        buf.write(u"\5g\u0c14\ng\3g\5g\u0c17\ng\3g\3g\5g\u0c1b\ng\3g\5g\u0c1e")
        buf.write(u"\ng\3g\3g\3g\3g\7g\u0c24\ng\fg\16g\u0c27\13g\3g\3g\5")
        buf.write(u"g\u0c2b\ng\3g\5g\u0c2e\ng\3g\5g\u0c31\ng\3h\3h\5h\u0c35")
        buf.write(u"\nh\3h\5h\u0c38\nh\3h\3h\3h\3h\3h\7h\u0c3f\nh\fh\16h")
        buf.write(u"\u0c42\13h\3h\3h\5h\u0c46\nh\3i\3i\3i\3i\3i\7i\u0c4d")
        buf.write(u"\ni\fi\16i\u0c50\13i\3j\3j\5j\u0c54\nj\3k\3k\3k\7k\u0c59")
        buf.write(u"\nk\fk\16k\u0c5c\13k\3l\3l\7l\u0c60\nl\fl\16l\u0c63\13")
        buf.write(u"l\3l\3l\3l\7l\u0c68\nl\fl\16l\u0c6b\13l\3l\3l\5l\u0c6f")
        buf.write(u"\nl\3m\3m\3m\3m\3m\3m\5m\u0c77\nm\3m\5m\u0c7a\nm\3m\5")
        buf.write(u"m\u0c7d\nm\3m\3m\3m\7m\u0c82\nm\fm\16m\u0c85\13m\5m\u0c87")
        buf.write(u"\nm\3m\3m\3m\3m\3m\5m\u0c8e\nm\3m\5m\u0c91\nm\3m\3m\3")
        buf.write(u"m\3m\3m\3m\5m\u0c99\nm\3n\3n\3n\3n\5n\u0c9f\nn\3n\3n")
        buf.write(u"\3n\3n\3o\3o\3o\3o\3o\5o\u0caa\no\3p\5p\u0cad\np\3p\3")
        buf.write(u"p\3p\3p\3p\3p\3p\3p\3p\5p\u0cb8\np\3p\3p\3p\3p\5p\u0cbe")
        buf.write(u"\np\3p\3p\5p\u0cc2\np\3p\3p\3p\3p\3p\3p\3p\3p\3p\5p\u0ccd")
        buf.write(u"\np\3p\3p\3p\5p\u0cd2\np\5p\u0cd4\np\3p\3p\5p\u0cd8\n")
        buf.write(u"p\3q\3q\3q\3q\3q\3q\3q\3q\5q\u0ce2\nq\3r\3r\3r\3r\3r")
        buf.write(u"\3r\3r\3r\5r\u0cec\nr\3s\3s\7s\u0cf0\ns\fs\16s\u0cf3")
        buf.write(u"\13s\3s\3s\5s\u0cf7\ns\3s\5s\u0cfa\ns\3s\5s\u0cfd\ns")
        buf.write(u"\3s\5s\u0d00\ns\3s\3s\7s\u0d04\ns\fs\16s\u0d07\13s\3")
        buf.write(u"s\3s\5s\u0d0b\ns\3s\5s\u0d0e\ns\3s\5s\u0d11\ns\3s\5s")
        buf.write(u"\u0d14\ns\5s\u0d16\ns\3t\3t\7t\u0d1a\nt\ft\16t\u0d1d")
        buf.write(u"\13t\3t\3t\5t\u0d21\nt\3t\5t\u0d24\nt\3t\5t\u0d27\nt")
        buf.write(u"\3u\3u\5u\u0d2b\nu\3u\3u\3v\3v\5v\u0d31\nv\3v\3v\5v\u0d35")
        buf.write(u"\nv\3w\3w\3w\3w\3w\3w\3w\3w\5w\u0d3f\nw\3x\3x\5x\u0d43")
        buf.write(u"\nx\3x\3x\7x\u0d47\nx\fx\16x\u0d4a\13x\3y\3y\3y\3y\3")
        buf.write(u"y\3y\5y\u0d52\ny\3y\5y\u0d55\ny\3y\3y\5y\u0d59\ny\3y")
        buf.write(u"\5y\u0d5c\ny\3y\3y\5y\u0d60\ny\3y\3y\5y\u0d64\ny\3y\5")
        buf.write(u"y\u0d67\ny\5y\u0d69\ny\3z\3z\3z\3z\7z\u0d6f\nz\fz\16")
        buf.write(u"z\u0d72\13z\3z\3z\3z\3z\3z\3z\3z\3z\3z\5z\u0d7d\nz\3")
        buf.write(u"z\3z\6z\u0d81\nz\rz\16z\u0d82\5z\u0d85\nz\3z\3z\6z\u0d89")
        buf.write(u"\nz\rz\16z\u0d8a\5z\u0d8d\nz\5z\u0d8f\nz\3{\3{\3{\3{")
        buf.write(u"\5{\u0d95\n{\3{\3{\3{\3{\3{\3{\5{\u0d9d\n{\3|\3|\3|\3")
        buf.write(u"|\3|\3|\5|\u0da5\n|\3}\3}\3}\3}\5}\u0dab\n}\3}\3}\3}")
        buf.write(u"\3}\3}\7}\u0db2\n}\f}\16}\u0db5\13}\3}\3}\5}\u0db9\n")
        buf.write(u"}\5}\u0dbb\n}\3}\3}\5}\u0dbf\n}\3~\3~\5~\u0dc3\n~\3\177")
        buf.write(u"\3\177\3\177\3\177\5\177\u0dc9\n\177\3\177\3\177\3\177")
        buf.write(u"\3\177\3\177\5\177\u0dd0\n\177\3\u0080\3\u0080\3\u0080")
        buf.write(u"\3\u0080\3\u0080\7\u0080\u0dd7\n\u0080\f\u0080\16\u0080")
        buf.write(u"\u0dda\13\u0080\5\u0080\u0ddc\n\u0080\3\u0081\3\u0081")
        buf.write(u"\5\u0081\u0de0\n\u0081\3\u0082\3\u0082\5\u0082\u0de4")
        buf.write(u"\n\u0082\3\u0082\3\u0082\5\u0082\u0de8\n\u0082\3\u0082")
        buf.write(u"\5\u0082\u0deb\n\u0082\3\u0082\5\u0082\u0dee\n\u0082")
        buf.write(u"\3\u0082\5\u0082\u0df1\n\u0082\3\u0083\3\u0083\5\u0083")
        buf.write(u"\u0df5\n\u0083\3\u0083\3\u0083\5\u0083\u0df9\n\u0083")
        buf.write(u"\3\u0083\5\u0083\u0dfc\n\u0083\3\u0083\5\u0083\u0dff")
        buf.write(u"\n\u0083\3\u0083\5\u0083\u0e02\n\u0083\3\u0084\3\u0084")
        buf.write(u"\3\u0084\3\u0085\3\u0085\5\u0085\u0e09\n\u0085\3\u0085")
        buf.write(u"\3\u0085\5\u0085\u0e0d\n\u0085\3\u0085\3\u0085\3\u0086")
        buf.write(u"\3\u0086\3\u0086\3\u0086\3\u0087\3\u0087\3\u0087\3\u0087")
        buf.write(u"\3\u0087\7\u0087\u0e1a\n\u0087\f\u0087\16\u0087\u0e1d")
        buf.write(u"\13\u0087\3\u0088\3\u0088\3\u0088\3\u0089\3\u0089\3\u0089")
        buf.write(u"\3\u0089\3\u0089\3\u008a\3\u008a\5\u008a\u0e29\n\u008a")
        buf.write(u"\3\u008a\3\u008a\3\u008a\3\u008a\7\u008a\u0e2f\n\u008a")
        buf.write(u"\f\u008a\16\u008a\u0e32\13\u008a\3\u008b\3\u008b\3\u008b")
        buf.write(u"\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0e3b\n\u008b")
        buf.write(u"\3\u008c\3\u008c\5\u008c\u0e3f\n\u008c\3\u008c\5\u008c")
        buf.write(u"\u0e42\n\u008c\3\u008c\3\u008c\3\u008d\3\u008d\5\u008d")
        buf.write(u"\u0e48\n\u008d\3\u008d\5\u008d\u0e4b\n\u008d\3\u008d")
        buf.write(u"\5\u008d\u0e4e\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write(u"\3\u008e\3\u008e\3\u008e\5\u008e\u0e57\n\u008e\3\u008f")
        buf.write(u"\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\3\u008f\5\u008f")
        buf.write(u"\u0e60\n\u008f\3\u0090\3\u0090\3\u0090\3\u0090\3\u0090")
        buf.write(u"\3\u0090\7\u0090\u0e68\n\u0090\f\u0090\16\u0090\u0e6b")
        buf.write(u"\13\u0090\3\u0090\5\u0090\u0e6e\n\u0090\3\u0091\3\u0091")
        buf.write(u"\3\u0091\3\u0091\3\u0091\3\u0091\7\u0091\u0e76\n\u0091")
        buf.write(u"\f\u0091\16\u0091\u0e79\13\u0091\3\u0092\3\u0092\3\u0092")
        buf.write(u"\3\u0092\3\u0092\3\u0092\3\u0092\5\u0092\u0e82\n\u0092")
        buf.write(u"\3\u0093\3\u0093\3\u0093\3\u0094\3\u0094\3\u0094\5\u0094")
        buf.write(u"\u0e8a\n\u0094\3\u0094\5\u0094\u0e8d\n\u0094\3\u0095")
        buf.write(u"\3\u0095\3\u0095\3\u0095\3\u0095\7\u0095\u0e94\n\u0095")
        buf.write(u"\f\u0095\16\u0095\u0e97\13\u0095\5\u0095\u0e99\n\u0095")
        buf.write(u"\3\u0095\3\u0095\5\u0095\u0e9d\n\u0095\3\u0095\7\u0095")
        buf.write(u"\u0ea0\n\u0095\f\u0095\16\u0095\u0ea3\13\u0095\3\u0095")
        buf.write(u"\5\u0095\u0ea6\n\u0095\3\u0096\3\u0096\3\u0096\3\u0096")
        buf.write(u"\3\u0096\7\u0096\u0ead\n\u0096\f\u0096\16\u0096\u0eb0")
        buf.write(u"\13\u0096\5\u0096\u0eb2\n\u0096\3\u0097\3\u0097\3\u0097")
        buf.write(u"\3\u0098\3\u0098\3\u0098\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write(u"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write(u"\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099\3\u0099")
        buf.write(u"\3\u0099\3\u0099\3\u0099\7\u0099\u0ecf\n\u0099\f\u0099")
        buf.write(u"\16\u0099\u0ed2\13\u0099\5\u0099\u0ed4\n\u0099\3\u0099")
        buf.write(u"\5\u0099\u0ed7\n\u0099\3\u009a\3\u009a\3\u009b\3\u009b")
        buf.write(u"\3\u009c\3\u009c\3\u009d\3\u009d\3\u009d\3\u009d\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e")
        buf.write(u"\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\3\u009e\7\u009e")
        buf.write(u"\u0f0d\n\u009e\f\u009e\16\u009e\u0f10\13\u009e\3\u009e")
        buf.write(u"\3\u009e\5\u009e\u0f14\n\u009e\3\u009f\3\u009f\3\u009f")
        buf.write(u"\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1\3\u00a1")
        buf.write(u"\3\u00a1\3\u00a1\5\u00a1\u0f30\n\u00a1\3\u00a2\3\u00a2")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2\3\u00a2")
        buf.write(u"\3\u00a2\3\u00a2\3\u00a2\5\u00a2\u0f3e\n\u00a2\3\u00a3")
        buf.write(u"\3\u00a3\3\u00a3\7\u00a3\u0f43\n\u00a3\f\u00a3\16\u00a3")
        buf.write(u"\u0f46\13\u00a3\3\u00a3\5\u00a3\u0f49\n\u00a3\3\u00a4")
        buf.write(u"\3\u00a4\3\u00a4\3\u00a4\5\u00a4\u0f4f\n\u00a4\3\u00a5")
        buf.write(u"\3\u00a5\3\u00a5\3\u00a5\3\u00a5\3\u00a5\5\u00a5\u0f57")
        buf.write(u"\n\u00a5\5\u00a5\u0f59\n\u00a5\3\u00a6\3\u00a6\3\u00a6")
        buf.write(u"\3\u00a6\3\u00a7\3\u00a7\3\u00a7\3\u00a7\3\u00a7\5\u00a7")
        buf.write(u"\u0f64\n\u00a7\3\u00a8\3\u00a8\3\u00a8\3\u00a8\3\u00a9")
        buf.write(u"\3\u00a9\3\u00a9\3\u00a9\5\u00a9\u0f6e\n\u00a9\3\u00aa")
        buf.write(u"\3\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa\u0f75\n\u00aa")
        buf.write(u"\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u0f7b\n\u00ab")
        buf.write(u"\3\u00ac\3\u00ac\3\u00ac\3\u00ac\3\u00ad\3\u00ad\5\u00ad")
        buf.write(u"\u0f83\n\u00ad\3\u00ae\3\u00ae\3\u00ae\5\u00ae\u0f88")
        buf.write(u"\n\u00ae\3\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0f8e")
        buf.write(u"\n\u00ae\f\u00ae\16\u00ae\u0f91\13\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\3\u00ae\7\u00ae\u0f96\n\u00ae\f\u00ae\16\u00ae\u0f99")
        buf.write(u"\13\u00ae\3\u00ae\3\u00ae\3\u00ae\7\u00ae\u0f9e\n\u00ae")
        buf.write(u"\f\u00ae\16\u00ae\u0fa1\13\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write(u"\7\u00ae\u0fa6\n\u00ae\f\u00ae\16\u00ae\u0fa9\13\u00ae")
        buf.write(u"\3\u00ae\6\u00ae\u0fac\n\u00ae\r\u00ae\16\u00ae\u0fad")
        buf.write(u"\5\u00ae\u0fb0\n\u00ae\3\u00ae\3\u00ae\5\u00ae\u0fb4")
        buf.write(u"\n\u00ae\3\u00af\3\u00af\3\u00af\5\u00af\u0fb9\n\u00af")
        buf.write(u"\3\u00af\6\u00af\u0fbc\n\u00af\r\u00af\16\u00af\u0fbd")
        buf.write(u"\3\u00af\3\u00af\6\u00af\u0fc2\n\u00af\r\u00af\16\u00af")
        buf.write(u"\u0fc3\5\u00af\u0fc6\n\u00af\3\u00af\3\u00af\3\u00af")
        buf.write(u"\3\u00b0\3\u00b0\3\u00b0\3\u00b0\6\u00b0\u0fcf\n\u00b0")
        buf.write(u"\r\u00b0\16\u00b0\u0fd0\3\u00b0\7\u00b0\u0fd4\n\u00b0")
        buf.write(u"\f\u00b0\16\u00b0\u0fd7\13\u00b0\3\u00b0\3\u00b0\6\u00b0")
        buf.write(u"\u0fdb\n\u00b0\r\u00b0\16\u00b0\u0fdc\5\u00b0\u0fdf\n")
        buf.write(u"\u00b0\3\u00b0\3\u00b0\3\u00b0\3\u00b1\3\u00b1\3\u00b1")
        buf.write(u"\3\u00b2\3\u00b2\3\u00b2\3\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write(u"\u0fed\n\u00b3\3\u00b3\3\u00b3\6\u00b3\u0ff1\n\u00b3")
        buf.write(u"\r\u00b3\16\u00b3\u0ff2\3\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write(u"\u0ff8\n\u00b3\3\u00b4\3\u00b4\3\u00b4\5\u00b4\u0ffd")
        buf.write(u"\n\u00b4\3\u00b4\3\u00b4\6\u00b4\u1001\n\u00b4\r\u00b4")
        buf.write(u"\16\u00b4\u1002\3\u00b4\3\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write(u"\5\u00b4\u100a\n\u00b4\3\u00b5\3\u00b5\3\u00b5\3\u00b6")
        buf.write(u"\3\u00b6\3\u00b6\5\u00b6\u1012\n\u00b6\3\u00b6\3\u00b6")
        buf.write(u"\3\u00b6\3\u00b6\6\u00b6\u1018\n\u00b6\r\u00b6\16\u00b6")
        buf.write(u"\u1019\3\u00b6\3\u00b6\3\u00b6\5\u00b6\u101f\n\u00b6")
        buf.write(u"\3\u00b7\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1025\n\u00b7")
        buf.write(u"\3\u00b7\5\u00b7\u1028\n\u00b7\3\u00b7\3\u00b7\3\u00b7")
        buf.write(u"\3\u00b7\3\u00b7\3\u00b7\5\u00b7\u1030\n\u00b7\3\u00b8")
        buf.write(u"\3\u00b8\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u1037\n\u00b8")
        buf.write(u"\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00b9")
        buf.write(u"\5\u00b9\u1040\n\u00b9\3\u00b9\5\u00b9\u1043\n\u00b9")
        buf.write(u"\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00ba\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bb\7\u00bb")
        buf.write(u"\u1052\n\u00bb\f\u00bb\16\u00bb\u1055\13\u00bb\3\u00bb")
        buf.write(u"\3\u00bb\3\u00bc\3\u00bc\3\u00bc\5\u00bc\u105c\n\u00bc")
        buf.write(u"\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\3\u00bc\5\u00bc")
        buf.write(u"\u1064\n\u00bc\3\u00bd\3\u00bd\5\u00bd\u1068\n\u00bd")
        buf.write(u"\3\u00bd\3\u00bd\3\u00be\3\u00be\3\u00be\5\u00be\u106f")
        buf.write(u"\n\u00be\3\u00be\3\u00be\6\u00be\u1073\n\u00be\r\u00be")
        buf.write(u"\16\u00be\u1074\3\u00bf\3\u00bf\3\u00bf\3\u00bf\6\u00bf")
        buf.write(u"\u107b\n\u00bf\r\u00bf\16\u00bf\u107c\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u1084\n\u00c0\f\u00c0")
        buf.write(u"\16\u00c0\u1087\13\u00c0\3\u00c0\3\u00c0\3\u00c0\5\u00c0")
        buf.write(u"\u108c\n\u00c0\3\u00c0\3\u00c0\3\u00c0\7\u00c0\u1091")
        buf.write(u"\n\u00c0\f\u00c0\16\u00c0\u1094\13\u00c0\3\u00c0\3\u00c0")
        buf.write(u"\3\u00c0\3\u00c0\5\u00c0\u109a\n\u00c0\3\u00c0\7\u00c0")
        buf.write(u"\u109d\n\u00c0\f\u00c0\16\u00c0\u10a0\13\u00c0\5\u00c0")
        buf.write(u"\u10a2\n\u00c0\5\u00c0\u10a4\n\u00c0\3\u00c0\3\u00c0")
        buf.write(u"\6\u00c0\u10a8\n\u00c0\r\u00c0\16\u00c0\u10a9\5\u00c0")
        buf.write(u"\u10ac\n\u00c0\3\u00c0\3\u00c0\7\u00c0\u10b0\n\u00c0")
        buf.write(u"\f\u00c0\16\u00c0\u10b3\13\u00c0\5\u00c0\u10b5\n\u00c0")
        buf.write(u"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\3\u00c1\7\u00c1\u10bc")
        buf.write(u"\n\u00c1\f\u00c1\16\u00c1\u10bf\13\u00c1\3\u00c1\3\u00c1")
        buf.write(u"\3\u00c1\5\u00c1\u10c4\n\u00c1\3\u00c1\3\u00c1\3\u00c1")
        buf.write(u"\7\u00c1\u10c9\n\u00c1\f\u00c1\16\u00c1\u10cc\13\u00c1")
        buf.write(u"\3\u00c1\3\u00c1\3\u00c1\3\u00c1\5\u00c1\u10d2\n\u00c1")
        buf.write(u"\3\u00c1\7\u00c1\u10d5\n\u00c1\f\u00c1\16\u00c1\u10d8")
        buf.write(u"\13\u00c1\5\u00c1\u10da\n\u00c1\5\u00c1\u10dc\n\u00c1")
        buf.write(u"\3\u00c1\3\u00c1\6\u00c1\u10e0\n\u00c1\r\u00c1\16\u00c1")
        buf.write(u"\u10e1\5\u00c1\u10e4\n\u00c1\3\u00c1\3\u00c1\7\u00c1")
        buf.write(u"\u10e8\n\u00c1\f\u00c1\16\u00c1\u10eb\13\u00c1\5\u00c1")
        buf.write(u"\u10ed\n\u00c1\3\u00c2\3\u00c2\3\u00c2\5\u00c2\u10f2")
        buf.write(u"\n\u00c2\3\u00c2\3\u00c2\3\u00c2\7\u00c2\u10f7\n\u00c2")
        buf.write(u"\f\u00c2\16\u00c2\u10fa\13\u00c2\3\u00c3\3\u00c3\3\u00c3")
        buf.write(u"\3\u00c3\7\u00c3\u1100\n\u00c3\f\u00c3\16\u00c3\u1103")
        buf.write(u"\13\u00c3\3\u00c3\3\u00c3\5\u00c3\u1107\n\u00c3\3\u00c3")
        buf.write(u"\3\u00c3\3\u00c3\3\u00c3\3\u00c3\7\u00c3\u110e\n\u00c3")
        buf.write(u"\f\u00c3\16\u00c3\u1111\13\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write(u"\3\u00c3\5\u00c3\u1117\n\u00c3\3\u00c3\7\u00c3\u111a")
        buf.write(u"\n\u00c3\f\u00c3\16\u00c3\u111d\13\u00c3\5\u00c3\u111f")
        buf.write(u"\n\u00c3\5\u00c3\u1121\n\u00c3\3\u00c3\3\u00c3\3\u00c3")
        buf.write(u"\3\u00c3\7\u00c3\u1127\n\u00c3\f\u00c3\16\u00c3\u112a")
        buf.write(u"\13\u00c3\5\u00c3\u112c\n\u00c3\3\u00c4\3\u00c4\3\u00c4")
        buf.write(u"\3\u00c4\3\u00c4\3\u00c4\3\u00c4\3\u00c4\7\u00c4\u1136")
        buf.write(u"\n\u00c4\f\u00c4\16\u00c4\u1139\13\u00c4\3\u00c4\3\u00c4")
        buf.write(u"\3\u00c4\5\u00c4\u113e\n\u00c4\3\u00c5\3\u00c5\3\u00c5")
        buf.write(u"\3\u00c5\3\u00c5\7\u00c5\u1145\n\u00c5\f\u00c5\16\u00c5")
        buf.write(u"\u1148\13\u00c5\3\u00c6\3\u00c6\3\u00c6\3\u00c6\7\u00c6")
        buf.write(u"\u114e\n\u00c6\f\u00c6\16\u00c6\u1151\13\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\5\u00c6\u1155\n\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\3\u00c6\7\u00c6\u115c\n\u00c6\f\u00c6\16\u00c6")
        buf.write(u"\u115f\13\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u1164")
        buf.write(u"\n\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6")
        buf.write(u"\3\u00c6\7\u00c6\u116d\n\u00c6\f\u00c6\16\u00c6\u1170")
        buf.write(u"\13\u00c6\5\u00c6\u1172\n\u00c6\3\u00c7\3\u00c7\3\u00c7")
        buf.write(u"\3\u00c7\3\u00c7\3\u00c7\3\u00c7\3\u00c7\7\u00c7\u117c")
        buf.write(u"\n\u00c7\f\u00c7\16\u00c7\u117f\13\u00c7\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\3\u00c8\5\u00c8\u1185\n\u00c8\3\u00c8\3\u00c8")
        buf.write(u"\3\u00c8\5\u00c8\u118a\n\u00c8\3\u00c9\3\u00c9\3\u00c9")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\5\u00ca\u1199\n\u00ca\3\u00ca")
        buf.write(u"\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca\3\u00ca")
        buf.write(u"\3\u00ca\5\u00ca\u11a4\n\u00ca\3\u00ca\5\u00ca\u11a7")
        buf.write(u"\n\u00ca\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb\3\u00cb")
        buf.write(u"\3\u00cb\3\u00cb\5\u00cb\u11b1\n\u00cb\3\u00cc\3\u00cc")
        buf.write(u"\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\3\u00cc\5\u00cc")
        buf.write(u"\u11bb\n\u00cc\3\u00cd\3\u00cd\3\u00cd\3\u00cd\3\u00cd")
        buf.write(u"\3\u00cd\3\u00cd\3\u00cd\5\u00cd\u11c5\n\u00cd\3\u00ce")
        buf.write(u"\3\u00ce\3\u00ce\3\u00cf\3\u00cf\3\u00cf\3\u00cf\3\u00cf")
        buf.write(u"\5\u00cf\u11cf\n\u00cf\3\u00d0\3\u00d0\5\u00d0\u11d3")
        buf.write(u"\n\u00d0\3\u00d0\3\u00d0\5\u00d0\u11d7\n\u00d0\3\u00d0")
        buf.write(u"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write(u"\u11e0\n\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write(u"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write(u"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0")
        buf.write(u"\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\3\u00d0\5\u00d0")
        buf.write(u"\u11fb\n\u00d0\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write(u"\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1\3\u00d1")
        buf.write(u"\3\u00d1\5\u00d1\u120a\n\u00d1\3\u00d2\3\u00d2\3\u00d2")
        buf.write(u"\3\u00d2\3\u00d3\3\u00d3\5\u00d3\u1212\n\u00d3\3\u00d3")
        buf.write(u"\3\u00d3\3\u00d3\3\u00d4\3\u00d4\3\u00d4\3\u00d4\7\u00d4")
        buf.write(u"\u121b\n\u00d4\f\u00d4\16\u00d4\u121e\13\u00d4\3\u00d5")
        buf.write(u"\3\u00d5\3\u00d5\3\u00d5\5\u00d5\u1224\n\u00d5\3\u00d6")
        buf.write(u"\3\u00d6\5\u00d6\u1228\n\u00d6\3\u00d6\3\u00d6\3\u00d6")
        buf.write(u"\3\u00d7\3\u00d7\5\u00d7\u122f\n\u00d7\3\u00d7\3\u00d7")
        buf.write(u"\3\u00d7\5\u00d7\u1234\n\u00d7\3\u00d7\5\u00d7\u1237")
        buf.write(u"\n\u00d7\3\u00d7\5\u00d7\u123a\n\u00d7\3\u00d8\3\u00d8")
        buf.write(u"\3\u00d8\3\u00d8\3\u00d8\3\u00d8\3\u00d8\5\u00d8\u1243")
        buf.write(u"\n\u00d8\3\u00d9\3\u00d9\5\u00d9\u1247\n\u00d9\3\u00d9")
        buf.write(u"\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00d9\3\u00da")
        buf.write(u"\3\u00da\3\u00da\3\u00da\3\u00da\3\u00da\3\u00db\3\u00db")
        buf.write(u"\3\u00db\3\u00db\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\3\u00dc\7\u00dc\u1263\n\u00dc")
        buf.write(u"\f\u00dc\16\u00dc\u1266\13\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\3\u00dc\5\u00dc\u126c\n\u00dc\3\u00dc\3\u00dc\5\u00dc")
        buf.write(u"\u1270\n\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc\3\u00dc")
        buf.write(u"\5\u00dc\u1277\n\u00dc\3\u00dc\5\u00dc\u127a\n\u00dc")
        buf.write(u"\3\u00dc\3\u00dc\3\u00dc\5\u00dc\u127f\n\u00dc\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\5\u00dd\u1289\n\u00dd\3\u00dd\3\u00dd\5\u00dd\u128d")
        buf.write(u"\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1293")
        buf.write(u"\n\u00dd\3\u00dd\5\u00dd\u1296\n\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\5\u00dd\u129b\n\u00dd\3\u00dd\3\u00dd\5\u00dd")
        buf.write(u"\u129f\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\5\u00dd\u12a6\n\u00dd\3\u00dd\5\u00dd\u12a9\n\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12af\n\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\5\u00dd\u12c7\n\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\5\u00dd\u12d4\n\u00dd\3\u00dd\5\u00dd\u12d7")
        buf.write(u"\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\5\u00dd\u12e1\n\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12e9\n\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\5\u00dd\u12ed\n\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u12f4\n\u00dd\3\u00dd")
        buf.write(u"\5\u00dd\u12f7\n\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\7\u00dd\u12fe\n\u00dd\f\u00dd\16\u00dd\u1301")
        buf.write(u"\13\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u1306\n\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\5\u00dd\u130c\n\u00dd")
        buf.write(u"\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd\3\u00dd")
        buf.write(u"\3\u00dd\5\u00dd\u1316\n\u00dd\5\u00dd\u1318\n\u00dd")
        buf.write(u"\3\u00de\3\u00de\3\u00de\3\u00de\5\u00de\u131e\n\u00de")
        buf.write(u"\3\u00de\5\u00de\u1321\n\u00de\3\u00de\5\u00de\u1324")
        buf.write(u"\n\u00de\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df\3\u00df")
        buf.write(u"\3\u00df\3\u00df\3\u00df\3\u00df\5\u00df\u1330\n\u00df")
        buf.write(u"\3\u00df\5\u00df\u1333\n\u00df\3\u00e0\3\u00e0\3\u00e0")
        buf.write(u"\3\u00e0\5\u00e0\u1339\n\u00e0\3\u00e1\5\u00e1\u133c")
        buf.write(u"\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write(u"\5\u00e1\u1344\n\u00e1\3\u00e1\3\u00e1\3\u00e1\3\u00e1")
        buf.write(u"\3\u00e1\3\u00e1\5\u00e1\u134c\n\u00e1\3\u00e2\3\u00e2")
        buf.write(u"\3\u00e2\3\u00e2\5\u00e2\u1352\n\u00e2\3\u00e2\3\u00e2")
        buf.write(u"\5\u00e2\u1356\n\u00e2\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write(u"\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3\3\u00e3")
        buf.write(u"\3\u00e3\5\u00e3\u1364\n\u00e3\3\u00e4\3\u00e4\3\u00e4")
        buf.write(u"\3\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e5\7\u00e5\u136e")
        buf.write(u"\n\u00e5\f\u00e5\16\u00e5\u1371\13\u00e5\3\u00e5\3\u00e5")
        buf.write(u"\3\u00e5\3\u00e5\5\u00e5\u1377\n\u00e5\3\u00e5\5\u00e5")
        buf.write(u"\u137a\n\u00e5\3\u00e5\3\u00e5\3\u00e5\3\u00e6\3\u00e6")
        buf.write(u"\5\u00e6\u1381\n\u00e6\3\u00e6\3\u00e6\3\u00e6\7\u00e6")
        buf.write(u"\u1386\n\u00e6\f\u00e6\16\u00e6\u1389\13\u00e6\3\u00e7")
        buf.write(u"\3\u00e7\5\u00e7\u138d\n\u00e7\3\u00e7\6\u00e7\u1390")
        buf.write(u"\n\u00e7\r\u00e7\16\u00e7\u1391\3\u00e8\3\u00e8\3\u00e8")
        buf.write(u"\3\u00e8\3\u00e8\3\u00e8\3\u00e8\7\u00e8\u139b\n\u00e8")
        buf.write(u"\f\u00e8\16\u00e8\u139e\13\u00e8\3\u00e9\3\u00e9\3\u00e9")
        buf.write(u"\3\u00e9\3\u00ea\3\u00ea\3\u00eb\3\u00eb\5\u00eb\u13a8")
        buf.write(u"\n\u00eb\3\u00eb\3\u00eb\3\u00eb\3\u00eb\5\u00eb\u13ae")
        buf.write(u"\n\u00eb\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u13b3\n\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec\3\u00ec")
        buf.write(u"\3\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u13c0\n\u00ec")
        buf.write(u"\5\u00ec\u13c2\n\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec")
        buf.write(u"\u13c7\n\u00ec\3\u00ec\3\u00ec\3\u00ec\5\u00ec\u13cc")
        buf.write(u"\n\u00ec\5\u00ec\u13ce\n\u00ec\3\u00ed\3\u00ed\3\u00ed")
        buf.write(u"\3\u00ed\3\u00ed\5\u00ed\u13d5\n\u00ed\3\u00ee\3\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u13dc\n\u00ee\3\u00ee")
        buf.write(u"\5\u00ee\u13df\n\u00ee\3\u00ee\5\u00ee\u13e2\n\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\3\u00ee\3\u00ee\5\u00ee\u13e8\n\u00ee")
        buf.write(u"\3\u00ee\3\u00ee\5\u00ee\u13ec\n\u00ee\3\u00ef\3\u00ef")
        buf.write(u"\3\u00ef\3\u00ef\5\u00ef\u13f2\n\u00ef\3\u00f0\3\u00f0")
        buf.write(u"\3\u00f0\3\u00f0\5\u00f0\u13f8\n\u00f0\3\u00f0\3\u00f0")
        buf.write(u"\3\u00f1\3\u00f1\3\u00f1\3\u00f2\3\u00f2\3\u00f2\3\u00f3")
        buf.write(u"\3\u00f3\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u1407\n\u00f3")
        buf.write(u"\3\u00f3\3\u00f3\3\u00f3\5\u00f3\u140c\n\u00f3\3\u00f4")
        buf.write(u"\3\u00f4\3\u00f4\3\u00f4\5\u00f4\u1412\n\u00f4\3\u00f5")
        buf.write(u"\3\u00f5\3\u00f6\3\u00f6\3\u00f6\5\u00f6\u1419\n\u00f6")
        buf.write(u"\5\u00f6\u141b\n\u00f6\3\u00f7\3\u00f7\3\u00f7\3\u00f7")
        buf.write(u"\3\u00f7\5\u00f7\u1422\n\u00f7\3\u00f7\5\u00f7\u1425")
        buf.write(u"\n\u00f7\3\u00f8\3\u00f8\3\u00f9\3\u00f9\3\u00fa\3\u00fa")
        buf.write(u"\3\u00fa\3\u00fa\5\u00fa\u142f\n\u00fa\3\u00fb\3\u00fb")
        buf.write(u"\5\u00fb\u1433\n\u00fb\3\u00fc\3\u00fc\3\u00fd\3\u00fd")
        buf.write(u"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd")
        buf.write(u"\3\u00fd\3\u00fd\3\u00fd\3\u00fd\3\u00fd\6\u00fd\u1445")
        buf.write(u"\n\u00fd\r\u00fd\16\u00fd\u1446\3\u00fe\3\u00fe\3\u00fe")
        buf.write(u"\3\u00fe\3\u00fe\5\u00fe\u144e\n\u00fe\5\u00fe\u1450")
        buf.write(u"\n\u00fe\3\u00ff\3\u00ff\3\u00ff\6\u00ff\u1455\n\u00ff")
        buf.write(u"\r\u00ff\16\u00ff\u1456\5\u00ff\u1459\n\u00ff\3\u0100")
        buf.write(u"\3\u0100\5\u0100\u145d\n\u0100\3\u0101\3\u0101\3\u0101")
        buf.write(u"\5\u0101\u1462\n\u0101\3\u0102\3\u0102\3\u0102\3\u0102")
        buf.write(u"\3\u0102\3\u0102\3\u0102\3\u0102\3\u0102\5\u0102\u146d")
        buf.write(u"\n\u0102\3\u0103\3\u0103\3\u0103\5\u0103\u1472\n\u0103")
        buf.write(u"\3\u0104\3\u0104\3\u0105\3\u0105\5\u0105\u1478\n\u0105")
        buf.write(u"\3\u0106\5\u0106\u147b\n\u0106\3\u0106\3\u0106\5\u0106")
        buf.write(u"\u147f\n\u0106\3\u0106\6\u0106\u1482\n\u0106\r\u0106")
        buf.write(u"\16\u0106\u1483\3\u0106\5\u0106\u1487\n\u0106\3\u0106")
        buf.write(u"\3\u0106\5\u0106\u148b\n\u0106\3\u0106\3\u0106\5\u0106")
        buf.write(u"\u148f\n\u0106\5\u0106\u1491\n\u0106\3\u0107\3\u0107")
        buf.write(u"\3\u0108\5\u0108\u1496\n\u0108\3\u0108\3\u0108\3\u0109")
        buf.write(u"\5\u0109\u149b\n\u0109\3\u0109\3\u0109\3\u010a\3\u010a")
        buf.write(u"\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a\3\u010a")
        buf.write(u"\5\u010a\u14a8\n\u010a\3\u010a\5\u010a\u14ab\n\u010a")
        buf.write(u"\3\u010b\3\u010b\5\u010b\u14af\n\u010b\3\u010b\5\u010b")
        buf.write(u"\u14b2\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b\u14b7")
        buf.write(u"\n\u010b\3\u010b\3\u010b\5\u010b\u14bb\n\u010b\3\u010b")
        buf.write(u"\3\u010b\5\u010b\u14bf\n\u010b\3\u010b\5\u010b\u14c2")
        buf.write(u"\n\u010b\3\u010b\5\u010b\u14c5\n\u010b\3\u010b\3\u010b")
        buf.write(u"\5\u010b\u14c9\n\u010b\3\u010b\5\u010b\u14cc\n\u010b")
        buf.write(u"\3\u010b\5\u010b\u14cf\n\u010b\3\u010b\3\u010b\5\u010b")
        buf.write(u"\u14d3\n\u010b\3\u010b\5\u010b\u14d6\n\u010b\3\u010b")
        buf.write(u"\5\u010b\u14d9\n\u010b\3\u010b\3\u010b\3\u010b\5\u010b")
        buf.write(u"\u14de\n\u010b\3\u010b\3\u010b\3\u010b\3\u010b\3\u010b")
        buf.write(u"\7\u010b\u14e5\n\u010b\f\u010b\16\u010b\u14e8\13\u010b")
        buf.write(u"\3\u010b\3\u010b\5\u010b\u14ec\n\u010b\3\u010b\3\u010b")
        buf.write(u"\3\u010b\5\u010b\u14f1\n\u010b\3\u010b\3\u010b\5\u010b")
        buf.write(u"\u14f5\n\u010b\3\u010b\5\u010b\u14f8\n\u010b\3\u010c")
        buf.write(u"\3\u010c\5\u010c\u14fc\n\u010c\3\u010c\3\u010c\5\u010c")
        buf.write(u"\u1500\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u1505")
        buf.write(u"\n\u010c\3\u010c\3\u010c\3\u010c\5\u010c\u150a\n\u010c")
        buf.write(u"\3\u010c\3\u010c\5\u010c\u150e\n\u010c\5\u010c\u1510")
        buf.write(u"\n\u010c\3\u010d\3\u010d\3\u010d\3\u010d\3\u010e\3\u010e")
        buf.write(u"\3\u010e\3\u010e\3\u010e\3\u010e\3\u010f\3\u010f\3\u010f")
        buf.write(u"\3\u010f\5\u010f\u1520\n\u010f\3\u010f\3\u010f\3\u0110")
        buf.write(u"\3\u0110\3\u0110\7\u0110\u1527\n\u0110\f\u0110\16\u0110")
        buf.write(u"\u152a\13\u0110\3\u0111\3\u0111\3\u0111\7\u0111\u152f")
        buf.write(u"\n\u0111\f\u0111\16\u0111\u1532\13\u0111\3\u0112\3\u0112")
        buf.write(u"\3\u0112\3\u0112\7\u0112\u1538\n\u0112\f\u0112\16\u0112")
        buf.write(u"\u153b\13\u0112\3\u0112\3\u0112\3\u0113\3\u0113\3\u0113")
        buf.write(u"\7\u0113\u1542\n\u0113\f\u0113\16\u0113\u1545\13\u0113")
        buf.write(u"\3\u0114\3\u0114\3\u0114\7\u0114\u154a\n\u0114\f\u0114")
        buf.write(u"\16\u0114\u154d\13\u0114\3\u0115\3\u0115\3\u0115\7\u0115")
        buf.write(u"\u1552\n\u0115\f\u0115\16\u0115\u1555\13\u0115\3\u0116")
        buf.write(u"\3\u0116\3\u0116\7\u0116\u155a\n\u0116\f\u0116\16\u0116")
        buf.write(u"\u155d\13\u0116\3\u0117\3\u0117\3\u0117\7\u0117\u1562")
        buf.write(u"\n\u0117\f\u0117\16\u0117\u1565\13\u0117\3\u0118\3\u0118")
        buf.write(u"\3\u0118\3\u0118\3\u0118\3\u0118\5\u0118\u156d\n\u0118")
        buf.write(u"\5\u0118\u156f\n\u0118\3\u0119\3\u0119\3\u0119\5\u0119")
        buf.write(u"\u1574\n\u0119\3\u0119\5\u0119\u1577\n\u0119\3\u0119")
        buf.write(u"\3\u0119\3\u0119\5\u0119\u157c\n\u0119\3\u0119\5\u0119")
        buf.write(u"\u157f\n\u0119\3\u011a\3\u011a\5\u011a\u1583\n\u011a")
        buf.write(u"\3\u011b\3\u011b\3\u011b\3\u011c\3\u011c\3\u011c\3\u011c")
        buf.write(u"\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u1591")
        buf.write(u"\n\u011d\3\u011d\3\u011d\3\u011d\3\u011d\3\u011d\5\u011d")
        buf.write(u"\u1598\n\u011d\3\u011d\3\u011d\3\u011d\5\u011d\u159d")
        buf.write(u"\n\u011d\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\6\u011e\u15bd\n\u011e\r\u011e")
        buf.write(u"\16\u011e\u15be\3\u011e\3\u011e\5\u011e\u15c3\n\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\6\u011e\u15c9\n\u011e")
        buf.write(u"\r\u011e\16\u011e\u15ca\3\u011e\3\u011e\5\u011e\u15cf")
        buf.write(u"\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u15d8\n\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\5\u011e\u15e0\n\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\5\u011e\u15e5\n\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u15ed\n\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\5\u011e\u15f2\n\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\5\u011e\u15f7\n\u011e\5\u011e\u15f9")
        buf.write(u"\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u1602\n\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\5\u011e\u1607\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\5\u011e\u160f\n\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\5\u011e\u1614\n\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\5\u011e\u161c\n\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u1624")
        buf.write(u"\n\u011e\3\u011e\5\u011e\u1627\n\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e")
        buf.write(u"\u1631\n\u011e\3\u011e\3\u011e\3\u011e\3\u011e\3\u011e")
        buf.write(u"\3\u011e\3\u011e\3\u011e\3\u011e\5\u011e\u163c\n\u011e")
        buf.write(u"\3\u011f\3\u011f\3\u011f\3\u011f\3\u011f\3\u0120\3\u0120")
        buf.write(u"\3\u0120\3\u0120\7\u0120\u1647\n\u0120\f\u0120\16\u0120")
        buf.write(u"\u164a\13\u0120\3\u0120\3\u0120\3\u0120\3\u0120\3\u0120")
        buf.write(u"\5\u0120\u1651\n\u0120\3\u0121\3\u0121\5\u0121\u1655")
        buf.write(u"\n\u0121\3\u0122\3\u0122\3\u0122\5\u0122\u165a\n\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write(u"\5\u0122\u1663\n\u0122\3\u0122\5\u0122\u1666\n\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\5\u0122\u1672\n\u0122\3\u0122")
        buf.write(u"\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\5\u0122\u167a")
        buf.write(u"\n\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122\3\u0122")
        buf.write(u"\7\u0122\u1682\n\u0122\f\u0122\16\u0122\u1685\13\u0122")
        buf.write(u"\5\u0122\u1687\n\u0122\3\u0122\3\u0122\5\u0122\u168b")
        buf.write(u"\n\u0122\3\u0122\3\u0122\5\u0122\u168f\n\u0122\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123\3\u0123")
        buf.write(u"\3\u0123\5\u0123\u16a8\n\u0123\3\u0124\3\u0124\3\u0124")
        buf.write(u"\3\u0124\3\u0124\3\u0125\3\u0125\3\u0125\3\u0125\5\u0125")
        buf.write(u"\u16b3\n\u0125\3\u0125\3\u0125\3\u0125\3\u0125\3\u0125")
        buf.write(u"\5\u0125\u16ba\n\u0125\7\u0125\u16bc\n\u0125\f\u0125")
        buf.write(u"\16\u0125\u16bf\13\u0125\3\u0126\3\u0126\3\u0126\3\u0126")
        buf.write(u"\5\u0126\u16c5\n\u0126\3\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\3\u0127\5\u0127\u16cd\n\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\5\u0127\u16d2\n\u0127\3\u0127\3\u0127\3\u0127")
        buf.write(u"\3\u0127\7\u0127\u16d8\n\u0127\f\u0127\16\u0127\u16db")
        buf.write(u"\13\u0127\3\u0128\3\u0128\3\u0128\5\u0128\u16e0\n\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\5\u0128\u16ea\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\5\u0128\u16f7\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\5\u0128\u16fd\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\5\u0128\u1703\n\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128\3\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1713\n\u0128")
        buf.write(u"\3\u0128\3\u0128\3\u0128\3\u0128\5\u0128\u1719\n\u0128")
        buf.write(u"\7\u0128\u171b\n\u0128\f\u0128\16\u0128\u171e\13\u0128")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\7\u0129\u172e\n\u0129\f\u0129\16\u0129\u1731\13\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\6\u0129\u173a\n\u0129\r\u0129\16\u0129\u173b\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\5\u0129\u174d\n\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129\3\u0129")
        buf.write(u"\7\u0129\u175a\n\u0129\f\u0129\16\u0129\u175d\13\u0129")
        buf.write(u"\3\u012a\3\u012a\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write(u"\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b\3\u012b")
        buf.write(u"\3\u012b\3\u012b\5\u012b\u176f\n\u012b\3\u012c\3\u012c")
        buf.write(u"\3\u012c\3\u012c\3\u012c\3\u012c\3\u012c\5\u012c\u1778")
        buf.write(u"\n\u012c\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d\3\u012d")
        buf.write(u"\3\u012d\5\u012d\u1781\n\u012d\3\u012e\3\u012e\3\u012f")
        buf.write(u"\3\u012f\3\u0130\3\u0130\3\u0131\3\u0131\3\u0132\3\u0132")
        buf.write(u"\3\u0133\3\u0133\3\u0134\3\u0134\3\u0135\3\u0135\3\u0135")
        buf.write(u"\2\5\u024c\u024e\u0250\u0136\2\4\6\b\n\f\16\20\22\24")
        buf.write(u"\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTV")
        buf.write(u"XZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a")
        buf.write(u"\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c")
        buf.write(u"\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae")
        buf.write(u"\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0")
        buf.write(u"\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2")
        buf.write(u"\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4")
        buf.write(u"\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6")
        buf.write(u"\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108")
        buf.write(u"\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a")
        buf.write(u"\u011c\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c")
        buf.write(u"\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e")
        buf.write(u"\u0140\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150")
        buf.write(u"\u0152\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162")
        buf.write(u"\u0164\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174")
        buf.write(u"\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186")
        buf.write(u"\u0188\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198")
        buf.write(u"\u019a\u019c\u019e\u01a0\u01a2\u01a4\u01a6\u01a8\u01aa")
        buf.write(u"\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8\u01ba\u01bc")
        buf.write(u"\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce")
        buf.write(u"\u01d0\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0")
        buf.write(u"\u01e2\u01e4\u01e6\u01e8\u01ea\u01ec\u01ee\u01f0\u01f2")
        buf.write(u"\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200\u0202\u0204")
        buf.write(u"\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216")
        buf.write(u"\u0218\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228")
        buf.write(u"\u022a\u022c\u022e\u0230\u0232\u0234\u0236\u0238\u023a")
        buf.write(u"\u023c\u023e\u0240\u0242\u0244\u0246\u0248\u024a\u024c")
        buf.write(u"\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e")
        buf.write(u"\u0260\u0262\u0264\u0266\u0268\2t\4\2##\u0082\u0082\4")
        buf.write(u"\2\u01a1\u01a1\u01a6\u01a6\5\2==\u0088\u0088\u009c\u009c")
        buf.write(u"\5\2&&\u0122\u0122\u0160\u0160\6\2&&\u0141\u0141\u01a0")
        buf.write(u"\u01a0\u01e4\u01e4\4\2\u0198\u0198\u03c2\u03c2\4\2CC")
        buf.write(u"{{\4\2\16\16\u00f8\u00f8\5\2((II\u009f\u009f\4\2\u014e")
        buf.write(u"\u014e\u01b8\u01b8\5\2\u0191\u0191\u0207\u0207\u020d")
        buf.write(u"\u020d\4\2\u0128\u0128\u0164\u0164\4\2\u010a\u010a\u0172")
        buf.write(u"\u0172\4\2\u0108\u0108\u0157\u0157\5\2DDHHll\5\2&&\u0132")
        buf.write(u"\u0132\u014c\u014c\5\2&&\u012e\u012e\u0266\u0266\4\2")
        buf.write(u"EEOO\5\2\u0150\u0150\u01af\u01af\u01e6\u01e6\4\2==\u0088")
        buf.write(u"\u0088\3\2\u03b8\u03b9\5\2\u014b\u014b\u016d\u016d\u019e")
        buf.write(u"\u019e\4\2&&\u03b8\u03b9\b\2&&\u0118\u0118\u011a\u011a")
        buf.write(u"\u0132\u0132\u014c\u014c\u01c5\u01c5\3\2\u03b9\u03ba")
        buf.write(u"\4\2\7\7..\4\2\f\f\u0096\u0096\4\2\u00a7\u00a7\u021d")
        buf.write(u"\u021d\4\2\23\23}}\5\2\'\'AA\\\\\4\2\\\\\u011c\u011c")
        buf.write(u"\4\2\u0114\u0114\u0148\u0148\4\2XX\u01dc\u01dc\4\2\'")
        buf.write(u"\'\\\\\4\2\b\b,,\4\2\u00a3\u00a3\u0218\u0218\6\2\u014b")
        buf.write(u"\u014b\u016d\u016d\u019d\u019d\u01bb\u01bb\4\2\u014b")
        buf.write(u"\u014b\u019d\u019d\4\2\r\r))\5\2::CC\u00a1\u00a1\4\2")
        buf.write(u"  GG\4\2TT\u0080\u0080\4\2\b\b,-\3\2\u01f3\u01f4\4\2")
        buf.write(u"\u0153\u0153\u01e2\u01e2\4\2\u00bd\u00bd\u0175\u0175")
        buf.write(u"\7\2]]\u017a\u017b\u017d\u017d\u0181\u0189\u01c7\u01c7")
        buf.write(u"\6\2\u0177\u0178\u017c\u017c\u017e\u017f\u01c8\u01c8")
        buf.write(u"\5\2^^\u0176\u0176\u0180\u0180\4\2\u0166\u0166\u01f5")
        buf.write(u"\u01f5\4\2\u01ef\u01ef\u01f1\u01f1\4\2\u0102\u0102\u01f6")
        buf.write(u"\u01f6\4\2NN\u01d6\u01d6\4\2..\u0126\u0126\5\2\35\35")
        buf.write(u"\65\65\u009a\u009a\5\2qq\u0093\u0093\u0151\u0151\4\2")
        buf.write(u"ZZ\u009d\u009d\4\2\u0110\u0110\u01e7\u01e7\4\2$$\u021a")
        buf.write(u"\u021a\4\2dd\u0172\u0172\4\2\u0144\u0144\u01c1\u01c1")
        buf.write(u"\6\2\u00af\u00af\u00b1\u00b1\u00b4\u00b4\u01fe\u01fe")
        buf.write(u"\4\2\u0103\u0103\u01c9\u01c9\4\2<<DD\b\2qq\u0093\u0093")
        buf.write(u"\u0098\u0098\u013d\u013d\u0151\u0151\u021a\u021a\4\2")
        buf.write(u"\u0197\u0197\u01fb\u01fb\4\2\u013a\u013a\u021c\u021c")
        buf.write(u"\4\2qq\u0151\u0151\5\2EEPP\u015e\u015e\4\2\u01fb\u01fb")
        buf.write(u"\u0219\u0219\4\2\u011d\u011d\u01c0\u01c0\b\2\u00bd\u00bd")
        buf.write(u"\u0137\u0137\u0139\u0139\u0152\u0152\u01c6\u01c6\u01e8")
        buf.write(u"\u01e8\4\2)*\66\66\5\2\u0144\u0144\u01b1\u01b1\u02be")
        buf.write(u"\u02be\4\2\u016a\u016a\u0209\u0209\4\2\u03ca\u03ca\u03cc")
        buf.write(u"\u03cc\3\2\u03cd\u03ce\5\2\u0261\u026b\u03c2\u03c2\u03cb")
        buf.write(u"\u03cb\4\2\u03b8\u03ba\u03c3\u03c3\4\2\67\67\u0099\u0099")
        buf.write(u"\4\2ee\u03c6\u03c6\4\2\u00bb\u00bc\u00c3\u00c6\3\2\u00ab")
        buf.write(u"\u00b0\3\2\u00b1\u00b3\3\2\u00b4\u00b5\5\2\u00b6\u00b6")
        buf.write(u"\u00bf\u00c2\u0106\u0107\5\2\u00b7\u00ba\u00bd\u00be")
        buf.write(u"\u0104\u0104\4\2\u0085\u0085\u00c7\u00c7\3\2\u0270\u0276")
        buf.write(u"\4\2\u00bd\u00bd\u019b\u019b\4\2\u00b6\u00b7\u00b9\u00b9")
        buf.write(u"\4\2\u009e\u009e\u01e5\u01e5\4\2\u00e5\u00e6\u00ec\u00ec")
        buf.write(u"\4\2!!\u00e3\u00e6\3\2\u00ef\u00f0\5\2\20\20RR\u0097")
        buf.write(u"\u0097\4\2\u00bb\u00bb\u00bd\u00bd\5\2\r\r))\u032a\u032a")
        buf.write(u"\5\2\u00d3\u00d3\u00d9\u00da\u00df\u00df\5\2\u00d4\u00d6")
        buf.write(u"\u00db\u00de\u00e0\u00e2\4\2\u01a4\u01a4\u01b2\u01b2")
        buf.write(u"\4\2cc\u03ad\u03ad\5\2\67\67\u0099\u0099\u0211\u0211")
        buf.write(u"\4\2ww\u0081\u0081\5\2\b\b\u00fb\u00fb\u01eb\u01eb\6")
        buf.write(u"\2cc\u03a5\u03a5\u03a7\u03a7\u03ad\u03ae\3\2\u03a2\u03a9")
        buf.write(u"\3\2\u0239\u0260\3\2\u026c\u026f\3\2\u0230\u0238\3\2")
        buf.write(u"\u0228\u022f\5\2\u00b6\u00ba\u00c4\u00c4\u00c7\u00c7")
        buf.write(u"\4\2\u00f6\u0222\u0266\u0266\13\2##TT\u0080\u0080\u00b6")
        buf.write(u"\u00b8\u00ba\u00ba\u00d7\u00d7\u00ee\u00ee\u0228\u022f")
        buf.write(u"\u0270\u0398\2\u1b8e\2\u026b\3\2\2\2\4\u027b\3\2\2\2")
        buf.write(u"\6\u028f\3\2\2\2\b\u0291\3\2\2\2\n\u02b6\3\2\2\2\f\u02c2")
        buf.write(u"\3\2\2\2\16\u02cd\3\2\2\2\20\u02de\3\2\2\2\22\u02e3\3")
        buf.write(u"\2\2\2\24\u02ef\3\2\2\2\26\u030a\3\2\2\2\30\u0310\3\2")
        buf.write(u"\2\2\32\u0312\3\2\2\2\34\u031e\3\2\2\2\36\u033c\3\2\2")
        buf.write(u"\2 \u035d\3\2\2\2\"\u0390\3\2\2\2$\u03aa\3\2\2\2&\u03c6")
        buf.write(u"\3\2\2\2(\u0427\3\2\2\2*\u0429\3\2\2\2,\u043b\3\2\2\2")
        buf.write(u".\u0478\3\2\2\2\60\u048b\3\2\2\2\62\u04c3\3\2\2\2\64")
        buf.write(u"\u04c5\3\2\2\2\66\u04f1\3\2\2\28\u04f7\3\2\2\2:\u04f9")
        buf.write(u"\3\2\2\2<\u050e\3\2\2\2>\u0515\3\2\2\2@\u0517\3\2\2\2")
        buf.write(u"B\u0525\3\2\2\2D\u0527\3\2\2\2F\u052b\3\2\2\2H\u0545")
        buf.write(u"\3\2\2\2J\u0555\3\2\2\2L\u0557\3\2\2\2N\u0567\3\2\2\2")
        buf.write(u"P\u0569\3\2\2\2R\u0583\3\2\2\2T\u05c7\3\2\2\2V\u05c9")
        buf.write(u"\3\2\2\2X\u05e3\3\2\2\2Z\u05eb\3\2\2\2\\\u0609\3\2\2")
        buf.write(u"\2^\u0697\3\2\2\2`\u0699\3\2\2\2b\u069c\3\2\2\2d\u06e6")
        buf.write(u"\3\2\2\2f\u06fd\3\2\2\2h\u076c\3\2\2\2j\u0771\3\2\2\2")
        buf.write(u"l\u0773\3\2\2\2n\u077d\3\2\2\2p\u07b2\3\2\2\2r\u07c6")
        buf.write(u"\3\2\2\2t\u07c8\3\2\2\2v\u07eb\3\2\2\2x\u07f4\3\2\2\2")
        buf.write(u"z\u07fb\3\2\2\2|\u0812\3\2\2\2~\u081b\3\2\2\2\u0080\u082a")
        buf.write(u"\3\2\2\2\u0082\u083e\3\2\2\2\u0084\u0852\3\2\2\2\u0086")
        buf.write(u"\u09bc\3\2\2\2\u0088\u09be\3\2\2\2\u008a\u09c5\3\2\2")
        buf.write(u"\2\u008c\u09cc\3\2\2\2\u008e\u09e2\3\2\2\2\u0090\u09ea")
        buf.write(u"\3\2\2\2\u0092\u09f1\3\2\2\2\u0094\u09f8\3\2\2\2\u0096")
        buf.write(u"\u09ff\3\2\2\2\u0098\u0a0b\3\2\2\2\u009a\u0a15\3\2\2")
        buf.write(u"\2\u009c\u0a1c\3\2\2\2\u009e\u0a2c\3\2\2\2\u00a0\u0a36")
        buf.write(u"\3\2\2\2\u00a2\u0a3a\3\2\2\2\u00a4\u0a40\3\2\2\2\u00a6")
        buf.write(u"\u0a4c\3\2\2\2\u00a8\u0a4e\3\2\2\2\u00aa\u0a55\3\2\2")
        buf.write(u"\2\u00ac\u0a57\3\2\2\2\u00ae\u0a89\3\2\2\2\u00b0\u0ad3")
        buf.write(u"\3\2\2\2\u00b2\u0b0e\3\2\2\2\u00b4\u0b66\3\2\2\2\u00b6")
        buf.write(u"\u0b6a\3\2\2\2\u00b8\u0b7b\3\2\2\2\u00ba\u0b7d\3\2\2")
        buf.write(u"\2\u00bc\u0b85\3\2\2\2\u00be\u0b8d\3\2\2\2\u00c0\u0b8f")
        buf.write(u"\3\2\2\2\u00c2\u0bad\3\2\2\2\u00c4\u0be4\3\2\2\2\u00c6")
        buf.write(u"\u0bed\3\2\2\2\u00c8\u0c01\3\2\2\2\u00ca\u0c0d\3\2\2")
        buf.write(u"\2\u00cc\u0c11\3\2\2\2\u00ce\u0c32\3\2\2\2\u00d0\u0c47")
        buf.write(u"\3\2\2\2\u00d2\u0c51\3\2\2\2\u00d4\u0c55\3\2\2\2\u00d6")
        buf.write(u"\u0c6e\3\2\2\2\u00d8\u0c98\3\2\2\2\u00da\u0c9a\3\2\2")
        buf.write(u"\2\u00dc\u0ca9\3\2\2\2\u00de\u0cd7\3\2\2\2\u00e0\u0ce1")
        buf.write(u"\3\2\2\2\u00e2\u0ceb\3\2\2\2\u00e4\u0d15\3\2\2\2\u00e6")
        buf.write(u"\u0d17\3\2\2\2\u00e8\u0d28\3\2\2\2\u00ea\u0d2e\3\2\2")
        buf.write(u"\2\u00ec\u0d3e\3\2\2\2\u00ee\u0d42\3\2\2\2\u00f0\u0d68")
        buf.write(u"\3\2\2\2\u00f2\u0d8e\3\2\2\2\u00f4\u0d9c\3\2\2\2\u00f6")
        buf.write(u"\u0da4\3\2\2\2\u00f8\u0da6\3\2\2\2\u00fa\u0dc0\3\2\2")
        buf.write(u"\2\u00fc\u0dc4\3\2\2\2\u00fe\u0dd1\3\2\2\2\u0100\u0ddd")
        buf.write(u"\3\2\2\2\u0102\u0de1\3\2\2\2\u0104\u0df2\3\2\2\2\u0106")
        buf.write(u"\u0e03\3\2\2\2\u0108\u0e06\3\2\2\2\u010a\u0e10\3\2\2")
        buf.write(u"\2\u010c\u0e14\3\2\2\2\u010e\u0e1e\3\2\2\2\u0110\u0e21")
        buf.write(u"\3\2\2\2\u0112\u0e26\3\2\2\2\u0114\u0e3a\3\2\2\2\u0116")
        buf.write(u"\u0e3c\3\2\2\2\u0118\u0e4d\3\2\2\2\u011a\u0e56\3\2\2")
        buf.write(u"\2\u011c\u0e5f\3\2\2\2\u011e\u0e61\3\2\2\2\u0120\u0e6f")
        buf.write(u"\3\2\2\2\u0122\u0e7a\3\2\2\2\u0124\u0e83\3\2\2\2\u0126")
        buf.write(u"\u0e86\3\2\2\2\u0128\u0e8e\3\2\2\2\u012a\u0ea7\3\2\2")
        buf.write(u"\2\u012c\u0eb3\3\2\2\2\u012e\u0eb6\3\2\2\2\u0130\u0ed6")
        buf.write(u"\3\2\2\2\u0132\u0ed8\3\2\2\2\u0134\u0eda\3\2\2\2\u0136")
        buf.write(u"\u0edc\3\2\2\2\u0138\u0ede\3\2\2\2\u013a\u0f13\3\2\2")
        buf.write(u"\2\u013c\u0f15\3\2\2\2\u013e\u0f1b\3\2\2\2\u0140\u0f2f")
        buf.write(u"\3\2\2\2\u0142\u0f3d\3\2\2\2\u0144\u0f48\3\2\2\2\u0146")
        buf.write(u"\u0f4a\3\2\2\2\u0148\u0f50\3\2\2\2\u014a\u0f5a\3\2\2")
        buf.write(u"\2\u014c\u0f5e\3\2\2\2\u014e\u0f65\3\2\2\2\u0150\u0f69")
        buf.write(u"\3\2\2\2\u0152\u0f6f\3\2\2\2\u0154\u0f76\3\2\2\2\u0156")
        buf.write(u"\u0f7c\3\2\2\2\u0158\u0f82\3\2\2\2\u015a\u0f87\3\2\2")
        buf.write(u"\2\u015c\u0fb5\3\2\2\2\u015e\u0fca\3\2\2\2\u0160\u0fe3")
        buf.write(u"\3\2\2\2\u0162\u0fe6\3\2\2\2\u0164\u0fec\3\2\2\2\u0166")
        buf.write(u"\u0ffc\3\2\2\2\u0168\u100b\3\2\2\2\u016a\u1011\3\2\2")
        buf.write(u"\2\u016c\u102f\3\2\2\2\u016e\u1031\3\2\2\2\u0170\u1038")
        buf.write(u"\3\2\2\2\u0172\u1044\3\2\2\2\u0174\u104a\3\2\2\2\u0176")
        buf.write(u"\u1063\3\2\2\2\u0178\u1067\3\2\2\2\u017a\u106b\3\2\2")
        buf.write(u"\2\u017c\u1076\3\2\2\2\u017e\u10b4\3\2\2\2\u0180\u10ec")
        buf.write(u"\3\2\2\2\u0182\u10ee\3\2\2\2\u0184\u10fb\3\2\2\2\u0186")
        buf.write(u"\u112d\3\2\2\2\u0188\u113f\3\2\2\2\u018a\u1171\3\2\2")
        buf.write(u"\2\u018c\u1173\3\2\2\2\u018e\u1180\3\2\2\2\u0190\u118b")
        buf.write(u"\3\2\2\2\u0192\u11a6\3\2\2\2\u0194\u11b0\3\2\2\2\u0196")
        buf.write(u"\u11ba\3\2\2\2\u0198\u11bc\3\2\2\2\u019a\u11c6\3\2\2")
        buf.write(u"\2\u019c\u11c9\3\2\2\2\u019e\u11fa\3\2\2\2\u01a0\u1209")
        buf.write(u"\3\2\2\2\u01a2\u120b\3\2\2\2\u01a4\u120f\3\2\2\2\u01a6")
        buf.write(u"\u1216\3\2\2\2\u01a8\u121f\3\2\2\2\u01aa\u1225\3\2\2")
        buf.write(u"\2\u01ac\u122c\3\2\2\2\u01ae\u1242\3\2\2\2\u01b0\u1244")
        buf.write(u"\3\2\2\2\u01b2\u124f\3\2\2\2\u01b4\u1255\3\2\2\2\u01b6")
        buf.write(u"\u127e\3\2\2\2\u01b8\u1317\3\2\2\2\u01ba\u1323\3\2\2")
        buf.write(u"\2\u01bc\u1332\3\2\2\2\u01be\u1338\3\2\2\2\u01c0\u134b")
        buf.write(u"\3\2\2\2\u01c2\u1355\3\2\2\2\u01c4\u1363\3\2\2\2\u01c6")
        buf.write(u"\u1365\3\2\2\2\u01c8\u1368\3\2\2\2\u01ca\u137e\3\2\2")
        buf.write(u"\2\u01cc\u138a\3\2\2\2\u01ce\u1393\3\2\2\2\u01d0\u139f")
        buf.write(u"\3\2\2\2\u01d2\u13a3\3\2\2\2\u01d4\u13a5\3\2\2\2\u01d6")
        buf.write(u"\u13cd\3\2\2\2\u01d8\u13d4\3\2\2\2\u01da\u13d6\3\2\2")
        buf.write(u"\2\u01dc\u13ed\3\2\2\2\u01de\u13f3\3\2\2\2\u01e0\u13fb")
        buf.write(u"\3\2\2\2\u01e2\u13fe\3\2\2\2\u01e4\u140b\3\2\2\2\u01e6")
        buf.write(u"\u140d\3\2\2\2\u01e8\u1413\3\2\2\2\u01ea\u1415\3\2\2")
        buf.write(u"\2\u01ec\u141c\3\2\2\2\u01ee\u1426\3\2\2\2\u01f0\u1428")
        buf.write(u"\3\2\2\2\u01f2\u142e\3\2\2\2\u01f4\u1432\3\2\2\2\u01f6")
        buf.write(u"\u1434\3\2\2\2\u01f8\u1436\3\2\2\2\u01fa\u1448\3\2\2")
        buf.write(u"\2\u01fc\u1458\3\2\2\2\u01fe\u145c\3\2\2\2\u0200\u1461")
        buf.write(u"\3\2\2\2\u0202\u146c\3\2\2\2\u0204\u1471\3\2\2\2\u0206")
        buf.write(u"\u1473\3\2\2\2\u0208\u1477\3\2\2\2\u020a\u1490\3\2\2")
        buf.write(u"\2\u020c\u1492\3\2\2\2\u020e\u1495\3\2\2\2\u0210\u149a")
        buf.write(u"\3\2\2\2\u0212\u14aa\3\2\2\2\u0214\u14f7\3\2\2\2\u0216")
        buf.write(u"\u150f\3\2\2\2\u0218\u1511\3\2\2\2\u021a\u1515\3\2\2")
        buf.write(u"\2\u021c\u151b\3\2\2\2\u021e\u1523\3\2\2\2\u0220\u152b")
        buf.write(u"\3\2\2\2\u0222\u1533\3\2\2\2\u0224\u153e\3\2\2\2\u0226")
        buf.write(u"\u1546\3\2\2\2\u0228\u154e\3\2\2\2\u022a\u1556\3\2\2")
        buf.write(u"\2\u022c\u155e\3\2\2\2\u022e\u156e\3\2\2\2\u0230\u157e")
        buf.write(u"\3\2\2\2\u0232\u1582\3\2\2\2\u0234\u1584\3\2\2\2\u0236")
        buf.write(u"\u1587\3\2\2\2\u0238\u159c\3\2\2\2\u023a\u163b\3\2\2")
        buf.write(u"\2\u023c\u163d\3\2\2\2\u023e\u1650\3\2\2\2\u0240\u1652")
        buf.write(u"\3\2\2\2\u0242\u168e\3\2\2\2\u0244\u16a7\3\2\2\2\u0246")
        buf.write(u"\u16a9\3\2\2\2\u0248\u16b2\3\2\2\2\u024a\u16c4\3\2\2")
        buf.write(u"\2\u024c\u16d1\3\2\2\2\u024e\u16dc\3\2\2\2\u0250\u174c")
        buf.write(u"\3\2\2\2\u0252\u175e\3\2\2\2\u0254\u176e\3\2\2\2\u0256")
        buf.write(u"\u1777\3\2\2\2\u0258\u1780\3\2\2\2\u025a\u1782\3\2\2")
        buf.write(u"\2\u025c\u1784\3\2\2\2\u025e\u1786\3\2\2\2\u0260\u1788")
        buf.write(u"\3\2\2\2\u0262\u178a\3\2\2\2\u0264\u178c\3\2\2\2\u0266")
        buf.write(u"\u178e\3\2\2\2\u0268\u1790\3\2\2\2\u026a\u026c\5\4\3")
        buf.write(u"\2\u026b\u026a\3\2\2\2\u026b\u026c\3\2\2\2\u026c\u026e")
        buf.write(u"\3\2\2\2\u026d\u026f\7\u03a6\2\2\u026e\u026d\3\2\2\2")
        buf.write(u"\u026e\u026f\3\2\2\2\u026f\u0270\3\2\2\2\u0270\u0271")
        buf.write(u"\7\2\2\3\u0271\3\3\2\2\2\u0272\u0274\5\6\4\2\u0273\u0275")
        buf.write(u"\7\u03a6\2\2\u0274\u0273\3\2\2\2\u0274\u0275\3\2\2\2")
        buf.write(u"\u0275\u0276\3\2\2\2\u0276\u0277\7\u03b6\2\2\u0277\u027a")
        buf.write(u"\3\2\2\2\u0278\u027a\5\b\5\2\u0279\u0272\3\2\2\2\u0279")
        buf.write(u"\u0278\3\2\2\2\u027a\u027d\3\2\2\2\u027b\u0279\3\2\2")
        buf.write(u"\2\u027b\u027c\3\2\2\2\u027c\u0286\3\2\2\2\u027d\u027b")
        buf.write(u"\3\2\2\2\u027e\u0283\5\6\4\2\u027f\u0281\7\u03a6\2\2")
        buf.write(u"\u0280\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u0282")
        buf.write(u"\3\2\2\2\u0282\u0284\7\u03b6\2\2\u0283\u0280\3\2\2\2")
        buf.write(u"\u0283\u0284\3\2\2\2\u0284\u0287\3\2\2\2\u0285\u0287")
        buf.write(u"\5\b\5\2\u0286\u027e\3\2\2\2\u0286\u0285\3\2\2\2\u0287")
        buf.write(u"\5\3\2\2\2\u0288\u0290\5\n\6\2\u0289\u0290\5\f\7\2\u028a")
        buf.write(u"\u0290\5\16\b\2\u028b\u0290\5\20\t\2\u028c\u0290\5\22")
        buf.write(u"\n\2\u028d\u0290\5\26\f\2\u028e\u0290\5\30\r\2\u028f")
        buf.write(u"\u0288\3\2\2\2\u028f\u0289\3\2\2\2\u028f\u028a\3\2\2")
        buf.write(u"\2\u028f\u028b\3\2\2\2\u028f\u028c\3\2\2\2\u028f\u028d")
        buf.write(u"\3\2\2\2\u028f\u028e\3\2\2\2\u0290\7\3\2\2\2\u0291\u0292")
        buf.write(u"\7\u03b6\2\2\u0292\t\3\2\2\2\u0293\u02b7\5\32\16\2\u0294")
        buf.write(u"\u02b7\5\34\17\2\u0295\u02b7\5\36\20\2\u0296\u02b7\5")
        buf.write(u" \21\2\u0297\u02b7\5\"\22\2\u0298\u02b7\5$\23\2\u0299")
        buf.write(u"\u02b7\5&\24\2\u029a\u02b7\5(\25\2\u029b\u02b7\5*\26")
        buf.write(u"\2\u029c\u02b7\5,\27\2\u029d\u02b7\5.\30\2\u029e\u02b7")
        buf.write(u"\5\60\31\2\u029f\u02b7\5r:\2\u02a0\u02b7\5t;\2\u02a1")
        buf.write(u"\u02b7\5v<\2\u02a2\u02b7\5x=\2\u02a3\u02b7\5z>\2\u02a4")
        buf.write(u"\u02b7\5|?\2\u02a5\u02b7\5~@\2\u02a6\u02b7\5\u0080A\2")
        buf.write(u"\u02a7\u02b7\5\u0082B\2\u02a8\u02b7\5\u0084C\2\u02a9")
        buf.write(u"\u02b7\5\u0088E\2\u02aa\u02b7\5\u008aF\2\u02ab\u02b7")
        buf.write(u"\5\u008cG\2\u02ac\u02b7\5\u008eH\2\u02ad\u02b7\5\u0090")
        buf.write(u"I\2\u02ae\u02b7\5\u0092J\2\u02af\u02b7\5\u0094K\2\u02b0")
        buf.write(u"\u02b7\5\u0096L\2\u02b1\u02b7\5\u0098M\2\u02b2\u02b7")
        buf.write(u"\5\u009aN\2\u02b3\u02b7\5\u009cO\2\u02b4\u02b7\5\u009e")
        buf.write(u"P\2\u02b5\u02b7\5\u00a2R\2\u02b6\u0293\3\2\2\2\u02b6")
        buf.write(u"\u0294\3\2\2\2\u02b6\u0295\3\2\2\2\u02b6\u0296\3\2\2")
        buf.write(u"\2\u02b6\u0297\3\2\2\2\u02b6\u0298\3\2\2\2\u02b6\u0299")
        buf.write(u"\3\2\2\2\u02b6\u029a\3\2\2\2\u02b6\u029b\3\2\2\2\u02b6")
        buf.write(u"\u029c\3\2\2\2\u02b6\u029d\3\2\2\2\u02b6\u029e\3\2\2")
        buf.write(u"\2\u02b6\u029f\3\2\2\2\u02b6\u02a0\3\2\2\2\u02b6\u02a1")
        buf.write(u"\3\2\2\2\u02b6\u02a2\3\2\2\2\u02b6\u02a3\3\2\2\2\u02b6")
        buf.write(u"\u02a4\3\2\2\2\u02b6\u02a5\3\2\2\2\u02b6\u02a6\3\2\2")
        buf.write(u"\2\u02b6\u02a7\3\2\2\2\u02b6\u02a8\3\2\2\2\u02b6\u02a9")
        buf.write(u"\3\2\2\2\u02b6\u02aa\3\2\2\2\u02b6\u02ab\3\2\2\2\u02b6")
        buf.write(u"\u02ac\3\2\2\2\u02b6\u02ad\3\2\2\2\u02b6\u02ae\3\2\2")
        buf.write(u"\2\u02b6\u02af\3\2\2\2\u02b6\u02b0\3\2\2\2\u02b6\u02b1")
        buf.write(u"\3\2\2\2\u02b6\u02b2\3\2\2\2\u02b6\u02b3\3\2\2\2\u02b6")
        buf.write(u"\u02b4\3\2\2\2\u02b6\u02b5\3\2\2\2\u02b7\13\3\2\2\2\u02b8")
        buf.write(u"\u02c3\5\u00b4[\2\u02b9\u02c3\5\u00acW\2\u02ba\u02c3")
        buf.write(u"\5\u00b6\\\2\u02bb\u02c3\5\u00a6T\2\u02bc\u02c3\5\u00b2")
        buf.write(u"Z\2\u02bd\u02c3\5\u00a4S\2\u02be\u02c3\5\u00aeX\2\u02bf")
        buf.write(u"\u02c3\5\u00b0Y\2\u02c0\u02c3\5\u00a8U\2\u02c1\u02c3")
        buf.write(u"\5\u00aaV\2\u02c2\u02b8\3\2\2\2\u02c2\u02b9\3\2\2\2\u02c2")
        buf.write(u"\u02ba\3\2\2\2\u02c2\u02bb\3\2\2\2\u02c2\u02bc\3\2\2")
        buf.write(u"\2\u02c2\u02bd\3\2\2\2\u02c2\u02be\3\2\2\2\u02c2\u02bf")
        buf.write(u"\3\2\2\2\u02c2\u02c0\3\2\2\2\u02c2\u02c1\3\2\2\2\u02c3")
        buf.write(u"\r\3\2\2\2\u02c4\u02ce\5\u00fe\u0080\2\u02c5\u02ce\5")
        buf.write(u"\u0100\u0081\2\u02c6\u02ce\5\u0102\u0082\2\u02c7\u02ce")
        buf.write(u"\5\u0104\u0083\2\u02c8\u02ce\5\u0106\u0084\2\u02c9\u02ce")
        buf.write(u"\5\u0108\u0085\2\u02ca\u02ce\5\u010a\u0086\2\u02cb\u02ce")
        buf.write(u"\5\u010c\u0087\2\u02cc\u02ce\5\u010e\u0088\2\u02cd\u02c4")
        buf.write(u"\3\2\2\2\u02cd\u02c5\3\2\2\2\u02cd\u02c6\3\2\2\2\u02cd")
        buf.write(u"\u02c7\3\2\2\2\u02cd\u02c8\3\2\2\2\u02cd\u02c9\3\2\2")
        buf.write(u"\2\u02cd\u02ca\3\2\2\2\u02cd\u02cb\3\2\2\2\u02cd\u02cc")
        buf.write(u"\3\2\2\2\u02ce\17\3\2\2\2\u02cf\u02df\5\u011e\u0090\2")
        buf.write(u"\u02d0\u02df\5\u0120\u0091\2\u02d1\u02df\5\u0122\u0092")
        buf.write(u"\2\u02d2\u02df\5\u0124\u0093\2\u02d3\u02df\5\u0126\u0094")
        buf.write(u"\2\u02d4\u02df\5\u0128\u0095\2\u02d5\u02df\5\u012a\u0096")
        buf.write(u"\2\u02d6\u02df\5\u012c\u0097\2\u02d7\u02df\5\u012e\u0098")
        buf.write(u"\2\u02d8\u02df\5\u0146\u00a4\2\u02d9\u02df\5\u0148\u00a5")
        buf.write(u"\2\u02da\u02df\5\u014a\u00a6\2\u02db\u02df\5\u014c\u00a7")
        buf.write(u"\2\u02dc\u02df\5\u014e\u00a8\2\u02dd\u02df\5\u0150\u00a9")
        buf.write(u"\2\u02de\u02cf\3\2\2\2\u02de\u02d0\3\2\2\2\u02de\u02d1")
        buf.write(u"\3\2\2\2\u02de\u02d2\3\2\2\2\u02de\u02d3\3\2\2\2\u02de")
        buf.write(u"\u02d4\3\2\2\2\u02de\u02d5\3\2\2\2\u02de\u02d6\3\2\2")
        buf.write(u"\2\u02de\u02d7\3\2\2\2\u02de\u02d8\3\2\2\2\u02de\u02d9")
        buf.write(u"\3\2\2\2\u02de\u02da\3\2\2\2\u02de\u02db\3\2\2\2\u02de")
        buf.write(u"\u02dc\3\2\2\2\u02de\u02dd\3\2\2\2\u02df\21\3\2\2\2\u02e0")
        buf.write(u"\u02e4\5\u0152\u00aa\2\u02e1\u02e4\5\u0154\u00ab\2\u02e2")
        buf.write(u"\u02e4\5\u0156\u00ac\2\u02e3\u02e0\3\2\2\2\u02e3\u02e1")
        buf.write(u"\3\2\2\2\u02e3\u02e2\3\2\2\2\u02e4\23\3\2\2\2\u02e5\u02f0")
        buf.write(u"\5\u015a\u00ae\2\u02e6\u02f0\5\u015c\u00af\2\u02e7\u02f0")
        buf.write(u"\5\u015e\u00b0\2\u02e8\u02f0\5\u0162\u00b2\2\u02e9\u02f0")
        buf.write(u"\5\u0164\u00b3\2\u02ea\u02f0\5\u0166\u00b4\2\u02eb\u02f0")
        buf.write(u"\5\u016a\u00b6\2\u02ec\u02f0\5\u0160\u00b1\2\u02ed\u02f0")
        buf.write(u"\5\u0168\u00b5\2\u02ee\u02f0\5\u016c\u00b7\2\u02ef\u02e5")
        buf.write(u"\3\2\2\2\u02ef\u02e6\3\2\2\2\u02ef\u02e7\3\2\2\2\u02ef")
        buf.write(u"\u02e8\3\2\2\2\u02ef\u02e9\3\2\2\2\u02ef\u02ea\3\2\2")
        buf.write(u"\2\u02ef\u02eb\3\2\2\2\u02ef\u02ec\3\2\2\2\u02ef\u02ed")
        buf.write(u"\3\2\2\2\u02ef\u02ee\3\2\2\2\u02f0\25\3\2\2\2\u02f1\u030b")
        buf.write(u"\5\u017e\u00c0\2\u02f2\u030b\5\u0180\u00c1\2\u02f3\u030b")
        buf.write(u"\5\u0182\u00c2\2\u02f4\u030b\5\u0184\u00c3\2\u02f5\u030b")
        buf.write(u"\5\u0186\u00c4\2\u02f6\u030b\5\u0188\u00c5\2\u02f7\u030b")
        buf.write(u"\5\u018a\u00c6\2\u02f8\u030b\5\u018c\u00c7\2\u02f9\u030b")
        buf.write(u"\5\u01a4\u00d3\2\u02fa\u030b\5\u01a6\u00d4\2\u02fb\u030b")
        buf.write(u"\5\u01a8\u00d5\2\u02fc\u030b\5\u01aa\u00d6\2\u02fd\u030b")
        buf.write(u"\5\u01ac\u00d7\2\u02fe\u030b\5\u01b0\u00d9\2\u02ff\u030b")
        buf.write(u"\5\u01b2\u00da\2\u0300\u030b\5\u01b4\u00db\2\u0301\u030b")
        buf.write(u"\5\u01b6\u00dc\2\u0302\u030b\5\u01b8\u00dd\2\u0303\u030b")
        buf.write(u"\5\u01c6\u00e4\2\u0304\u030b\5\u01c8\u00e5\2\u0305\u030b")
        buf.write(u"\5\u01ca\u00e6\2\u0306\u030b\5\u01cc\u00e7\2\u0307\u030b")
        buf.write(u"\5\u01ce\u00e8\2\u0308\u030b\5\u01d0\u00e9\2\u0309\u030b")
        buf.write(u"\5\u01d2\u00ea\2\u030a\u02f1\3\2\2\2\u030a\u02f2\3\2")
        buf.write(u"\2\2\u030a\u02f3\3\2\2\2\u030a\u02f4\3\2\2\2\u030a\u02f5")
        buf.write(u"\3\2\2\2\u030a\u02f6\3\2\2\2\u030a\u02f7\3\2\2\2\u030a")
        buf.write(u"\u02f8\3\2\2\2\u030a\u02f9\3\2\2\2\u030a\u02fa\3\2\2")
        buf.write(u"\2\u030a\u02fb\3\2\2\2\u030a\u02fc\3\2\2\2\u030a\u02fd")
        buf.write(u"\3\2\2\2\u030a\u02fe\3\2\2\2\u030a\u02ff\3\2\2\2\u030a")
        buf.write(u"\u0300\3\2\2\2\u030a\u0301\3\2\2\2\u030a\u0302\3\2\2")
        buf.write(u"\2\u030a\u0303\3\2\2\2\u030a\u0304\3\2\2\2\u030a\u0305")
        buf.write(u"\3\2\2\2\u030a\u0306\3\2\2\2\u030a\u0307\3\2\2\2\u030a")
        buf.write(u"\u0308\3\2\2\2\u030a\u0309\3\2\2\2\u030b\27\3\2\2\2\u030c")
        buf.write(u"\u0311\5\u01dc\u00ef\2\u030d\u0311\5\u01de\u00f0\2\u030e")
        buf.write(u"\u0311\5\u01e0\u00f1\2\u030f\u0311\5\u01e2\u00f2\2\u0310")
        buf.write(u"\u030c\3\2\2\2\u0310\u030d\3\2\2\2\u0310\u030e\3\2\2")
        buf.write(u"\2\u0310\u030f\3\2\2\2\u0311\31\3\2\2\2\u0312\u0313\7")
        buf.write(u"\37\2\2\u0313\u0315\t\2\2\2\u0314\u0316\5\u0236\u011c")
        buf.write(u"\2\u0315\u0314\3\2\2\2\u0315\u0316\3\2\2\2\u0316\u0317")
        buf.write(u"\3\2\2\2\u0317\u031b\5\u0200\u0101\2\u0318\u031a\5\62")
        buf.write(u"\32\2\u0319\u0318\3\2\2\2\u031a\u031d\3\2\2\2\u031b\u0319")
        buf.write(u"\3\2\2\2\u031b\u031c\3\2\2\2\u031c\33\3\2\2\2\u031d\u031b")
        buf.write(u"\3\2\2\2\u031e\u0320\7\37\2\2\u031f\u0321\5\64\33\2\u0320")
        buf.write(u"\u031f\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322\3\2\2")
        buf.write(u"\2\u0322\u0324\7\u013d\2\2\u0323\u0325\5\u0236\u011c")
        buf.write(u"\2\u0324\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326")
        buf.write(u"\3\2\2\2\u0326\u0327\5\u01e6\u00f4\2\u0327\u0328\7f\2")
        buf.write(u"\2\u0328\u0329\7\u01df\2\2\u0329\u0330\5\66\34\2\u032a")
        buf.write(u"\u032b\7f\2\2\u032b\u032d\7\u0119\2\2\u032c\u032e\7c")
        buf.write(u"\2\2\u032d\u032c\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u032f")
        buf.write(u"\3\2\2\2\u032f\u0331\7\u01ba\2\2\u0330\u032a\3\2\2\2")
        buf.write(u"\u0330\u0331\3\2\2\2\u0331\u0333\3\2\2\2\u0332\u0334")
        buf.write(u"\5> \2\u0333\u0332\3\2\2\2\u0333\u0334\3\2\2\2\u0334")
        buf.write(u"\u0337\3\2\2\2\u0335\u0336\7\u0116\2\2\u0336\u0338\7")
        buf.write(u"\u03c2\2\2\u0337\u0335\3\2\2\2\u0337\u0338\3\2\2\2\u0338")
        buf.write(u"\u0339\3\2\2\2\u0339\u033a\7\u012f\2\2\u033a\u033b\5")
        buf.write(u"\u0158\u00ad\2\u033b\35\3\2\2\2\u033c\u033e\7\37\2\2")
        buf.write(u"\u033d\u033f\t\3\2\2\u033e\u033d\3\2\2\2\u033e\u033f")
        buf.write(u"\3\2\2\2\u033f\u0341\3\2\2\2\u0340\u0342\t\4\2\2\u0341")
        buf.write(u"\u0340\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0343\3\2\2")
        buf.write(u"\2\u0343\u0344\7E\2\2\u0344\u0346\5\u0200\u0101\2\u0345")
        buf.write(u"\u0347\5@!\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2\2\2")
        buf.write(u"\u0347\u0348\3\2\2\2\u0348\u0349\7f\2\2\u0349\u034a\5")
        buf.write(u"\u01e8\u00f5\2\u034a\u034e\5\u0222\u0112\2\u034b\u034d")
        buf.write(u"\5B\"\2\u034c\u034b\3\2\2\2\u034d\u0350\3\2\2\2\u034e")
        buf.write(u"\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u035b\3\2\2")
        buf.write(u"\2\u0350\u034e\3\2\2\2\u0351\u0353\7\u00fa\2\2\u0352")
        buf.write(u"\u0354\7\u03aa\2\2\u0353\u0352\3\2\2\2\u0353\u0354\3")
        buf.write(u"\2\2\2\u0354\u0355\3\2\2\2\u0355\u035c\t\5\2\2\u0356")
        buf.write(u"\u0358\7Z\2\2\u0357\u0359\7\u03aa\2\2\u0358\u0357\3\2")
        buf.write(u"\2\2\u0358\u0359\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c")
        buf.write(u"\t\6\2\2\u035b\u0351\3\2\2\2\u035b\u0356\3\2\2\2\u035b")
        buf.write(u"\u035c\3\2\2\2\u035c\37\3\2\2\2\u035d\u035e\7\37\2\2")
        buf.write(u"\u035e\u035f\7\u0173\2\2\u035f\u0360\7?\2\2\u0360\u0361")
        buf.write(u"\5\u0200\u0101\2\u0361\u0362\7\7\2\2\u0362\u0363\7\u020e")
        buf.write(u"\2\2\u0363\u0369\7\u03c2\2\2\u0364\u0366\7\u015f\2\2")
        buf.write(u"\u0365\u0367\7\u03aa\2\2\u0366\u0365\3\2\2\2\u0366\u0367")
        buf.write(u"\3\2\2\2\u0367\u0368\3\2\2\2\u0368\u036a\5\u0208\u0105")
        buf.write(u"\2\u0369\u0364\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0370")
        buf.write(u"\3\2\2\2\u036b\u036d\7\u020f\2\2\u036c\u036e\7\u03aa")
        buf.write(u"\2\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f")
        buf.write(u"\3\2\2\2\u036f\u0371\5\u0208\u0105\2\u0370\u036b\3\2")
        buf.write(u"\2\2\u0370\u0371\3\2\2\2\u0371\u0377\3\2\2\2\u0372\u0374")
        buf.write(u"\7\u01c4\2\2\u0373\u0375\7\u03aa\2\2\u0374\u0373\3\2")
        buf.write(u"\2\2\u0374\u0375\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u0378")
        buf.write(u"\5\u0208\u0105\2\u0377\u0372\3\2\2\2\u0377\u0378\3\2")
        buf.write(u"\2\2\u0378\u037e\3\2\2\2\u0379\u037b\7\u019f\2\2\u037a")
        buf.write(u"\u037c\7\u03aa\2\2\u037b\u037a\3\2\2\2\u037b\u037c\3")
        buf.write(u"\2\2\2\u037c\u037d\3\2\2\2\u037d\u037f\5\u0200\u0101")
        buf.write(u"\2\u037e\u0379\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381")
        buf.write(u"\3\2\2\2\u0380\u0382\7\u021b\2\2\u0381\u0380\3\2\2\2")
        buf.write(u"\u0381\u0382\3\2\2\2\u0382\u0388\3\2\2\2\u0383\u0385")
        buf.write(u"\7\u0116\2\2\u0384\u0386\7\u03aa\2\2\u0385\u0384\3\2")
        buf.write(u"\2\2\u0385\u0386\3\2\2\2\u0386\u0387\3\2\2\2\u0387\u0389")
        buf.write(u"\7\u03c2\2\2\u0388\u0383\3\2\2\2\u0388\u0389\3\2\2\2")
        buf.write(u"\u0389\u038a\3\2\2\2\u038a\u038c\7\u0137\2\2\u038b\u038d")
        buf.write(u"\7\u03aa\2\2\u038c\u038b\3\2\2\2\u038c\u038d\3\2\2\2")
        buf.write(u"\u038d\u038e\3\2\2\2\u038e\u038f\5\u01f6\u00fc\2\u038f")
        buf.write(u"!\3\2\2\2\u0390\u0392\7\37\2\2\u0391\u0393\5\64\33\2")
        buf.write(u"\u0392\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393\u0394")
        buf.write(u"\3\2\2\2\u0394\u0395\7q\2\2\u0395\u0396\5\u01e6\u00f4")
        buf.write(u"\2\u0396\u0398\7\u03b3\2\2\u0397\u0399\5D#\2\u0398\u0397")
        buf.write(u"\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039e\3\2\2\2\u039a")
        buf.write(u"\u039b\7\u03b5\2\2\u039b\u039d\5D#\2\u039c\u039a\3\2")
        buf.write(u"\2\2\u039d\u03a0\3\2\2\2\u039e\u039c\3\2\2\2\u039e\u039f")
        buf.write(u"\3\2\2\2\u039f\u03a1\3\2\2\2\u03a0\u039e\3\2\2\2\u03a1")
        buf.write(u"\u03a5\7\u03b4\2\2\u03a2\u03a4\5H%\2\u03a3\u03a2\3\2")
        buf.write(u"\2\2\u03a4\u03a7\3\2\2\2\u03a5\u03a3\3\2\2\2\u03a5\u03a6")
        buf.write(u"\3\2\2\2\u03a6\u03a8\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a8")
        buf.write(u"\u03a9\5\u0158\u00ad\2\u03a9#\3\2\2\2\u03aa\u03ac\7\37")
        buf.write(u"\2\2\u03ab\u03ad\5\64\33\2\u03ac\u03ab\3\2\2\2\u03ac")
        buf.write(u"\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03af\7\u0151")
        buf.write(u"\2\2\u03af\u03b0\5\u01e6\u00f4\2\u03b0\u03b2\7\u03b3")
        buf.write(u"\2\2\u03b1\u03b3\5F$\2\u03b2\u03b1\3\2\2\2\u03b2\u03b3")
        buf.write(u"\3\2\2\2\u03b3\u03b8\3\2\2\2\u03b4\u03b5\7\u03b5\2\2")
        buf.write(u"\u03b5\u03b7\5F$\2\u03b6\u03b4\3\2\2\2\u03b7\u03ba\3")
        buf.write(u"\2\2\2\u03b8\u03b6\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write(u"\u03bb\3\2\2\2\u03ba\u03b8\3\2\2\2\u03bb\u03bc\7\u03b4")
        buf.write(u"\2\2\u03bc\u03bd\7\u01d7\2\2\u03bd\u03c1\5\u0214\u010b")
        buf.write(u"\2\u03be\u03c0\5H%\2\u03bf\u03be\3\2\2\2\u03c0\u03c3")
        buf.write(u"\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2")
        buf.write(u"\u03c4\3\2\2\2\u03c3\u03c1\3\2\2\2\u03c4\u03c5\5\u0158")
        buf.write(u"\u00ad\2\u03c5%\3\2\2\2\u03c6\u03c7\7\37\2\2\u03c7\u03c8")
        buf.write(u"\7\u01e1\2\2\u03c8\u03c9\5\u0200\u0101\2\u03c9\u03ca")
        buf.write(u"\7;\2\2\u03ca\u03cb\7\u0124\2\2\u03cb\u03cc\7\u021f\2")
        buf.write(u"\2\u03cc\u03cd\t\7\2\2\u03cd\u03ce\7\u01aa\2\2\u03ce")
        buf.write(u"\u03cf\7\u03b3\2\2\u03cf\u03d4\5J&\2\u03d0\u03d1\7\u03b5")
        buf.write(u"\2\2\u03d1\u03d3\5J&\2\u03d2\u03d0\3\2\2\2\u03d3\u03d6")
        buf.write(u"\3\2\2\2\u03d4\u03d2\3\2\2\2\u03d4\u03d5\3\2\2\2\u03d5")
        buf.write(u"\u03d7\3\2\2\2\u03d6\u03d4\3\2\2\2\u03d7\u03d8\7\u03b4")
        buf.write(u"\2\2\u03d8\'\3\2\2\2\u03d9\u03db\7\37\2\2\u03da\u03dc")
        buf.write(u"\7\u0206\2\2\u03db\u03da\3\2\2\2\u03db\u03dc\3\2\2\2")
        buf.write(u"\u03dc\u03dd\3\2\2\2\u03dd\u03df\7\u0093\2\2\u03de\u03e0")
        buf.write(u"\5\u0236\u011c\2\u03df\u03de\3\2\2\2\u03df\u03e0\3\2")
        buf.write(u"\2\2\u03e0\u03e1\3\2\2\2\u03e1\u03e9\5\u01e8\u00f5\2")
        buf.write(u"\u03e2\u03e3\7U\2\2\u03e3\u03ea\5\u01e8\u00f5\2\u03e4")
        buf.write(u"\u03e5\7\u03b3\2\2\u03e5\u03e6\7U\2\2\u03e6\u03e7\5\u01e8")
        buf.write(u"\u00f5\2\u03e7\u03e8\7\u03b4\2\2\u03e8\u03ea\3\2\2\2")
        buf.write(u"\u03e9\u03e2\3\2\2\2\u03e9\u03e4\3\2\2\2\u03ea\u0428")
        buf.write(u"\3\2\2\2\u03eb\u03ed\7\37\2\2\u03ec\u03ee\7\u0206\2\2")
        buf.write(u"\u03ed\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef")
        buf.write(u"\3\2\2\2\u03ef\u03f1\7\u0093\2\2\u03f0\u03f2\5\u0236")
        buf.write(u"\u011c\2\u03f1\u03f0\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write(u"\u03f3\3\2\2\2\u03f3\u03f5\5\u01e8\u00f5\2\u03f4\u03f6")
        buf.write(u"\5L\'\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6")
        buf.write(u"\u0401\3\2\2\2\u03f7\u03fe\5^\60\2\u03f8\u03fa\7\u03b5")
        buf.write(u"\2\2\u03f9\u03f8\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb")
        buf.write(u"\3\2\2\2\u03fb\u03fd\5^\60\2\u03fc\u03f9\3\2\2\2\u03fd")
        buf.write(u"\u0400\3\2\2\2\u03fe\u03fc\3\2\2\2\u03fe\u03ff\3\2\2")
        buf.write(u"\2\u03ff\u0402\3\2\2\2\u0400\u03fe\3\2\2\2\u0401\u03f7")
        buf.write(u"\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0404\3\2\2\2\u0403")
        buf.write(u"\u0405\5b\62\2\u0404\u0403\3\2\2\2\u0404\u0405\3\2\2")
        buf.write(u"\2\u0405\u0407\3\2\2\2\u0406\u0408\t\b\2\2\u0407\u0406")
        buf.write(u"\3\2\2\2\u0407\u0408\3\2\2\2\u0408\u040a\3\2\2\2\u0409")
        buf.write(u"\u040b\7\f\2\2\u040a\u0409\3\2\2\2\u040a\u040b\3\2\2")
        buf.write(u"\2\u040b\u040c\3\2\2\2\u040c\u040d\5\u00b4[\2\u040d\u0428")
        buf.write(u"\3\2\2\2\u040e\u0410\7\37\2\2\u040f\u0411\7\u0206\2\2")
        buf.write(u"\u0410\u040f\3\2\2\2\u0410\u0411\3\2\2\2\u0411\u0412")
        buf.write(u"\3\2\2\2\u0412\u0414\7\u0093\2\2\u0413\u0415\5\u0236")
        buf.write(u"\u011c\2\u0414\u0413\3\2\2\2\u0414\u0415\3\2\2\2\u0415")
        buf.write(u"\u0416\3\2\2\2\u0416\u0417\5\u01e8\u00f5\2\u0417\u0422")
        buf.write(u"\5L\'\2\u0418\u041f\5^\60\2\u0419\u041b\7\u03b5\2\2\u041a")
        buf.write(u"\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c\3\2\2")
        buf.write(u"\2\u041c\u041e\5^\60\2\u041d\u041a\3\2\2\2\u041e\u0421")
        buf.write(u"\3\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420")
        buf.write(u"\u0423\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0418\3\2\2")
        buf.write(u"\2\u0422\u0423\3\2\2\2\u0423\u0425\3\2\2\2\u0424\u0426")
        buf.write(u"\5b\62\2\u0425\u0424\3\2\2\2\u0425\u0426\3\2\2\2\u0426")
        buf.write(u"\u0428\3\2\2\2\u0427\u03d9\3\2\2\2\u0427\u03eb\3\2\2")
        buf.write(u"\2\u0427\u040e\3\2\2\2\u0428)\3\2\2\2\u0429\u042a\7\37")
        buf.write(u"\2\2\u042a\u042b\7\u0205\2\2\u042b\u042c\5\u0200\u0101")
        buf.write(u"\2\u042c\u042d\7\7\2\2\u042d\u042e\7\u0125\2\2\u042e")
        buf.write(u"\u0432\7\u03c2\2\2\u042f\u0430\7\u0149\2\2\u0430\u0431")
        buf.write(u"\7\u03aa\2\2\u0431\u0433\5\u0208\u0105\2\u0432\u042f")
        buf.write(u"\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0439\3\2\2\2\u0434")
        buf.write(u"\u0436\7\u0137\2\2\u0435\u0437\7\u03aa\2\2\u0436\u0435")
        buf.write(u"\3\2\2\2\u0436\u0437\3\2\2\2\u0437\u0438\3\2\2\2\u0438")
        buf.write(u"\u043a\5\u01f6\u00fc\2\u0439\u0434\3\2\2\2\u0439\u043a")
        buf.write(u"\3\2\2\2\u043a+\3\2\2\2\u043b\u043c\7\37\2\2\u043c\u043d")
        buf.write(u"\7\u0205\2\2\u043d\u043e\5\u0200\u0101\2\u043e\u043f")
        buf.write(u"\7\7\2\2\u043f\u0440\7\u0125\2\2\u0440\u0441\7\u03c2")
        buf.write(u"\2\2\u0441\u0442\7\u00a1\2\2\u0442\u0443\7\u0173\2\2")
        buf.write(u"\u0443\u0444\7?\2\2\u0444\u044a\5\u0200\u0101\2\u0445")
        buf.write(u"\u0447\7\u0145\2\2\u0446\u0448\7\u03aa\2\2\u0447\u0446")
        buf.write(u"\3\2\2\2\u0447\u0448\3\2\2\2\u0448\u0449\3\2\2\2\u0449")
        buf.write(u"\u044b\5\u0208\u0105\2\u044a\u0445\3\2\2\2\u044a\u044b")
        buf.write(u"\3\2\2\2\u044b\u0451\3\2\2\2\u044c\u044e\7\u015f\2\2")
        buf.write(u"\u044d\u044f\7\u03aa\2\2\u044e\u044d\3\2\2\2\u044e\u044f")
        buf.write(u"\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\5\u0208\u0105")
        buf.write(u"\2\u0451\u044c\3\2\2\2\u0451\u0452\3\2\2\2\u0452\u0458")
        buf.write(u"\3\2\2\2\u0453\u0455\7\u00ff\2\2\u0454\u0456\7\u03aa")
        buf.write(u"\2\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u0457")
        buf.write(u"\3\2\2\2\u0457\u0459\5\u0208\u0105\2\u0458\u0453\3\2")
        buf.write(u"\2\2\u0458\u0459\3\2\2\2\u0459\u045f\3\2\2\2\u045a\u045c")
        buf.write(u"\7\u018d\2\2\u045b\u045d\7\u03aa\2\2\u045c\u045b\3\2")
        buf.write(u"\2\2\u045c\u045d\3\2\2\2\u045d\u045e\3\2\2\2\u045e\u0460")
        buf.write(u"\5\u0208\u0105\2\u045f\u045a\3\2\2\2\u045f\u0460\3\2")
        buf.write(u"\2\2\u0460\u0466\3\2\2\2\u0461\u0463\7\u019f\2\2\u0462")
        buf.write(u"\u0464\7\u03aa\2\2\u0463\u0462\3\2\2\2\u0463\u0464\3")
        buf.write(u"\2\2\2\u0464\u0465\3\2\2\2\u0465\u0467\5\u0200\u0101")
        buf.write(u"\2\u0466\u0461\3\2\2\2\u0466\u0467\3\2\2\2\u0467\u0469")
        buf.write(u"\3\2\2\2\u0468\u046a\7\u021b\2\2\u0469\u0468\3\2\2\2")
        buf.write(u"\u0469\u046a\3\2\2\2\u046a\u0470\3\2\2\2\u046b\u046d")
        buf.write(u"\7\u0116\2\2\u046c\u046e\7\u03aa\2\2\u046d\u046c\3\2")
        buf.write(u"\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2\u046f\u0471")
        buf.write(u"\7\u03c2\2\2\u0470\u046b\3\2\2\2\u0470\u0471\3\2\2\2")
        buf.write(u"\u0471\u0472\3\2\2\2\u0472\u0474\7\u0137\2\2\u0473\u0475")
        buf.write(u"\7\u03aa\2\2\u0474\u0473\3\2\2\2\u0474\u0475\3\2\2\2")
        buf.write(u"\u0475\u0476\3\2\2\2\u0476\u0477\5\u01f6\u00fc\2\u0477")
        buf.write(u"-\3\2\2\2\u0478\u047a\7\37\2\2\u0479\u047b\5\64\33\2")
        buf.write(u"\u047a\u0479\3\2\2\2\u047a\u047b\3\2\2\2\u047b\u047c")
        buf.write(u"\3\2\2\2\u047c\u047d\7\u0098\2\2\u047d\u047e\5\u01e6")
        buf.write(u"\u00f4\2\u047e\u047f\t\t\2\2\u047f\u0480\t\n\2\2\u0480")
        buf.write(u"\u0481\7f\2\2\u0481\u0482\5\u01e8\u00f5\2\u0482\u0483")
        buf.write(u"\79\2\2\u0483\u0484\7/\2\2\u0484\u0487\7\u01db\2\2\u0485")
        buf.write(u"\u0486\t\13\2\2\u0486\u0488\5\u01e6\u00f4\2\u0487\u0485")
        buf.write(u"\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write(u"\u048a\5\u0158\u00ad\2\u048a/\3\2\2\2\u048b\u048e\7\37")
        buf.write(u"\2\2\u048c\u048d\7j\2\2\u048d\u048f\7{\2\2\u048e\u048c")
        buf.write(u"\3\2\2\2\u048e\u048f\3\2\2\2\u048f\u0493\3\2\2\2\u0490")
        buf.write(u"\u0491\7\u00fa\2\2\u0491\u0492\7\u03aa\2\2\u0492\u0494")
        buf.write(u"\t\f\2\2\u0493\u0490\3\2\2\2\u0493\u0494\3\2\2\2\u0494")
        buf.write(u"\u0496\3\2\2\2\u0495\u0497\5\64\33\2\u0496\u0495\3\2")
        buf.write(u"\2\2\u0496\u0497\3\2\2\2\u0497\u049b\3\2\2\2\u0498\u0499")
        buf.write(u"\7\u0089\2\2\u0499\u049a\7\u01e0\2\2\u049a\u049c\t\r")
        buf.write(u"\2\2\u049b\u0498\3\2\2\2\u049b\u049c\3\2\2\2\u049c\u049d")
        buf.write(u"\3\2\2\2\u049d\u049e\7\u021a\2\2\u049e\u04a3\5\u01e6")
        buf.write(u"\u00f4\2\u049f\u04a0\7\u03b3\2\2\u04a0\u04a1\5\u021e")
        buf.write(u"\u0110\2\u04a1\u04a2\7\u03b4\2\2\u04a2\u04a4\3\2\2\2")
        buf.write(u"\u04a3\u049f\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5")
        buf.write(u"\3\2\2\2\u04a5\u04a6\7\f\2\2\u04a6\u04ad\5\u00b4[\2\u04a7")
        buf.write(u"\u04a9\7\u00a7\2\2\u04a8\u04aa\t\16\2\2\u04a9\u04a8\3")
        buf.write(u"\2\2\2\u04a9\u04aa\3\2\2\2\u04aa\u04ab\3\2\2\2\u04ab")
        buf.write(u"\u04ac\7\30\2\2\u04ac\u04ae\7h\2\2\u04ad\u04a7\3\2\2")
        buf.write(u"\2\u04ad\u04ae\3\2\2\2\u04ae\61\3\2\2\2\u04af\u04b1\7")
        buf.write(u"&\2\2\u04b0\u04af\3\2\2\2\u04b0\u04b1\3\2\2\2\u04b1\u04b5")
        buf.write(u"\3\2\2\2\u04b2\u04b3\7\27\2\2\u04b3\u04b6\7\u0085\2\2")
        buf.write(u"\u04b4\u04b6\7\u0293\2\2\u04b5\u04b2\3\2\2\2\u04b5\u04b4")
        buf.write(u"\3\2\2\2\u04b6\u04b8\3\2\2\2\u04b7\u04b9\7\u03aa\2\2")
        buf.write(u"\u04b8\u04b7\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba")
        buf.write(u"\3\2\2\2\u04ba\u04c4\5\u01f2\u00fa\2\u04bb\u04bd\7&\2")
        buf.write(u"\2\u04bc\u04bb\3\2\2\2\u04bc\u04bd\3\2\2\2\u04bd\u04be")
        buf.write(u"\3\2\2\2\u04be\u04c0\7\31\2\2\u04bf\u04c1\7\u03aa\2\2")
        buf.write(u"\u04c0\u04bf\3\2\2\2\u04c0\u04c1\3\2\2\2\u04c1\u04c2")
        buf.write(u"\3\2\2\2\u04c2\u04c4\5\u01f4\u00fb\2\u04c3\u04b0\3\2")
        buf.write(u"\2\2\u04c3\u04bc\3\2\2\2\u04c4\63\3\2\2\2\u04c5\u04c6")
        buf.write(u"\7\u0128\2\2\u04c6\u04cd\7\u03aa\2\2\u04c7\u04ce\5\u01ee")
        buf.write(u"\u00f8\2\u04c8\u04cb\7!\2\2\u04c9\u04ca\7\u03b3\2\2\u04ca")
        buf.write(u"\u04cc\7\u03b4\2\2\u04cb\u04c9\3\2\2\2\u04cb\u04cc\3")
        buf.write(u"\2\2\2\u04cc\u04ce\3\2\2\2\u04cd\u04c7\3\2\2\2\u04cd")
        buf.write(u"\u04c8\3\2\2\2\u04ce\65\3\2\2\2\u04cf\u04d0\7\u00fc\2")
        buf.write(u"\2\u04d0\u04d4\58\35\2\u04d1\u04d3\5:\36\2\u04d2\u04d1")
        buf.write(u"\3\2\2\2\u04d3\u04d6\3\2\2\2\u04d4\u04d2\3\2\2\2\u04d4")
        buf.write(u"\u04d5\3\2\2\2\u04d5\u04f2\3\2\2\2\u04d6\u04d4\3\2\2")
        buf.write(u"\2\u04d7\u04da\7\u013f\2\2\u04d8\u04db\5\u0206\u0104")
        buf.write(u"\2\u04d9\u04db\5\u024c\u0127\2\u04da\u04d8\3\2\2\2\u04da")
        buf.write(u"\u04d9\3\2\2\2\u04db\u04dc\3\2\2\2\u04dc\u04e5\5<\37")
        buf.write(u"\2\u04dd\u04de\7\u01f7\2\2\u04de\u04e2\58\35\2\u04df")
        buf.write(u"\u04e1\5:\36\2\u04e0\u04df\3\2\2\2\u04e1\u04e4\3\2\2")
        buf.write(u"\2\u04e2\u04e0\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e6")
        buf.write(u"\3\2\2\2\u04e4\u04e2\3\2\2\2\u04e5\u04dd\3\2\2\2\u04e5")
        buf.write(u"\u04e6\3\2\2\2\u04e6\u04ef\3\2\2\2\u04e7\u04e8\7\u0136")
        buf.write(u"\2\2\u04e8\u04ec\58\35\2\u04e9\u04eb\5:\36\2\u04ea\u04e9")
        buf.write(u"\3\2\2\2\u04eb\u04ee\3\2\2\2\u04ec\u04ea\3\2\2\2\u04ec")
        buf.write(u"\u04ed\3\2\2\2\u04ed\u04f0\3\2\2\2\u04ee\u04ec\3\2\2")
        buf.write(u"\2\u04ef\u04e7\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2")
        buf.write(u"\3\2\2\2\u04f1\u04cf\3\2\2\2\u04f1\u04d7\3\2\2\2\u04f2")
        buf.write(u"\67\3\2\2\2\u04f3\u04f8\7\u00e5\2\2\u04f4\u04f8\5\u020a")
        buf.write(u"\u0106\2\u04f5\u04f8\5\u0206\u0104\2\u04f6\u04f8\5\u024c")
        buf.write(u"\u0127\2\u04f7\u04f3\3\2\2\2\u04f7\u04f4\3\2\2\2\u04f7")
        buf.write(u"\u04f5\3\2\2\2\u04f7\u04f6\3\2\2\2\u04f89\3\2\2\2\u04f9")
        buf.write(u"\u04fa\7\u03a5\2\2\u04fa\u04fd\7J\2\2\u04fb\u04fe\5\u0206")
        buf.write(u"\u0104\2\u04fc\u04fe\5\u024c\u0127\2\u04fd\u04fb\3\2")
        buf.write(u"\2\2\u04fd\u04fc\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500")
        buf.write(u"\5<\37\2\u0500;\3\2\2\2\u0501\u050f\5\u0262\u0132\2\u0502")
        buf.write(u"\u050f\7\u00ba\2\2\u0503\u050f\7\u00c8\2\2\u0504\u050f")
        buf.write(u"\7\u00c9\2\2\u0505\u050f\7\u00ca\2\2\u0506\u050f\7\u00cb")
        buf.write(u"\2\2\u0507\u050f\7\u00cc\2\2\u0508\u050f\7\u00cd\2\2")
        buf.write(u"\u0509\u050f\7\u00ce\2\2\u050a\u050f\7\u00cf\2\2\u050b")
        buf.write(u"\u050f\7\u00d0\2\2\u050c\u050f\7\u00d1\2\2\u050d\u050f")
        buf.write(u"\7\u00d2\2\2\u050e\u0501\3\2\2\2\u050e\u0502\3\2\2\2")
        buf.write(u"\u050e\u0503\3\2\2\2\u050e\u0504\3\2\2\2\u050e\u0505")
        buf.write(u"\3\2\2\2\u050e\u0506\3\2\2\2\u050e\u0507\3\2\2\2\u050e")
        buf.write(u"\u0508\3\2\2\2\u050e\u0509\3\2\2\2\u050e\u050a\3\2\2")
        buf.write(u"\2\u050e\u050b\3\2\2\2\u050e\u050c\3\2\2\2\u050e\u050d")
        buf.write(u"\3\2\2\2\u050f=\3\2\2\2\u0510\u0516\7\u0133\2\2\u0511")
        buf.write(u"\u0516\7\u012c\2\2\u0512\u0513\7\u012c\2\2\u0513\u0514")
        buf.write(u"\7f\2\2\u0514\u0516\7\u01e7\2\2\u0515\u0510\3\2\2\2\u0515")
        buf.write(u"\u0511\3\2\2\2\u0515\u0512\3\2\2\2\u0516?\3\2\2\2\u0517")
        buf.write(u"\u0518\7\u00a2\2\2\u0518\u0519\t\17\2\2\u0519A\3\2\2")
        buf.write(u"\2\u051a\u051c\7\u016b\2\2\u051b\u051d\7\u03aa\2\2\u051c")
        buf.write(u"\u051b\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051e\3\2\2")
        buf.write(u"\2\u051e\u0526\5\u0208\u0105\2\u051f\u0526\5@!\2\u0520")
        buf.write(u"\u0521\7\u00a7\2\2\u0521\u0522\7\u01ae\2\2\u0522\u0526")
        buf.write(u"\5\u0200\u0101\2\u0523\u0524\7\u0116\2\2\u0524\u0526")
        buf.write(u"\7\u03c2\2\2\u0525\u051a\3\2\2\2\u0525\u051f\3\2\2\2")
        buf.write(u"\u0525\u0520\3\2\2\2\u0525\u0523\3\2\2\2\u0526C\3\2\2")
        buf.write(u"\2\u0527\u0528\t\20\2\2\u0528\u0529\5\u0200\u0101\2\u0529")
        buf.write(u"\u052a\5\u0214\u010b\2\u052aE\3\2\2\2\u052b\u052c\5\u0200")
        buf.write(u"\u0101\2\u052c\u052d\5\u0214\u010b\2\u052dG\3\2\2\2\u052e")
        buf.write(u"\u052f\7\u0116\2\2\u052f\u0546\7\u03c2\2\2\u0530\u0531")
        buf.write(u"\7\u016c\2\2\u0531\u0546\7\u0089\2\2\u0532\u0534\7c\2")
        buf.write(u"\2\u0533\u0532\3\2\2\2\u0533\u0534\3\2\2\2\u0534\u0535")
        buf.write(u"\3\2\2\2\u0535\u0546\7+\2\2\u0536\u0537\7\u011f\2\2\u0537")
        buf.write(u"\u0541\7\u0089\2\2\u0538\u0539\7\u019e\2\2\u0539\u0541")
        buf.write(u"\7\u0089\2\2\u053a\u053b\7u\2\2\u053b\u053c\7\u0089\2")
        buf.write(u"\2\u053c\u0541\7\u0124\2\2\u053d\u053e\7a\2\2\u053e\u053f")
        buf.write(u"\7\u0089\2\2\u053f\u0541\7\u0124\2\2\u0540\u0536\3\2")
        buf.write(u"\2\2\u0540\u0538\3\2\2\2\u0540\u053a\3\2\2\2\u0540\u053d")
        buf.write(u"\3\2\2\2\u0541\u0546\3\2\2\2\u0542\u0543\7\u0089\2\2")
        buf.write(u"\u0543\u0544\7\u01e0\2\2\u0544\u0546\t\r\2\2\u0545\u052e")
        buf.write(u"\3\2\2\2\u0545\u0530\3\2\2\2\u0545\u0533\3\2\2\2\u0545")
        buf.write(u"\u0540\3\2\2\2\u0545\u0542\3\2\2\2\u0546I\3\2\2\2\u0547")
        buf.write(u"\u0548\7\u0159\2\2\u0548\u0556\7\u03c2\2\2\u0549\u054a")
        buf.write(u"\7#\2\2\u054a\u0556\7\u03c2\2\2\u054b\u054c\7\u0214\2")
        buf.write(u"\2\u054c\u0556\7\u03c2\2\2\u054d\u054e\7\u01b2\2\2\u054e")
        buf.write(u"\u0556\7\u03c2\2\2\u054f\u0550\7\u01ea\2\2\u0550\u0556")
        buf.write(u"\7\u03c2\2\2\u0551\u0552\7\u01ab\2\2\u0552\u0556\7\u03c2")
        buf.write(u"\2\2\u0553\u0554\7\u01b7\2\2\u0554\u0556\5\u0206\u0104")
        buf.write(u"\2\u0555\u0547\3\2\2\2\u0555\u0549\3\2\2\2\u0555\u054b")
        buf.write(u"\3\2\2\2\u0555\u054d\3\2\2\2\u0555\u054f\3\2\2\2\u0555")
        buf.write(u"\u0551\3\2\2\2\u0555\u0553\3\2\2\2\u0556K\3\2\2\2\u0557")
        buf.write(u"\u0558\7\u03b3\2\2\u0558\u055d\5N(\2\u0559\u055a\7\u03b5")
        buf.write(u"\2\2\u055a\u055c\5N(\2\u055b\u0559\3\2\2\2\u055c\u055f")
        buf.write(u"\3\2\2\2\u055d\u055b\3\2\2\2\u055d\u055e\3\2\2\2\u055e")
        buf.write(u"\u0560\3\2\2\2\u055f\u055d\3\2\2\2\u0560\u0561\7\u03b4")
        buf.write(u"\2\2\u0561M\3\2\2\2\u0562\u0563\5\u0200\u0101\2\u0563")
        buf.write(u"\u0564\5P)\2\u0564\u0568\3\2\2\2\u0565\u0568\5T+\2\u0566")
        buf.write(u"\u0568\5\\/\2\u0567\u0562\3\2\2\2\u0567\u0565\3\2\2\2")
        buf.write(u"\u0567\u0566\3\2\2\2\u0568O\3\2\2\2\u0569\u056d\5\u0214")
        buf.write(u"\u010b\2\u056a\u056c\5R*\2\u056b\u056a\3\2\2\2\u056c")
        buf.write(u"\u056f\3\2\2\2\u056d\u056b\3\2\2\2\u056d\u056e\3\2\2")
        buf.write(u"\2\u056eQ\3\2\2\2\u056f\u056d\3\2\2\2\u0570\u0584\5\u0210")
        buf.write(u"\u0109\2\u0571\u0572\7&\2\2\u0572\u0584\5\u022e\u0118")
        buf.write(u"\2\u0573\u0584\7\u0100\2\2\u0574\u0576\7p\2\2\u0575\u0574")
        buf.write(u"\3\2\2\2\u0575\u0576\3\2\2\2\u0576\u0577\3\2\2\2\u0577")
        buf.write(u"\u0584\7O\2\2\u0578\u057a\7\u009c\2\2\u0579\u057b\7O")
        buf.write(u"\2\2\u057a\u0579\3\2\2\2\u057a\u057b\3\2\2\2\u057b\u0584")
        buf.write(u"\3\2\2\2\u057c\u057d\7\u0116\2\2\u057d\u0584\7\u03c2")
        buf.write(u"\2\2\u057e\u057f\7\u0115\2\2\u057f\u0584\t\21\2\2\u0580")
        buf.write(u"\u0581\7\u01fd\2\2\u0581\u0584\t\22\2\2\u0582\u0584\5")
        buf.write(u"V,\2\u0583\u0570\3\2\2\2\u0583\u0571\3\2\2\2\u0583\u0573")
        buf.write(u"\3\2\2\2\u0583\u0575\3\2\2\2\u0583\u0578\3\2\2\2\u0583")
        buf.write(u"\u057c\3\2\2\2\u0583\u057e\3\2\2\2\u0583\u0580\3\2\2")
        buf.write(u"\2\u0583\u0582\3\2\2\2\u0584S\3\2\2\2\u0585\u0587\7\34")
        buf.write(u"\2\2\u0586\u0588\5\u0200\u0101\2\u0587\u0586\3\2\2\2")
        buf.write(u"\u0587\u0588\3\2\2\2\u0588\u058a\3\2\2\2\u0589\u0585")
        buf.write(u"\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b\3\2\2\2\u058b")
        buf.write(u"\u058c\7p\2\2\u058c\u058e\7O\2\2\u058d\u058f\5@!\2\u058e")
        buf.write(u"\u058d\3\2\2\2\u058e\u058f\3\2\2\2\u058f\u0590\3\2\2")
        buf.write(u"\2\u0590\u0594\5\u0222\u0112\2\u0591\u0593\5B\"\2\u0592")
        buf.write(u"\u0591\3\2\2\2\u0593\u0596\3\2\2\2\u0594\u0592\3\2\2")
        buf.write(u"\2\u0594\u0595\3\2\2\2\u0595\u05c8\3\2\2\2\u0596\u0594")
        buf.write(u"\3\2\2\2\u0597\u0599\7\34\2\2\u0598\u059a\5\u0200\u0101")
        buf.write(u"\2\u0599\u0598\3\2\2\2\u0599\u059a\3\2\2\2\u059a\u059c")
        buf.write(u"\3\2\2\2\u059b\u0597\3\2\2\2\u059b\u059c\3\2\2\2\u059c")
        buf.write(u"\u059d\3\2\2\2\u059d\u059f\7\u009c\2\2\u059e\u05a0\t")
        buf.write(u"\23\2\2\u059f\u059e\3\2\2\2\u059f\u05a0\3\2\2\2\u05a0")
        buf.write(u"\u05a2\3\2\2\2\u05a1\u05a3\5\u0200\u0101\2\u05a2\u05a1")
        buf.write(u"\3\2\2\2\u05a2\u05a3\3\2\2\2\u05a3\u05a5\3\2\2\2\u05a4")
        buf.write(u"\u05a6\5@!\2\u05a5\u05a4\3\2\2\2\u05a5\u05a6\3\2\2\2")
        buf.write(u"\u05a6\u05a7\3\2\2\2\u05a7\u05ab\5\u0222\u0112\2\u05a8")
        buf.write(u"\u05aa\5B\"\2\u05a9\u05a8\3\2\2\2\u05aa\u05ad\3\2\2\2")
        buf.write(u"\u05ab\u05a9\3\2\2\2\u05ab\u05ac\3\2\2\2\u05ac\u05c8")
        buf.write(u"\3\2\2\2\u05ad\u05ab\3\2\2\2\u05ae\u05b0\7\34\2\2\u05af")
        buf.write(u"\u05b1\5\u0200\u0101\2\u05b0\u05af\3\2\2\2\u05b0\u05b1")
        buf.write(u"\3\2\2\2\u05b1\u05b3\3\2\2\2\u05b2\u05ae\3\2\2\2\u05b2")
        buf.write(u"\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4\u05b5\7;\2\2")
        buf.write(u"\u05b5\u05b7\7O\2\2\u05b6\u05b8\5\u0200\u0101\2\u05b7")
        buf.write(u"\u05b6\3\2\2\2\u05b7\u05b8\3\2\2\2\u05b8\u05b9\3\2\2")
        buf.write(u"\2\u05b9\u05ba\5\u0222\u0112\2\u05ba\u05bb\5V,\2\u05bb")
        buf.write(u"\u05c8\3\2\2\2\u05bc\u05be\7\34\2\2\u05bd\u05bf\5\u0200")
        buf.write(u"\u0101\2\u05be\u05bd\3\2\2\2\u05be\u05bf\3\2\2\2\u05bf")
        buf.write(u"\u05c1\3\2\2\2\u05c0\u05bc\3\2\2\2\u05c0\u05c1\3\2\2")
        buf.write(u"\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\7\30\2\2\u05c3\u05c4")
        buf.write(u"\7\u03b3\2\2\u05c4\u05c5\5\u024c\u0127\2\u05c5\u05c6")
        buf.write(u"\7\u03b4\2\2\u05c6\u05c8\3\2\2\2\u05c7\u0589\3\2\2\2")
        buf.write(u"\u05c7\u059b\3\2\2\2\u05c7\u05b2\3\2\2\2\u05c7\u05c0")
        buf.write(u"\3\2\2\2\u05c8U\3\2\2\2\u05c9\u05ca\7v\2\2\u05ca\u05cb")
        buf.write(u"\5\u01e8\u00f5\2\u05cb\u05ce\5\u0222\u0112\2\u05cc\u05cd")
        buf.write(u"\7_\2\2\u05cd\u05cf\t\24\2\2\u05ce\u05cc\3\2\2\2\u05ce")
        buf.write(u"\u05cf\3\2\2\2\u05cf\u05d1\3\2\2\2\u05d0\u05d2\5X-\2")
        buf.write(u"\u05d1\u05d0\3\2\2\2\u05d1\u05d2\3\2\2\2\u05d2W\3\2\2")
        buf.write(u"\2\u05d3\u05d4\7f\2\2\u05d4\u05d5\7(\2\2\u05d5\u05d9")
        buf.write(u"\5Z.\2\u05d6\u05d7\7f\2\2\u05d7\u05d8\7\u009f\2\2\u05d8")
        buf.write(u"\u05da\5Z.\2\u05d9\u05d6\3\2\2\2\u05d9\u05da\3\2\2\2")
        buf.write(u"\u05da\u05e4\3\2\2\2\u05db\u05dc\7f\2\2\u05dc\u05dd\7")
        buf.write(u"\u009f\2\2\u05dd\u05e1\5Z.\2\u05de\u05df\7f\2\2\u05df")
        buf.write(u"\u05e0\7(\2\2\u05e0\u05e2\5Z.\2\u05e1\u05de\3\2\2\2\u05e1")
        buf.write(u"\u05e2\3\2\2\2\u05e2\u05e4\3\2\2\2\u05e3\u05d3\3\2\2")
        buf.write(u"\2\u05e3\u05db\3\2\2\2\u05e4Y\3\2\2\2\u05e5\u05ec\7}")
        buf.write(u"\2\2\u05e6\u05ec\7\23\2\2\u05e7\u05e8\7\u0085\2\2\u05e8")
        buf.write(u"\u05ec\7e\2\2\u05e9\u05ea\7\u019e\2\2\u05ea\u05ec\7\u00f7")
        buf.write(u"\2\2\u05eb\u05e5\3\2\2\2\u05eb\u05e6\3\2\2\2\u05eb\u05e7")
        buf.write(u"\3\2\2\2\u05eb\u05e9\3\2\2\2\u05ec[\3\2\2\2\u05ed\u05ef")
        buf.write(u"\t\23\2\2\u05ee\u05f0\5\u0200\u0101\2\u05ef\u05ee\3\2")
        buf.write(u"\2\2\u05ef\u05f0\3\2\2\2\u05f0\u05f2\3\2\2\2\u05f1\u05f3")
        buf.write(u"\5@!\2\u05f2\u05f1\3\2\2\2\u05f2\u05f3\3\2\2\2\u05f3")
        buf.write(u"\u05f4\3\2\2\2\u05f4\u05f8\5\u0222\u0112\2\u05f5\u05f7")
        buf.write(u"\5B\"\2\u05f6\u05f5\3\2\2\2\u05f7\u05fa\3\2\2\2\u05f8")
        buf.write(u"\u05f6\3\2\2\2\u05f8\u05f9\3\2\2\2\u05f9\u060a\3\2\2")
        buf.write(u"\2\u05fa\u05f8\3\2\2\2\u05fb\u05fd\t\25\2\2\u05fc\u05fe")
        buf.write(u"\t\23\2\2\u05fd\u05fc\3\2\2\2\u05fd\u05fe\3\2\2\2\u05fe")
        buf.write(u"\u0600\3\2\2\2\u05ff\u0601\5\u0200\u0101\2\u0600\u05ff")
        buf.write(u"\3\2\2\2\u0600\u0601\3\2\2\2\u0601\u0602\3\2\2\2\u0602")
        buf.write(u"\u0606\5\u0222\u0112\2\u0603\u0605\5B\"\2\u0604\u0603")
        buf.write(u"\3\2\2\2\u0605\u0608\3\2\2\2\u0606\u0604\3\2\2\2\u0606")
        buf.write(u"\u0607\3\2\2\2\u0607\u060a\3\2\2\2\u0608\u0606\3\2\2")
        buf.write(u"\2\u0609\u05ed\3\2\2\2\u0609\u05fb\3\2\2\2\u060a]\3\2")
        buf.write(u"\2\2\u060b\u060d\7\u0137\2\2\u060c\u060e\7\u03aa\2\2")
        buf.write(u"\u060d\u060c\3\2\2\2\u060d\u060e\3\2\2\2\u060e\u060f")
        buf.write(u"\3\2\2\2\u060f\u0698\5\u01f6\u00fc\2\u0610\u0612\7\u0100")
        buf.write(u"\2\2\u0611\u0613\7\u03aa\2\2\u0612\u0611\3\2\2\2\u0612")
        buf.write(u"\u0613\3\2\2\2\u0613\u0614\3\2\2\2\u0614\u0698\5\u0206")
        buf.write(u"\u0104\2\u0615\u0617\7\u0101\2\2\u0616\u0618\7\u03aa")
        buf.write(u"\2\2\u0617\u0616\3\2\2\2\u0617\u0618\3\2\2\2\u0618\u0619")
        buf.write(u"\3\2\2\2\u0619\u0698\5\u0206\u0104\2\u061a\u061c\7&\2")
        buf.write(u"\2\u061b\u061a\3\2\2\2\u061b\u061c\3\2\2\2\u061c\u0620")
        buf.write(u"\3\2\2\2\u061d\u061e\7\27\2\2\u061e\u0621\7\u0085\2\2")
        buf.write(u"\u061f\u0621\7\u0293\2\2\u0620\u061d\3\2\2\2\u0620\u061f")
        buf.write(u"\3\2\2\2\u0621\u0623\3\2\2\2\u0622\u0624\7\u03aa\2\2")
        buf.write(u"\u0623\u0622\3\2\2\2\u0623\u0624\3\2\2\2\u0624\u0625")
        buf.write(u"\3\2\2\2\u0625\u0698\5\u01f2\u00fa\2\u0626\u0628\7\u010e")
        buf.write(u"\2\2\u0627\u0629\7\u03aa\2\2\u0628\u0627\3\2\2\2\u0628")
        buf.write(u"\u0629\3\2\2\2\u0629\u062a\3\2\2\2\u062a\u0698\t\26\2")
        buf.write(u"\2\u062b\u062d\7&\2\2\u062c\u062b\3\2\2\2\u062c\u062d")
        buf.write(u"\3\2\2\2\u062d\u062e\3\2\2\2\u062e\u0630\7\31\2\2\u062f")
        buf.write(u"\u0631\7\u03aa\2\2\u0630\u062f\3\2\2\2\u0630\u0631\3")
        buf.write(u"\2\2\2\u0631\u0632\3\2\2\2\u0632\u0698\5\u01f4\u00fb")
        buf.write(u"\2\u0633\u0635\7\u0116\2\2\u0634\u0636\7\u03aa\2\2\u0635")
        buf.write(u"\u0634\3\2\2\2\u0635\u0636\3\2\2\2\u0636\u0637\3\2\2")
        buf.write(u"\2\u0637\u0698\7\u03c2\2\2\u0638\u063a\7\u011b\2\2\u0639")
        buf.write(u"\u063b\7\u03aa\2\2\u063a\u0639\3\2\2\2\u063a\u063b\3")
        buf.write(u"\2\2\2\u063b\u063c\3\2\2\2\u063c\u0698\7\u03c2\2\2\u063d")
        buf.write(u"\u063f\7\u011d\2\2\u063e\u0640\7\u03aa\2\2\u063f\u063e")
        buf.write(u"\3\2\2\2\u063f\u0640\3\2\2\2\u0640\u0641\3\2\2\2\u0641")
        buf.write(u"\u0698\7\u03c2\2\2\u0642\u0643\7\u0124\2\2\u0643\u0645")
        buf.write(u"\7\u012b\2\2\u0644\u0646\7\u03aa\2\2\u0645\u0644\3\2")
        buf.write(u"\2\2\u0645\u0646\3\2\2\2\u0646\u0647\3\2\2\2\u0647\u0698")
        buf.write(u"\7\u03c2\2\2\u0648\u064a\7\u0129\2\2\u0649\u064b\7\u03aa")
        buf.write(u"\2\2\u064a\u0649\3\2\2\2\u064a\u064b\3\2\2\2\u064b\u064c")
        buf.write(u"\3\2\2\2\u064c\u0698\t\26\2\2\u064d\u064f\7\u0134\2\2")
        buf.write(u"\u064e\u0650\7\u03aa\2\2\u064f\u064e\3\2\2\2\u064f\u0650")
        buf.write(u"\3\2\2\2\u0650\u0651\3\2\2\2\u0651\u0698\7\u03c2\2\2")
        buf.write(u"\u0652\u0653\7E\2\2\u0653\u0655\7\u012b\2\2\u0654\u0656")
        buf.write(u"\7\u03aa\2\2\u0655\u0654\3\2\2\2\u0655\u0656\3\2\2\2")
        buf.write(u"\u0656\u0657\3\2\2\2\u0657\u0698\7\u03c2\2\2\u0658\u065a")
        buf.write(u"\7\u0161\2\2\u0659\u065b\7\u03aa\2\2\u065a\u0659\3\2")
        buf.write(u"\2\2\u065a\u065b\3\2\2\2\u065b\u065c\3\2\2\2\u065c\u0698")
        buf.write(u"\t\27\2\2\u065d\u065f\7\u016b\2\2\u065e\u0660\7\u03aa")
        buf.write(u"\2\2\u065f\u065e\3\2\2\2\u065f\u0660\3\2\2\2\u0660\u0661")
        buf.write(u"\3\2\2\2\u0661\u0698\5\u0208\u0105\2\u0662\u0664\7\u018c")
        buf.write(u"\2\2\u0663\u0665\7\u03aa\2\2\u0664\u0663\3\2\2\2\u0664")
        buf.write(u"\u0665\3\2\2\2\u0665\u0666\3\2\2\2\u0666\u0698\5\u0206")
        buf.write(u"\u0104\2\u0667\u0669\7\u0194\2\2\u0668\u066a\7\u03aa")
        buf.write(u"\2\2\u0669\u0668\3\2\2\2\u0669\u066a\3\2\2\2\u066a\u066b")
        buf.write(u"\3\2\2\2\u066b\u0698\5\u0206\u0104\2\u066c\u066e\7\u01ac")
        buf.write(u"\2\2\u066d\u066f\7\u03aa\2\2\u066e\u066d\3\2\2\2\u066e")
        buf.write(u"\u066f\3\2\2\2\u066f\u0670\3\2\2\2\u0670\u0698\t\30\2")
        buf.write(u"\2\u0671\u0673\7\u01b2\2\2\u0672\u0674\7\u03aa\2\2\u0673")
        buf.write(u"\u0672\3\2\2\2\u0673\u0674\3\2\2\2\u0674\u0675\3\2\2")
        buf.write(u"\2\u0675\u0698\7\u03c2\2\2\u0676\u0678\7\u01dd\2\2\u0677")
        buf.write(u"\u0679\7\u03aa\2\2\u0678\u0677\3\2\2\2\u0678\u0679\3")
        buf.write(u"\2\2\2\u0679\u067a\3\2\2\2\u067a\u0698\t\31\2\2\u067b")
        buf.write(u"\u067d\7\u01f8\2\2\u067c\u067e\7\u03aa\2\2\u067d\u067c")
        buf.write(u"\3\2\2\2\u067d\u067e\3\2\2\2\u067e\u067f\3\2\2\2\u067f")
        buf.write(u"\u0698\t\30\2\2\u0680\u0682\7\u01f9\2\2\u0681\u0683\7")
        buf.write(u"\u03aa\2\2\u0682\u0681\3\2\2\2\u0682\u0683\3\2\2\2\u0683")
        buf.write(u"\u0684\3\2\2\2\u0684\u0698\t\30\2\2\u0685\u0687\7\u01fa")
        buf.write(u"\2\2\u0686\u0688\7\u03aa\2\2\u0687\u0686\3\2\2\2\u0687")
        buf.write(u"\u0688\3\2\2\2\u0688\u0689\3\2\2\2\u0689\u0698\5\u0206")
        buf.write(u"\u0104\2\u068a\u068b\7\u0205\2\2\u068b\u068d\5\u0200")
        buf.write(u"\u0101\2\u068c\u068e\5`\61\2\u068d\u068c\3\2\2\2\u068d")
        buf.write(u"\u068e\3\2\2\2\u068e\u0698\3\2\2\2\u068f\u0691\7\u009b")
        buf.write(u"\2\2\u0690\u0692\7\u03aa\2\2\u0691\u0690\3\2\2\2\u0691")
        buf.write(u"\u0692\3\2\2\2\u0692\u0693\3\2\2\2\u0693\u0694\7\u03b3")
        buf.write(u"\2\2\u0694\u0695\5\u0220\u0111\2\u0695\u0696\7\u03b4")
        buf.write(u"\2\2\u0696\u0698\3\2\2\2\u0697\u060b\3\2\2\2\u0697\u0610")
        buf.write(u"\3\2\2\2\u0697\u0615\3\2\2\2\u0697\u061b\3\2\2\2\u0697")
        buf.write(u"\u0626\3\2\2\2\u0697\u062c\3\2\2\2\u0697\u0633\3\2\2")
        buf.write(u"\2\u0697\u0638\3\2\2\2\u0697\u063d\3\2\2\2\u0697\u0642")
        buf.write(u"\3\2\2\2\u0697\u0648\3\2\2\2\u0697\u064d\3\2\2\2\u0697")
        buf.write(u"\u0652\3\2\2\2\u0697\u0658\3\2\2\2\u0697\u065d\3\2\2")
        buf.write(u"\2\u0697\u0662\3\2\2\2\u0697\u0667\3\2\2\2\u0697\u066c")
        buf.write(u"\3\2\2\2\u0697\u0671\3\2\2\2\u0697\u0676\3\2\2\2\u0697")
        buf.write(u"\u067b\3\2\2\2\u0697\u0680\3\2\2\2\u0697\u0685\3\2\2")
        buf.write(u"\2\u0697\u068a\3\2\2\2\u0697\u068f\3\2\2\2\u0698_\3\2")
        buf.write(u"\2\2\u0699\u069a\7\u01fd\2\2\u069a\u069b\t\22\2\2\u069b")
        buf.write(u"a\3\2\2\2\u069c\u069d\7o\2\2\u069d\u069e\7\21\2\2\u069e")
        buf.write(u"\u06a1\5d\63\2\u069f\u06a0\7\u01b1\2\2\u06a0\u06a2\5")
        buf.write(u"\u0206\u0104\2\u06a1\u069f\3\2\2\2\u06a1\u06a2\3\2\2")
        buf.write(u"\2\u06a2\u06aa\3\2\2\2\u06a3\u06a4\7\u0200\2\2\u06a4")
        buf.write(u"\u06a5\7\21\2\2\u06a5\u06a8\5f\64\2\u06a6\u06a7\7\u0201")
        buf.write(u"\2\2\u06a7\u06a9\5\u0206\u0104\2\u06a8\u06a6\3\2\2\2")
        buf.write(u"\u06a8\u06a9\3\2\2\2\u06a9\u06ab\3\2\2\2\u06aa\u06a3")
        buf.write(u"\3\2\2\2\u06aa\u06ab\3\2\2\2\u06ab\u06b7\3\2\2\2\u06ac")
        buf.write(u"\u06ad\7\u03b3\2\2\u06ad\u06b2\5h\65\2\u06ae\u06af\7")
        buf.write(u"\u03b5\2\2\u06af\u06b1\5h\65\2\u06b0\u06ae\3\2\2\2\u06b1")
        buf.write(u"\u06b4\3\2\2\2\u06b2\u06b0\3\2\2\2\u06b2\u06b3\3\2\2")
        buf.write(u"\2\u06b3\u06b5\3\2\2\2\u06b4\u06b2\3\2\2\2\u06b5\u06b6")
        buf.write(u"\7\u03b4\2\2\u06b6\u06b8\3\2\2\2\u06b7\u06ac\3\2\2\2")
        buf.write(u"\u06b7\u06b8\3\2\2\2\u06b8c\3\2\2\2\u06b9\u06bb\7W\2")
        buf.write(u"\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb\3\2\2\2\u06bb\u06bc")
        buf.write(u"\3\2\2\2\u06bc\u06bd\7\u0157\2\2\u06bd\u06be\7\u03b3")
        buf.write(u"\2\2\u06be\u06bf\5\u024c\u0127\2\u06bf\u06c0\7\u03b4")
        buf.write(u"\2\2\u06c0\u06e7\3\2\2\2\u06c1\u06c3\7W\2\2\u06c2\u06c1")
        buf.write(u"\3\2\2\2\u06c2\u06c3\3\2\2\2\u06c3\u06c4\3\2\2\2\u06c4")
        buf.write(u"\u06c8\7O\2\2\u06c5\u06c6\7\u00fa\2\2\u06c6\u06c7\7\u03aa")
        buf.write(u"\2\2\u06c7\u06c9\t\32\2\2\u06c8\u06c5\3\2\2\2\u06c8\u06c9")
        buf.write(u"\3\2\2\2\u06c9\u06ca\3\2\2\2\u06ca\u06cb\7\u03b3\2\2")
        buf.write(u"\u06cb\u06cc\5\u021e\u0110\2\u06cc\u06cd\7\u03b4\2\2")
        buf.write(u"\u06cd\u06e7\3\2\2\2\u06ce\u06d8\7s\2\2\u06cf\u06d0\7")
        buf.write(u"\u03b3\2\2\u06d0\u06d1\5\u024c\u0127\2\u06d1\u06d2\7")
        buf.write(u"\u03b4\2\2\u06d2\u06d9\3\2\2\2\u06d3\u06d4\7\u0114\2")
        buf.write(u"\2\u06d4\u06d5\7\u03b3\2\2\u06d5\u06d6\5\u021e\u0110")
        buf.write(u"\2\u06d6\u06d7\7\u03b4\2\2\u06d7\u06d9\3\2\2\2\u06d8")
        buf.write(u"\u06cf\3\2\2\2\u06d8\u06d3\3\2\2\2\u06d9\u06e7\3\2\2")
        buf.write(u"\2\u06da\u06e4\7\u0171\2\2\u06db\u06dc\7\u03b3\2\2\u06dc")
        buf.write(u"\u06dd\5\u024c\u0127\2\u06dd\u06de\7\u03b4\2\2\u06de")
        buf.write(u"\u06e5\3\2\2\2\u06df\u06e0\7\u0114\2\2\u06e0\u06e1\7")
        buf.write(u"\u03b3\2\2\u06e1\u06e2\5\u021e\u0110\2\u06e2\u06e3\7")
        buf.write(u"\u03b4\2\2\u06e3\u06e5\3\2\2\2\u06e4\u06db\3\2\2\2\u06e4")
        buf.write(u"\u06df\3\2\2\2\u06e5\u06e7\3\2\2\2\u06e6\u06ba\3\2\2")
        buf.write(u"\2\u06e6\u06c2\3\2\2\2\u06e6\u06ce\3\2\2\2\u06e6\u06da")
        buf.write(u"\3\2\2\2\u06e7e\3\2\2\2\u06e8\u06ea\7W\2\2\u06e9\u06e8")
        buf.write(u"\3\2\2\2\u06e9\u06ea\3\2\2\2\u06ea\u06eb\3\2\2\2\u06eb")
        buf.write(u"\u06ec\7\u0157\2\2\u06ec\u06ed\7\u03b3\2\2\u06ed\u06ee")
        buf.write(u"\5\u024c\u0127\2\u06ee\u06ef\7\u03b4\2\2\u06ef\u06fe")
        buf.write(u"\3\2\2\2\u06f0\u06f2\7W\2\2\u06f1\u06f0\3\2\2\2\u06f1")
        buf.write(u"\u06f2\3\2\2\2\u06f2\u06f3\3\2\2\2\u06f3\u06f7\7O\2\2")
        buf.write(u"\u06f4\u06f5\7\u00fa\2\2\u06f5\u06f6\7\u03aa\2\2\u06f6")
        buf.write(u"\u06f8\t\32\2\2\u06f7\u06f4\3\2\2\2\u06f7\u06f8\3\2\2")
        buf.write(u"\2\u06f8\u06f9\3\2\2\2\u06f9\u06fa\7\u03b3\2\2\u06fa")
        buf.write(u"\u06fb\5\u021e\u0110\2\u06fb\u06fc\7\u03b4\2\2\u06fc")
        buf.write(u"\u06fe\3\2\2\2\u06fd\u06e9\3\2\2\2\u06fd\u06f1\3\2\2")
        buf.write(u"\2\u06feg\3\2\2\2\u06ff\u0700\7o\2\2\u0700\u0701\5\u0200")
        buf.write(u"\u0101\2\u0701\u0702\7\u00a3\2\2\u0702\u0703\7\u016f")
        buf.write(u"\2\2\u0703\u0704\7\u0208\2\2\u0704\u0705\7\u03b3\2\2")
        buf.write(u"\u0705\u070a\5j\66\2\u0706\u0707\7\u03b5\2\2\u0707\u0709")
        buf.write(u"\5j\66\2\u0708\u0706\3\2\2\2\u0709\u070c\3\2\2\2\u070a")
        buf.write(u"\u0708\3\2\2\2\u070a\u070b\3\2\2\2\u070b\u070d\3\2\2")
        buf.write(u"\2\u070c\u070a\3\2\2\2\u070d\u0711\7\u03b4\2\2\u070e")
        buf.write(u"\u0710\5p9\2\u070f\u070e\3\2\2\2\u0710\u0713\3\2\2\2")
        buf.write(u"\u0711\u070f\3\2\2\2\u0711\u0712\3\2\2\2\u0712\u071c")
        buf.write(u"\3\2\2\2\u0713\u0711\3\2\2\2\u0714\u0719\5n8\2\u0715")
        buf.write(u"\u0716\7\u03b5\2\2\u0716\u0718\5n8\2\u0717\u0715\3\2")
        buf.write(u"\2\2\u0718\u071b\3\2\2\2\u0719\u0717\3\2\2\2\u0719\u071a")
        buf.write(u"\3\2\2\2\u071a\u071d\3\2\2\2\u071b\u0719\3\2\2\2\u071c")
        buf.write(u"\u0714\3\2\2\2\u071c\u071d\3\2\2\2\u071d\u076d\3\2\2")
        buf.write(u"\2\u071e\u071f\7o\2\2\u071f\u0720\5\u0200\u0101\2\u0720")
        buf.write(u"\u0721\7\u00a3\2\2\u0721\u0722\7D\2\2\u0722\u0723\7\u03b3")
        buf.write(u"\2\2\u0723\u0728\5j\66\2\u0724\u0725\7\u03b5\2\2\u0725")
        buf.write(u"\u0727\5j\66\2\u0726\u0724\3\2\2\2\u0727\u072a\3\2\2")
        buf.write(u"\2\u0728\u0726\3\2\2\2\u0728\u0729\3\2\2\2\u0729\u072b")
        buf.write(u"\3\2\2\2\u072a\u0728\3\2\2\2\u072b\u072f\7\u03b4\2\2")
        buf.write(u"\u072c\u072e\5p9\2\u072d\u072c\3\2\2\2\u072e\u0731\3")
        buf.write(u"\2\2\2\u072f\u072d\3\2\2\2\u072f\u0730\3\2\2\2\u0730")
        buf.write(u"\u073a\3\2\2\2\u0731\u072f\3\2\2\2\u0732\u0737\5n8\2")
        buf.write(u"\u0733\u0734\7\u03b5\2\2\u0734\u0736\5n8\2\u0735\u0733")
        buf.write(u"\3\2\2\2\u0736\u0739\3\2\2\2\u0737\u0735\3\2\2\2\u0737")
        buf.write(u"\u0738\3\2\2\2\u0738\u073b\3\2\2\2\u0739\u0737\3\2\2")
        buf.write(u"\2\u073a\u0732\3\2\2\2\u073a\u073b\3\2\2\2\u073b\u076d")
        buf.write(u"\3\2\2\2\u073c\u073d\7o\2\2\u073d\u073e\5\u0200\u0101")
        buf.write(u"\2\u073e\u073f\7\u00a3\2\2\u073f\u0740\7D\2\2\u0740\u0741")
        buf.write(u"\7\u03b3\2\2\u0741\u0746\5l\67\2\u0742\u0743\7\u03b5")
        buf.write(u"\2\2\u0743\u0745\5l\67\2\u0744\u0742\3\2\2\2\u0745\u0748")
        buf.write(u"\3\2\2\2\u0746\u0744\3\2\2\2\u0746\u0747\3\2\2\2\u0747")
        buf.write(u"\u0749\3\2\2\2\u0748\u0746\3\2\2\2\u0749\u074d\7\u03b4")
        buf.write(u"\2\2\u074a\u074c\5p9\2\u074b\u074a\3\2\2\2\u074c\u074f")
        buf.write(u"\3\2\2\2\u074d\u074b\3\2\2\2\u074d\u074e\3\2\2\2\u074e")
        buf.write(u"\u0758\3\2\2\2\u074f\u074d\3\2\2\2\u0750\u0755\5n8\2")
        buf.write(u"\u0751\u0752\7\u03b5\2\2\u0752\u0754\5n8\2\u0753\u0751")
        buf.write(u"\3\2\2\2\u0754\u0757\3\2\2\2\u0755\u0753\3\2\2\2\u0755")
        buf.write(u"\u0756\3\2\2\2\u0756\u0759\3\2\2\2\u0757\u0755\3\2\2")
        buf.write(u"\2\u0758\u0750\3\2\2\2\u0758\u0759\3\2\2\2\u0759\u076d")
        buf.write(u"\3\2\2\2\u075a\u075b\7o\2\2\u075b\u075f\5\u0200\u0101")
        buf.write(u"\2\u075c\u075e\5p9\2\u075d\u075c\3\2\2\2\u075e\u0761")
        buf.write(u"\3\2\2\2\u075f\u075d\3\2\2\2\u075f\u0760\3\2\2\2\u0760")
        buf.write(u"\u076a\3\2\2\2\u0761\u075f\3\2\2\2\u0762\u0767\5n8\2")
        buf.write(u"\u0763\u0764\7\u03b5\2\2\u0764\u0766\5n8\2\u0765\u0763")
        buf.write(u"\3\2\2\2\u0766\u0769\3\2\2\2\u0767\u0765\3\2\2\2\u0767")
        buf.write(u"\u0768\3\2\2\2\u0768\u076b\3\2\2\2\u0769\u0767\3\2\2")
        buf.write(u"\2\u076a\u0762\3\2\2\2\u076a\u076b\3\2\2\2\u076b\u076d")
        buf.write(u"\3\2\2\2\u076c\u06ff\3\2\2\2\u076c\u071e\3\2\2\2\u076c")
        buf.write(u"\u073c\3\2\2\2\u076c\u075a\3\2\2\2\u076di\3\2\2\2\u076e")
        buf.write(u"\u0772\5\u0212\u010a\2\u076f\u0772\7`\2\2\u0770\u0772")
        buf.write(u"\5\u024c\u0127\2\u0771\u076e\3\2\2\2\u0771\u076f\3\2")
        buf.write(u"\2\2\u0771\u0770\3\2\2\2\u0772k\3\2\2\2\u0773\u0774\7")
        buf.write(u"\u03b3\2\2\u0774\u0777\5j\66\2\u0775\u0776\7\u03b5\2")
        buf.write(u"\2\u0776\u0778\5j\66\2\u0777\u0775\3\2\2\2\u0778\u0779")
        buf.write(u"\3\2\2\2\u0779\u0777\3\2\2\2\u0779\u077a\3\2\2\2\u077a")
        buf.write(u"\u077b\3\2\2\2\u077b\u077c\7\u03b4\2\2\u077cm\3\2\2\2")
        buf.write(u"\u077d\u077e\7\u0200\2\2\u077e\u0782\5\u0200\u0101\2")
        buf.write(u"\u077f\u0781\5p9\2\u0780\u077f\3\2\2\2\u0781\u0784\3")
        buf.write(u"\2\2\2\u0782\u0780\3\2\2\2\u0782\u0783\3\2\2\2\u0783")
        buf.write(u"o\3\2\2\2\u0784\u0782\3\2\2\2\u0785\u0787\7\u01fd\2\2")
        buf.write(u"\u0786\u0785\3\2\2\2\u0786\u0787\3\2\2\2\u0787\u0788")
        buf.write(u"\3\2\2\2\u0788\u078a\7\u0137\2\2\u0789\u078b\7\u03aa")
        buf.write(u"\2\2\u078a\u0789\3\2\2\2\u078a\u078b\3\2\2\2\u078b\u078c")
        buf.write(u"\3\2\2\2\u078c\u07b3\5\u01f6\u00fc\2\u078d\u078f\7\u0116")
        buf.write(u"\2\2\u078e\u0790\7\u03aa\2\2\u078f\u078e\3\2\2\2\u078f")
        buf.write(u"\u0790\3\2\2\2\u0790\u0791\3\2\2\2\u0791\u07b3\7\u03c2")
        buf.write(u"\2\2\u0792\u0793\7\u0124\2\2\u0793\u0795\7\u012b\2\2")
        buf.write(u"\u0794\u0796\7\u03aa\2\2\u0795\u0794\3\2\2\2\u0795\u0796")
        buf.write(u"\3\2\2\2\u0796\u0797\3\2\2\2\u0797\u07b3\7\u03c2\2\2")
        buf.write(u"\u0798\u0799\7E\2\2\u0799\u079b\7\u012b\2\2\u079a\u079c")
        buf.write(u"\7\u03aa\2\2\u079b\u079a\3\2\2\2\u079b\u079c\3\2\2\2")
        buf.write(u"\u079c\u079d\3\2\2\2\u079d\u07b3\7\u03c2\2\2\u079e\u07a0")
        buf.write(u"\7\u018c\2\2\u079f\u07a1\7\u03aa\2\2\u07a0\u079f\3\2")
        buf.write(u"\2\2\u07a0\u07a1\3\2\2\2\u07a1\u07a2\3\2\2\2\u07a2\u07b3")
        buf.write(u"\5\u0206\u0104\2\u07a3\u07a5\7\u0194\2\2\u07a4\u07a6")
        buf.write(u"\7\u03aa\2\2\u07a5\u07a4\3\2\2\2\u07a5\u07a6\3\2\2\2")
        buf.write(u"\u07a6\u07a7\3\2\2\2\u07a7\u07b3\5\u0206\u0104\2\u07a8")
        buf.write(u"\u07aa\7\u0205\2\2\u07a9\u07ab\7\u03aa\2\2\u07aa\u07a9")
        buf.write(u"\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\3\2\2\2\u07ac")
        buf.write(u"\u07b3\5\u0200\u0101\2\u07ad\u07af\7\u019f\2\2\u07ae")
        buf.write(u"\u07b0\7\u03aa\2\2\u07af\u07ae\3\2\2\2\u07af\u07b0\3")
        buf.write(u"\2\2\2\u07b0\u07b1\3\2\2\2\u07b1\u07b3\5\u0200\u0101")
        buf.write(u"\2\u07b2\u0786\3\2\2\2\u07b2\u078d\3\2\2\2\u07b2\u0792")
        buf.write(u"\3\2\2\2\u07b2\u0798\3\2\2\2\u07b2\u079e\3\2\2\2\u07b2")
        buf.write(u"\u07a3\3\2\2\2\u07b2\u07a8\3\2\2\2\u07b2\u07ad\3\2\2")
        buf.write(u"\2\u07b3q\3\2\2\2\u07b4\u07b5\7\t\2\2\u07b5\u07b7\t\2")
        buf.write(u"\2\2\u07b6\u07b8\5\u0200\u0101\2\u07b7\u07b6\3\2\2\2")
        buf.write(u"\u07b7\u07b8\3\2\2\2\u07b8\u07ba\3\2\2\2\u07b9\u07bb")
        buf.write(u"\5\62\32\2\u07ba\u07b9\3\2\2\2\u07bb\u07bc\3\2\2\2\u07bc")
        buf.write(u"\u07ba\3\2\2\2\u07bc\u07bd\3\2\2\2\u07bd\u07c7\3\2\2")
        buf.write(u"\2\u07be\u07bf\7\t\2\2\u07bf\u07c0\t\2\2\2\u07c0\u07c1")
        buf.write(u"\5\u0200\u0101\2\u07c1\u07c2\7\u0213\2\2\u07c2\u07c3")
        buf.write(u"\7\u0124\2\2\u07c3\u07c4\7\u012b\2\2\u07c4\u07c5\7\u0199")
        buf.write(u"\2\2\u07c5\u07c7\3\2\2\2\u07c6\u07b4\3\2\2\2\u07c6\u07be")
        buf.write(u"\3\2\2\2\u07c7s\3\2\2\2\u07c8\u07ca\7\t\2\2\u07c9\u07cb")
        buf.write(u"\5\64\33\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb\3\2\2\2\u07cb")
        buf.write(u"\u07cc\3\2\2\2\u07cc\u07cd\7\u013d\2\2\u07cd\u07d1\5")
        buf.write(u"\u01e6\u00f4\2\u07ce\u07cf\7f\2\2\u07cf\u07d0\7\u01df")
        buf.write(u"\2\2\u07d0\u07d2\5\66\34\2\u07d1\u07ce\3\2\2\2\u07d1")
        buf.write(u"\u07d2\3\2\2\2\u07d2\u07d9\3\2\2\2\u07d3\u07d4\7f\2\2")
        buf.write(u"\u07d4\u07d6\7\u0119\2\2\u07d5\u07d7\7c\2\2\u07d6\u07d5")
        buf.write(u"\3\2\2\2\u07d6\u07d7\3\2\2\2\u07d7\u07d8\3\2\2\2\u07d8")
        buf.write(u"\u07da\7\u01ba\2\2\u07d9\u07d3\3\2\2\2\u07d9\u07da\3")
        buf.write(u"\2\2\2\u07da\u07de\3\2\2\2\u07db\u07dc\7y\2\2\u07dc\u07dd")
        buf.write(u"\7\u0096\2\2\u07dd\u07df\5\u01e6\u00f4\2\u07de\u07db")
        buf.write(u"\3\2\2\2\u07de\u07df\3\2\2\2\u07df\u07e1\3\2\2\2\u07e0")
        buf.write(u"\u07e2\5> \2\u07e1\u07e0\3\2\2\2\u07e1\u07e2\3\2\2\2")
        buf.write(u"\u07e2\u07e5\3\2\2\2\u07e3\u07e4\7\u0116\2\2\u07e4\u07e6")
        buf.write(u"\7\u03c2\2\2\u07e5\u07e3\3\2\2\2\u07e5\u07e6\3\2\2\2")
        buf.write(u"\u07e6\u07e9\3\2\2\2\u07e7\u07e8\7\u012f\2\2\u07e8\u07ea")
        buf.write(u"\5\u0158\u00ad\2\u07e9\u07e7\3\2\2\2\u07e9\u07ea\3\2")
        buf.write(u"\2\2\u07eau\3\2\2\2\u07eb\u07ec\7\t\2\2\u07ec\u07ed\7")
        buf.write(u"\u0151\2\2\u07ed\u07f1\5\u01e6\u00f4\2\u07ee\u07f0\5")
        buf.write(u"H%\2\u07ef\u07ee\3\2\2\2\u07f0\u07f3\3\2\2\2\u07f1\u07ef")
        buf.write(u"\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2w\3\2\2\2\u07f3\u07f1")
        buf.write(u"\3\2\2\2\u07f4\u07f5\7\t\2\2\u07f5\u07f6\7\u0163\2\2")
        buf.write(u"\u07f6\u07f7\7\u01da\2\2\u07f7\u07f8\7\u0265\2\2\u07f8")
        buf.write(u"\u07f9\7\u0175\2\2\u07f9\u07fa\7O\2\2\u07fay\3\2\2\2")
        buf.write(u"\u07fb\u07fc\7\t\2\2\u07fc\u07fd\7\u0173\2\2\u07fd\u07fe")
        buf.write(u"\7?\2\2\u07fe\u07ff\5\u0200\u0101\2\u07ff\u0800\7\7\2")
        buf.write(u"\2\u0800\u0801\7\u020e\2\2\u0801\u0807\7\u03c2\2\2\u0802")
        buf.write(u"\u0804\7\u015f\2\2\u0803\u0805\7\u03aa\2\2\u0804\u0803")
        buf.write(u"\3\2\2\2\u0804\u0805\3\2\2\2\u0805\u0806\3\2\2\2\u0806")
        buf.write(u"\u0808\5\u0208\u0105\2\u0807\u0802\3\2\2\2\u0807\u0808")
        buf.write(u"\3\2\2\2\u0808\u080a\3\2\2\2\u0809\u080b\7\u021b\2\2")
        buf.write(u"\u080a\u0809\3\2\2\2\u080a\u080b\3\2\2\2\u080b\u080c")
        buf.write(u"\3\2\2\2\u080c\u080e\7\u0137\2\2\u080d\u080f\7\u03aa")
        buf.write(u"\2\2\u080e\u080d\3\2\2\2\u080e\u080f\3\2\2\2\u080f\u0810")
        buf.write(u"\3\2\2\2\u0810\u0811\5\u01f6\u00fc\2\u0811{\3\2\2\2\u0812")
        buf.write(u"\u0813\7\t\2\2\u0813\u0814\7q\2\2\u0814\u0818\5\u01e6")
        buf.write(u"\u00f4\2\u0815\u0817\5H%\2\u0816\u0815\3\2\2\2\u0817")
        buf.write(u"\u081a\3\2\2\2\u0818\u0816\3\2\2\2\u0818\u0819\3\2\2")
        buf.write(u"\2\u0819}\3\2\2\2\u081a\u0818\3\2\2\2\u081b\u081c\7\t")
        buf.write(u"\2\2\u081c\u081d\7\u01e1\2\2\u081d\u081e\5\u0200\u0101")
        buf.write(u"\2\u081e\u081f\7\u01aa\2\2\u081f\u0820\7\u03b3\2\2\u0820")
        buf.write(u"\u0825\5J&\2\u0821\u0822\7\u03b5\2\2\u0822\u0824\5J&")
        buf.write(u"\2\u0823\u0821\3\2\2\2\u0824\u0827\3\2\2\2\u0825\u0823")
        buf.write(u"\3\2\2\2\u0825\u0826\3\2\2\2\u0826\u0828\3\2\2\2\u0827")
        buf.write(u"\u0825\3\2\2\2\u0828\u0829\7\u03b4\2\2\u0829\177\3\2")
        buf.write(u"\2\2\u082a\u082c\7\t\2\2\u082b\u082d\t\3\2\2\u082c\u082b")
        buf.write(u"\3\2\2\2\u082c\u082d\3\2\2\2\u082d\u082f\3\2\2\2\u082e")
        buf.write(u"\u0830\7C\2\2\u082f\u082e\3\2\2\2\u082f\u0830\3\2\2\2")
        buf.write(u"\u0830\u0831\3\2\2\2\u0831\u0832\7\u0093\2\2\u0832\u0833")
        buf.write(u"\5\u01e8\u00f5\2\u0833\u0838\5\u0086D\2\u0834\u0835\7")
        buf.write(u"\u03b5\2\2\u0835\u0837\5\u0086D\2\u0836\u0834\3\2\2\2")
        buf.write(u"\u0837\u083a\3\2\2\2\u0838\u0836\3\2\2\2\u0838\u0839")
        buf.write(u"\3\2\2\2\u0839\u083c\3\2\2\2\u083a\u0838\3\2\2\2\u083b")
        buf.write(u"\u083d\5b\62\2\u083c\u083b\3\2\2\2\u083c\u083d\3\2\2")
        buf.write(u"\2\u083d\u0081\3\2\2\2\u083e\u083f\7\t\2\2\u083f\u0840")
        buf.write(u"\7\u0205\2\2\u0840\u0841\5\u0200\u0101\2\u0841\u0842")
        buf.write(u"\t\33\2\2\u0842\u0843\7\u0125\2\2\u0843\u0847\7\u03c2")
        buf.write(u"\2\2\u0844\u0845\7\u015f\2\2\u0845\u0846\7\u03aa\2\2")
        buf.write(u"\u0846\u0848\5\u0208\u0105\2\u0847\u0844\3\2\2\2\u0847")
        buf.write(u"\u0848\3\2\2\2\u0848\u084a\3\2\2\2\u0849\u084b\7\u021b")
        buf.write(u"\2\2\u084a\u0849\3\2\2\2\u084a\u084b\3\2\2\2\u084b\u084c")
        buf.write(u"\3\2\2\2\u084c\u084e\7\u0137\2\2\u084d\u084f\7\u03aa")
        buf.write(u"\2\2\u084e\u084d\3\2\2\2\u084e\u084f\3\2\2\2\u084f\u0850")
        buf.write(u"\3\2\2\2\u0850\u0851\5\u01f6\u00fc\2\u0851\u0083\3\2")
        buf.write(u"\2\2\u0852\u0856\7\t\2\2\u0853\u0854\7\u00fa\2\2\u0854")
        buf.write(u"\u0855\7\u03aa\2\2\u0855\u0857\t\f\2\2\u0856\u0853\3")
        buf.write(u"\2\2\2\u0856\u0857\3\2\2\2\u0857\u0859\3\2\2\2\u0858")
        buf.write(u"\u085a\5\64\33\2\u0859\u0858\3\2\2\2\u0859\u085a\3\2")
        buf.write(u"\2\2\u085a\u085e\3\2\2\2\u085b\u085c\7\u0089\2\2\u085c")
        buf.write(u"\u085d\7\u01e0\2\2\u085d\u085f\t\r\2\2\u085e\u085b\3")
        buf.write(u"\2\2\2\u085e\u085f\3\2\2\2\u085f\u0860\3\2\2\2\u0860")
        buf.write(u"\u0861\7\u021a\2\2\u0861\u0866\5\u01e6\u00f4\2\u0862")
        buf.write(u"\u0863\7\u03b3\2\2\u0863\u0864\5\u021e\u0110\2\u0864")
        buf.write(u"\u0865\7\u03b4\2\2\u0865\u0867\3\2\2\2\u0866\u0862\3")
        buf.write(u"\2\2\2\u0866\u0867\3\2\2\2\u0867\u0868\3\2\2\2\u0868")
        buf.write(u"\u0869\7\f\2\2\u0869\u0870\5\u00b4[\2\u086a\u086c\7\u00a7")
        buf.write(u"\2\2\u086b\u086d\t\16\2\2\u086c\u086b\3\2\2\2\u086c\u086d")
        buf.write(u"\3\2\2\2\u086d\u086e\3\2\2\2\u086e\u086f\7\30\2\2\u086f")
        buf.write(u"\u0871\7h\2\2\u0870\u086a\3\2\2\2\u0870\u0871\3\2\2\2")
        buf.write(u"\u0871\u0085\3\2\2\2\u0872\u09bd\5^\60\2\u0873\u0875")
        buf.write(u"\7\7\2\2\u0874\u0876\7\32\2\2\u0875\u0874\3\2\2\2\u0875")
        buf.write(u"\u0876\3\2\2\2\u0876\u0877\3\2\2\2\u0877\u0878\5\u0200")
        buf.write(u"\u0101\2\u0878\u087c\5P)\2\u0879\u087d\7\u014b\2\2\u087a")
        buf.write(u"\u087b\7\u00f8\2\2\u087b\u087d\5\u0200\u0101\2\u087c")
        buf.write(u"\u0879\3\2\2\2\u087c\u087a\3\2\2\2\u087c\u087d\3\2\2")
        buf.write(u"\2\u087d\u09bd\3\2\2\2\u087e\u0880\7\7\2\2\u087f\u0881")
        buf.write(u"\7\32\2\2\u0880\u087f\3\2\2\2\u0880\u0881\3\2\2\2\u0881")
        buf.write(u"\u0882\3\2\2\2\u0882\u0883\7\u03b3\2\2\u0883\u0884\5")
        buf.write(u"\u0200\u0101\2\u0884\u088b\5P)\2\u0885\u0886\7\u03b5")
        buf.write(u"\2\2\u0886\u0887\5\u0200\u0101\2\u0887\u0888\5P)\2\u0888")
        buf.write(u"\u088a\3\2\2\2\u0889\u0885\3\2\2\2\u088a\u088d\3\2\2")
        buf.write(u"\2\u088b\u0889\3\2\2\2\u088b\u088c\3\2\2\2\u088c\u088e")
        buf.write(u"\3\2\2\2\u088d\u088b\3\2\2\2\u088e\u088f\7\u03b4\2\2")
        buf.write(u"\u088f\u09bd\3\2\2\2\u0890\u0891\7\7\2\2\u0891\u0893")
        buf.write(u"\t\23\2\2\u0892\u0894\5\u0200\u0101\2\u0893\u0892\3\2")
        buf.write(u"\2\2\u0893\u0894\3\2\2\2\u0894\u0896\3\2\2\2\u0895\u0897")
        buf.write(u"\5@!\2\u0896\u0895\3\2\2\2\u0896\u0897\3\2\2\2\u0897")
        buf.write(u"\u0898\3\2\2\2\u0898\u089c\5\u0222\u0112\2\u0899\u089b")
        buf.write(u"\5B\"\2\u089a\u0899\3\2\2\2\u089b\u089e\3\2\2\2\u089c")
        buf.write(u"\u089a\3\2\2\2\u089c\u089d\3\2\2\2\u089d\u09bd\3\2\2")
        buf.write(u"\2\u089e\u089c\3\2\2\2\u089f\u08a4\7\7\2\2\u08a0\u08a2")
        buf.write(u"\7\34\2\2\u08a1\u08a3\5\u0200\u0101\2\u08a2\u08a1\3\2")
        buf.write(u"\2\2\u08a2\u08a3\3\2\2\2\u08a3\u08a5\3\2\2\2\u08a4\u08a0")
        buf.write(u"\3\2\2\2\u08a4\u08a5\3\2\2\2\u08a5\u08a6\3\2\2\2\u08a6")
        buf.write(u"\u08a7\7p\2\2\u08a7\u08a9\7O\2\2\u08a8\u08aa\5@!\2\u08a9")
        buf.write(u"\u08a8\3\2\2\2\u08a9\u08aa\3\2\2\2\u08aa\u08ab\3\2\2")
        buf.write(u"\2\u08ab\u08af\5\u0222\u0112\2\u08ac\u08ae\5B\"\2\u08ad")
        buf.write(u"\u08ac\3\2\2\2\u08ae\u08b1\3\2\2\2\u08af\u08ad\3\2\2")
        buf.write(u"\2\u08af\u08b0\3\2\2\2\u08b0\u09bd\3\2\2\2\u08b1\u08af")
        buf.write(u"\3\2\2\2\u08b2\u08b7\7\7\2\2\u08b3\u08b5\7\34\2\2\u08b4")
        buf.write(u"\u08b6\5\u0200\u0101\2\u08b5\u08b4\3\2\2\2\u08b5\u08b6")
        buf.write(u"\3\2\2\2\u08b6\u08b8\3\2\2\2\u08b7\u08b3\3\2\2\2\u08b7")
        buf.write(u"\u08b8\3\2\2\2\u08b8\u08b9\3\2\2\2\u08b9\u08bb\7\u009c")
        buf.write(u"\2\2\u08ba\u08bc\t\23\2\2\u08bb\u08ba\3\2\2\2\u08bb\u08bc")
        buf.write(u"\3\2\2\2\u08bc\u08be\3\2\2\2\u08bd\u08bf\5\u0200\u0101")
        buf.write(u"\2\u08be\u08bd\3\2\2\2\u08be\u08bf\3\2\2\2\u08bf\u08c1")
        buf.write(u"\3\2\2\2\u08c0\u08c2\5@!\2\u08c1\u08c0\3\2\2\2\u08c1")
        buf.write(u"\u08c2\3\2\2\2\u08c2\u08c3\3\2\2\2\u08c3\u08c7\5\u0222")
        buf.write(u"\u0112\2\u08c4\u08c6\5B\"\2\u08c5\u08c4\3\2\2\2\u08c6")
        buf.write(u"\u08c9\3\2\2\2\u08c7\u08c5\3\2\2\2\u08c7\u08c8\3\2\2")
        buf.write(u"\2\u08c8\u09bd\3\2\2\2\u08c9\u08c7\3\2\2\2\u08ca\u08cb")
        buf.write(u"\7\7\2\2\u08cb\u08cd\t\25\2\2\u08cc\u08ce\t\23\2\2\u08cd")
        buf.write(u"\u08cc\3\2\2\2\u08cd\u08ce\3\2\2\2\u08ce\u08d0\3\2\2")
        buf.write(u"\2\u08cf\u08d1\5\u0200\u0101\2\u08d0\u08cf\3\2\2\2\u08d0")
        buf.write(u"\u08d1\3\2\2\2\u08d1\u08d2\3\2\2\2\u08d2\u08d6\5\u0222")
        buf.write(u"\u0112\2\u08d3\u08d5\5B\"\2\u08d4\u08d3\3\2\2\2\u08d5")
        buf.write(u"\u08d8\3\2\2\2\u08d6\u08d4\3\2\2\2\u08d6\u08d7\3\2\2")
        buf.write(u"\2\u08d7\u09bd\3\2\2\2\u08d8\u08d6\3\2\2\2\u08d9\u08de")
        buf.write(u"\7\7\2\2\u08da\u08dc\7\34\2\2\u08db\u08dd\5\u0200\u0101")
        buf.write(u"\2\u08dc\u08db\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd\u08df")
        buf.write(u"\3\2\2\2\u08de\u08da\3\2\2\2\u08de\u08df\3\2\2\2\u08df")
        buf.write(u"\u08e0\3\2\2\2\u08e0\u08e1\7;\2\2\u08e1\u08e3\7O\2\2")
        buf.write(u"\u08e2\u08e4\5\u0200\u0101\2\u08e3\u08e2\3\2\2\2\u08e3")
        buf.write(u"\u08e4\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\5\u0222")
        buf.write(u"\u0112\2\u08e6\u08e7\5V,\2\u08e7\u09bd\3\2\2\2\u08e8")
        buf.write(u"\u08ed\7\7\2\2\u08e9\u08eb\7\34\2\2\u08ea\u08ec\5\u0200")
        buf.write(u"\u0101\2\u08eb\u08ea\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec")
        buf.write(u"\u08ee\3\2\2\2\u08ed\u08e9\3\2\2\2\u08ed\u08ee\3\2\2")
        buf.write(u"\2\u08ee\u08ef\3\2\2\2\u08ef\u08f0\7\30\2\2\u08f0\u08f1")
        buf.write(u"\7\u03b3\2\2\u08f1\u08f2\5\u024c\u0127\2\u08f2\u08f3")
        buf.write(u"\7\u03b4\2\2\u08f3\u09bd\3\2\2\2\u08f4\u08f6\7\u00fa")
        buf.write(u"\2\2\u08f5\u08f7\7\u03aa\2\2\u08f6\u08f5\3\2\2\2\u08f6")
        buf.write(u"\u08f7\3\2\2\2\u08f7\u08f8\3\2\2\2\u08f8\u09bd\t\5\2")
        buf.write(u"\2\u08f9\u08fb\7\t\2\2\u08fa\u08fc\7\32\2\2\u08fb\u08fa")
        buf.write(u"\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fd\3\2\2\2\u08fd")
        buf.write(u"\u0903\5\u0200\u0101\2\u08fe\u08ff\7\u0085\2\2\u08ff")
        buf.write(u"\u0900\7&\2\2\u0900\u0904\5\u022e\u0118\2\u0901\u0902")
        buf.write(u"\7.\2\2\u0902\u0904\7&\2\2\u0903\u08fe\3\2\2\2\u0903")
        buf.write(u"\u0901\3\2\2\2\u0904\u09bd\3\2\2\2\u0905\u0907\7\26\2")
        buf.write(u"\2\u0906\u0908\7\32\2\2\u0907\u0906\3\2\2\2\u0907\u0908")
        buf.write(u"\3\2\2\2\u0908\u0909\3\2\2\2\u0909\u090a\5\u0200\u0101")
        buf.write(u"\2\u090a\u090b\5\u0200\u0101\2\u090b\u090f\5P)\2\u090c")
        buf.write(u"\u0910\7\u014b\2\2\u090d\u090e\7\u00f8\2\2\u090e\u0910")
        buf.write(u"\5\u0200\u0101\2\u090f\u090c\3\2\2\2\u090f\u090d\3\2")
        buf.write(u"\2\2\u090f\u0910\3\2\2\2\u0910\u09bd\3\2\2\2\u0911\u0912")
        buf.write(u"\7y\2\2\u0912\u0913\7\32\2\2\u0913\u0914\5\u0200\u0101")
        buf.write(u"\2\u0914\u0915\7\u0096\2\2\u0915\u0916\5\u0200\u0101")
        buf.write(u"\2\u0916\u09bd\3\2\2\2\u0917\u0919\7Z\2\2\u0918\u091a")
        buf.write(u"\7\u03aa\2\2\u0919\u0918\3\2\2\2\u0919\u091a\3\2\2\2")
        buf.write(u"\u091a\u091b\3\2\2\2\u091b\u09bd\t\6\2\2\u091c\u091e")
        buf.write(u"\7\u0196\2\2\u091d\u091f\7\32\2\2\u091e\u091d\3\2\2\2")
        buf.write(u"\u091e\u091f\3\2\2\2\u091f\u0920\3\2\2\2\u0920\u0921")
        buf.write(u"\5\u0200\u0101\2\u0921\u0925\5P)\2\u0922\u0926\7\u014b")
        buf.write(u"\2\2\u0923\u0924\7\u00f8\2\2\u0924\u0926\5\u0200\u0101")
        buf.write(u"\2\u0925\u0922\3\2\2\2\u0925\u0923\3\2\2\2\u0925\u0926")
        buf.write(u"\3\2\2\2\u0926\u09bd\3\2\2\2\u0927\u0929\7.\2\2\u0928")
        buf.write(u"\u092a\7\32\2\2\u0929\u0928\3\2\2\2\u0929\u092a\3\2\2")
        buf.write(u"\2\u092a\u092b\3\2\2\2\u092b\u09bd\5\u0200\u0101\2\u092c")
        buf.write(u"\u092d\7.\2\2\u092d\u092e\7p\2\2\u092e\u09bd\7O\2\2\u092f")
        buf.write(u"\u0930\7.\2\2\u0930\u0931\t\23\2\2\u0931\u09bd\5\u0200")
        buf.write(u"\u0101\2\u0932\u0933\7.\2\2\u0933\u0934\7;\2\2\u0934")
        buf.write(u"\u0935\7O\2\2\u0935\u09bd\5\u0200\u0101\2\u0936\u0937")
        buf.write(u"\7\u012c\2\2\u0937\u09bd\7P\2\2\u0938\u0939\7\u0133\2")
        buf.write(u"\2\u0939\u09bd\7P\2\2\u093a\u093c\7y\2\2\u093b\u093d")
        buf.write(u"\t\34\2\2\u093c\u093b\3\2\2\2\u093c\u093d\3\2\2\2\u093d")
        buf.write(u"\u0940\3\2\2\2\u093e\u0941\5\u0200\u0101\2\u093f\u0941")
        buf.write(u"\5\u01e6\u00f4\2\u0940\u093e\3\2\2\2\u0940\u093f\3\2")
        buf.write(u"\2\2\u0941\u09bd\3\2\2\2\u0942\u0943\7k\2\2\u0943\u0944")
        buf.write(u"\7\21\2\2\u0944\u09bd\5\u021e\u0110\2\u0945\u0946\7\36")
        buf.write(u"\2\2\u0946\u0947\7\u0096\2\2\u0947\u0948\7\27\2\2\u0948")
        buf.write(u"\u0949\7\u0085\2\2\u0949\u094c\5\u01f2\u00fa\2\u094a")
        buf.write(u"\u094b\7\31\2\2\u094b\u094d\5\u01f4\u00fb\2\u094c\u094a")
        buf.write(u"\3\2\2\2\u094c\u094d\3\2\2\2\u094d\u09bd\3\2\2\2\u094e")
        buf.write(u"\u0950\7&\2\2\u094f\u094e\3\2\2\2\u094f\u0950\3\2\2\2")
        buf.write(u"\u0950\u0951\3\2\2\2\u0951\u0952\7\27\2\2\u0952\u0953")
        buf.write(u"\7\u0085\2\2\u0953\u0954\7\u03aa\2\2\u0954\u0958\5\u01f2")
        buf.write(u"\u00fa\2\u0955\u0956\7\31\2\2\u0956\u0957\7\u03aa\2\2")
        buf.write(u"\u0957\u0959\5\u01f4\u00fb\2\u0958\u0955\3\2\2\2\u0958")
        buf.write(u"\u0959\3\2\2\2\u0959\u09bd\3\2\2\2\u095a\u095b\7\u012d")
        buf.write(u"\2\2\u095b\u09bd\7\u0205\2\2\u095c\u095d\7\u015d\2\2")
        buf.write(u"\u095d\u09bd\7\u0205\2\2\u095e\u09bd\7:\2\2\u095f\u0960")
        buf.write(u"\t\35\2\2\u0960\u09bd\7\u0217\2\2\u0961\u0962\7\7\2\2")
        buf.write(u"\u0962\u0963\7o\2\2\u0963\u0964\7\u03b3\2\2\u0964\u0965")
        buf.write(u"\5h\65\2\u0965\u0966\7\u03b4\2\2\u0966\u09bd\3\2\2\2")
        buf.write(u"\u0967\u0968\7.\2\2\u0968\u0969\7o\2\2\u0969\u09bd\5")
        buf.write(u"\u021e\u0110\2\u096a\u096b\7\u012d\2\2\u096b\u096e\7")
        buf.write(u"o\2\2\u096c\u096f\5\u021e\u0110\2\u096d\u096f\7\b\2\2")
        buf.write(u"\u096e\u096c\3\2\2\2\u096e\u096d\3\2\2\2\u096f\u0970")
        buf.write(u"\3\2\2\2\u0970\u09bd\7\u0205\2\2\u0971\u0972\7\u015d")
        buf.write(u"\2\2\u0972\u0975\7o\2\2\u0973\u0976\5\u021e\u0110\2\u0974")
        buf.write(u"\u0976\7\b\2\2\u0975\u0973\3\2\2\2\u0975\u0974\3\2\2")
        buf.write(u"\2\u0976\u0977\3\2\2\2\u0977\u09bd\7\u0205\2\2\u0978")
        buf.write(u"\u0979\7\u020c\2\2\u0979\u097c\7o\2\2\u097a\u097d\5\u021e")
        buf.write(u"\u0110\2\u097b\u097d\7\b\2\2\u097c\u097a\3\2\2\2\u097c")
        buf.write(u"\u097b\3\2\2\2\u097d\u09bd\3\2\2\2\u097e\u097f\7\u0112")
        buf.write(u"\2\2\u097f\u0980\7o\2\2\u0980\u09bd\5\u0206\u0104\2\u0981")
        buf.write(u"\u0982\7\u01cb\2\2\u0982\u0983\7o\2\2\u0983\u0984\5\u021e")
        buf.write(u"\u0110\2\u0984\u0985\7K\2\2\u0985\u0986\7\u03b3\2\2\u0986")
        buf.write(u"\u098b\5h\65\2\u0987\u0988\7\u03b5\2\2\u0988\u098a\5")
        buf.write(u"h\65\2\u0989\u0987\3\2\2\2\u098a\u098d\3\2\2\2\u098b")
        buf.write(u"\u0989\3\2\2\2\u098b\u098c\3\2\2\2\u098c\u098e\3\2\2")
        buf.write(u"\2\u098d\u098b\3\2\2\2\u098e\u098f\7\u03b4\2\2\u098f")
        buf.write(u"\u09bd\3\2\2\2\u0990\u0991\7\u0140\2\2\u0991\u0992\7")
        buf.write(u"o\2\2\u0992\u0993\5\u0200\u0101\2\u0993\u0994\7\u00a7")
        buf.write(u"\2\2\u0994\u0995\7\u0093\2\2\u0995\u0998\5\u01e8\u00f5")
        buf.write(u"\2\u0996\u0997\t\35\2\2\u0997\u0999\7\u0217\2\2\u0998")
        buf.write(u"\u0996\3\2\2\2\u0998\u0999\3\2\2\2\u0999\u09bd\3\2\2")
        buf.write(u"\2\u099a\u099b\7\n\2\2\u099b\u099e\7o\2\2\u099c\u099f")
        buf.write(u"\5\u021e\u0110\2\u099d\u099f\7\b\2\2\u099e\u099c\3\2")
        buf.write(u"\2\2\u099e\u099d\3\2\2\2\u099f\u09bd\3\2\2\2\u09a0\u09a1")
        buf.write(u"\7\30\2\2\u09a1\u09a4\7o\2\2\u09a2\u09a5\5\u021e\u0110")
        buf.write(u"\2\u09a3\u09a5\7\b\2\2\u09a4\u09a2\3\2\2\2\u09a4\u09a3")
        buf.write(u"\3\2\2\2\u09a5\u09bd\3\2\2\2\u09a6\u09a7\7g\2\2\u09a7")
        buf.write(u"\u09aa\7o\2\2\u09a8\u09ab\5\u021e\u0110\2\u09a9\u09ab")
        buf.write(u"\7\b\2\2\u09aa\u09a8\3\2\2\2\u09aa\u09a9\3\2\2\2\u09ab")
        buf.write(u"\u09bd\3\2\2\2\u09ac\u09ad\7\u01c2\2\2\u09ad\u09b0\7")
        buf.write(u"o\2\2\u09ae\u09b1\5\u021e\u0110\2\u09af\u09b1\7\b\2\2")
        buf.write(u"\u09b0\u09ae\3\2\2\2\u09b0\u09af\3\2\2\2\u09b1\u09bd")
        buf.write(u"\3\2\2\2\u09b2\u09b3\7\u01cc\2\2\u09b3\u09b6\7o\2\2\u09b4")
        buf.write(u"\u09b7\5\u021e\u0110\2\u09b5\u09b7\7\b\2\2\u09b6\u09b4")
        buf.write(u"\3\2\2\2\u09b6\u09b5\3\2\2\2\u09b7\u09bd\3\2\2\2\u09b8")
        buf.write(u"\u09b9\7\u01ca\2\2\u09b9\u09bd\7\u01b0\2\2\u09ba\u09bb")
        buf.write(u"\7\u0213\2\2\u09bb\u09bd\7\u01b0\2\2\u09bc\u0872\3\2")
        buf.write(u"\2\2\u09bc\u0873\3\2\2\2\u09bc\u087e\3\2\2\2\u09bc\u0890")
        buf.write(u"\3\2\2\2\u09bc\u089f\3\2\2\2\u09bc\u08b2\3\2\2\2\u09bc")
        buf.write(u"\u08ca\3\2\2\2\u09bc\u08d9\3\2\2\2\u09bc\u08e8\3\2\2")
        buf.write(u"\2\u09bc\u08f4\3\2\2\2\u09bc\u08f9\3\2\2\2\u09bc\u0905")
        buf.write(u"\3\2\2\2\u09bc\u0911\3\2\2\2\u09bc\u0917\3\2\2\2\u09bc")
        buf.write(u"\u091c\3\2\2\2\u09bc\u0927\3\2\2\2\u09bc\u092c\3\2\2")
        buf.write(u"\2\u09bc\u092f\3\2\2\2\u09bc\u0932\3\2\2\2\u09bc\u0936")
        buf.write(u"\3\2\2\2\u09bc\u0938\3\2\2\2\u09bc\u093a\3\2\2\2\u09bc")
        buf.write(u"\u0942\3\2\2\2\u09bc\u0945\3\2\2\2\u09bc\u094f\3\2\2")
        buf.write(u"\2\u09bc\u095a\3\2\2\2\u09bc\u095c\3\2\2\2\u09bc\u095e")
        buf.write(u"\3\2\2\2\u09bc\u095f\3\2\2\2\u09bc\u0961\3\2\2\2\u09bc")
        buf.write(u"\u0967\3\2\2\2\u09bc\u096a\3\2\2\2\u09bc\u0971\3\2\2")
        buf.write(u"\2\u09bc\u0978\3\2\2\2\u09bc\u097e\3\2\2\2\u09bc\u0981")
        buf.write(u"\3\2\2\2\u09bc\u0990\3\2\2\2\u09bc\u099a\3\2\2\2\u09bc")
        buf.write(u"\u09a0\3\2\2\2\u09bc\u09a6\3\2\2\2\u09bc\u09ac\3\2\2")
        buf.write(u"\2\u09bc\u09b2\3\2\2\2\u09bc\u09b8\3\2\2\2\u09bc\u09ba")
        buf.write(u"\3\2\2\2\u09bd\u0087\3\2\2\2\u09be\u09bf\7.\2\2\u09bf")
        buf.write(u"\u09c1\t\2\2\2\u09c0\u09c2\5\u0234\u011b\2\u09c1\u09c0")
        buf.write(u"\3\2\2\2\u09c1\u09c2\3\2\2\2\u09c2\u09c3\3\2\2\2\u09c3")
        buf.write(u"\u09c4\5\u0200\u0101\2\u09c4\u0089\3\2\2\2\u09c5\u09c6")
        buf.write(u"\7.\2\2\u09c6\u09c8\7\u013d\2\2\u09c7\u09c9\5\u0234\u011b")
        buf.write(u"\2\u09c8\u09c7\3\2\2\2\u09c8\u09c9\3\2\2\2\u09c9\u09ca")
        buf.write(u"\3\2\2\2\u09ca\u09cb\5\u01e6\u00f4\2\u09cb\u008b\3\2")
        buf.write(u"\2\2\u09cc\u09cd\7.\2\2\u09cd\u09cf\7E\2\2\u09ce\u09d0")
        buf.write(u"\t\3\2\2\u09cf\u09ce\3\2\2\2\u09cf\u09d0\3\2\2\2\u09d0")
        buf.write(u"\u09d1\3\2\2\2\u09d1\u09d2\5\u0200\u0101\2\u09d2\u09d3")
        buf.write(u"\7f\2\2\u09d3\u09d9\5\u01e8\u00f5\2\u09d4\u09d6\7\u00fa")
        buf.write(u"\2\2\u09d5\u09d7\7\u03aa\2\2\u09d6\u09d5\3\2\2\2\u09d6")
        buf.write(u"\u09d7\3\2\2\2\u09d7\u09d8\3\2\2\2\u09d8\u09da\t\5\2")
        buf.write(u"\2\u09d9\u09d4\3\2\2\2\u09d9\u09da\3\2\2\2\u09da\u09e0")
        buf.write(u"\3\2\2\2\u09db\u09dd\7Z\2\2\u09dc\u09de\7\u03aa\2\2\u09dd")
        buf.write(u"\u09dc\3\2\2\2\u09dd\u09de\3\2\2\2\u09de\u09df\3\2\2")
        buf.write(u"\2\u09df\u09e1\t\6\2\2\u09e0\u09db\3\2\2\2\u09e0\u09e1")
        buf.write(u"\3\2\2\2\u09e1\u008d\3\2\2\2\u09e2\u09e3\7.\2\2\u09e3")
        buf.write(u"\u09e4\7\u0173\2\2\u09e4\u09e5\7?\2\2\u09e5\u09e6\5\u0200")
        buf.write(u"\u0101\2\u09e6\u09e7\7\u0137\2\2\u09e7\u09e8\7\u03aa")
        buf.write(u"\2\2\u09e8\u09e9\5\u01f6\u00fc\2\u09e9\u008f\3\2\2\2")
        buf.write(u"\u09ea\u09eb\7.\2\2\u09eb\u09ed\7q\2\2\u09ec\u09ee\5")
        buf.write(u"\u0234\u011b\2\u09ed\u09ec\3\2\2\2\u09ed\u09ee\3\2\2")
        buf.write(u"\2\u09ee\u09ef\3\2\2\2\u09ef\u09f0\5\u01e6\u00f4\2\u09f0")
        buf.write(u"\u0091\3\2\2\2\u09f1\u09f2\7.\2\2\u09f2\u09f4\7\u0151")
        buf.write(u"\2\2\u09f3\u09f5\5\u0234\u011b\2\u09f4\u09f3\3\2\2\2")
        buf.write(u"\u09f4\u09f5\3\2\2\2\u09f5\u09f6\3\2\2\2\u09f6\u09f7")
        buf.write(u"\5\u01e6\u00f4\2\u09f7\u0093\3\2\2\2\u09f8\u09f9\7.\2")
        buf.write(u"\2\u09f9\u09fb\7\u01e1\2\2\u09fa\u09fc\5\u0234\u011b")
        buf.write(u"\2\u09fb\u09fa\3\2\2\2\u09fb\u09fc\3\2\2\2\u09fc\u09fd")
        buf.write(u"\3\2\2\2\u09fd\u09fe\5\u0200\u0101\2\u09fe\u0095\3\2")
        buf.write(u"\2\2\u09ff\u0a01\7.\2\2\u0a00\u0a02\7\u0206\2\2\u0a01")
        buf.write(u"\u0a00\3\2\2\2\u0a01\u0a02\3\2\2\2\u0a02\u0a03\3\2\2")
        buf.write(u"\2\u0a03\u0a05\7\u0093\2\2\u0a04\u0a06\5\u0234\u011b")
        buf.write(u"\2\u0a05\u0a04\3\2\2\2\u0a05\u0a06\3\2\2\2\u0a06\u0a07")
        buf.write(u"\3\2\2\2\u0a07\u0a09\5\u0220\u0111\2\u0a08\u0a0a\t\36")
        buf.write(u"\2\2\u0a09\u0a08\3\2\2\2\u0a09\u0a0a\3\2\2\2\u0a0a\u0097")
        buf.write(u"\3\2\2\2\u0a0b\u0a0c\7.\2\2\u0a0c\u0a0d\7\u0205\2\2\u0a0d")
        buf.write(u"\u0a13\5\u0200\u0101\2\u0a0e\u0a10\7\u0137\2\2\u0a0f")
        buf.write(u"\u0a11\7\u03aa\2\2\u0a10\u0a0f\3\2\2\2\u0a10\u0a11\3")
        buf.write(u"\2\2\2\u0a11\u0a12\3\2\2\2\u0a12\u0a14\5\u01f6\u00fc")
        buf.write(u"\2\u0a13\u0a0e\3\2\2\2\u0a13\u0a14\3\2\2\2\u0a14\u0099")
        buf.write(u"\3\2\2\2\u0a15\u0a16\7.\2\2\u0a16\u0a18\7\u0098\2\2\u0a17")
        buf.write(u"\u0a19\5\u0234\u011b\2\u0a18\u0a17\3\2\2\2\u0a18\u0a19")
        buf.write(u"\3\2\2\2\u0a19\u0a1a\3\2\2\2\u0a1a\u0a1b\5\u01e6\u00f4")
        buf.write(u"\2\u0a1b\u009b\3\2\2\2\u0a1c\u0a1d\7.\2\2\u0a1d\u0a1f")
        buf.write(u"\7\u021a\2\2\u0a1e\u0a20\5\u0234\u011b\2\u0a1f\u0a1e")
        buf.write(u"\3\2\2\2\u0a1f\u0a20\3\2\2\2\u0a20\u0a21\3\2\2\2\u0a21")
        buf.write(u"\u0a26\5\u01e6\u00f4\2\u0a22\u0a23\7\u03b5\2\2\u0a23")
        buf.write(u"\u0a25\5\u01e6\u00f4\2\u0a24\u0a22\3\2\2\2\u0a25\u0a28")
        buf.write(u"\3\2\2\2\u0a26\u0a24\3\2\2\2\u0a26\u0a27\3\2\2\2\u0a27")
        buf.write(u"\u0a2a\3\2\2\2\u0a28\u0a26\3\2\2\2\u0a29\u0a2b\t\36\2")
        buf.write(u"\2\u0a2a\u0a29\3\2\2\2\u0a2a\u0a2b\3\2\2\2\u0a2b\u009d")
        buf.write(u"\3\2\2\2\u0a2c\u0a2d\7y\2\2\u0a2d\u0a2e\7\u0093\2\2\u0a2e")
        buf.write(u"\u0a33\5\u00a0Q\2\u0a2f\u0a30\7\u03b5\2\2\u0a30\u0a32")
        buf.write(u"\5\u00a0Q\2\u0a31\u0a2f\3\2\2\2\u0a32\u0a35\3\2\2\2\u0a33")
        buf.write(u"\u0a31\3\2\2\2\u0a33\u0a34\3\2\2\2\u0a34\u009f\3\2\2")
        buf.write(u"\2\u0a35\u0a33\3\2\2\2\u0a36\u0a37\5\u01e8\u00f5\2\u0a37")
        buf.write(u"\u0a38\7\u0096\2\2\u0a38\u0a39\5\u01e8\u00f5\2\u0a39")
        buf.write(u"\u00a1\3\2\2\2\u0a3a\u0a3c\7\u020c\2\2\u0a3b\u0a3d\7")
        buf.write(u"\u0093\2\2\u0a3c\u0a3b\3\2\2\2\u0a3c\u0a3d\3\2\2\2\u0a3d")
        buf.write(u"\u0a3e\3\2\2\2\u0a3e\u0a3f\5\u01e8\u00f5\2\u0a3f\u00a3")
        buf.write(u"\3\2\2\2\u0a40\u0a41\7\22\2\2\u0a41\u0a48\5\u01e6\u00f4")
        buf.write(u"\2\u0a42\u0a45\7\u03b3\2\2\u0a43\u0a46\5\u0228\u0115")
        buf.write(u"\2\u0a44\u0a46\5\u0224\u0113\2\u0a45\u0a43\3\2\2\2\u0a45")
        buf.write(u"\u0a44\3\2\2\2\u0a45\u0a46\3\2\2\2\u0a46\u0a47\3\2\2")
        buf.write(u"\2\u0a47\u0a49\7\u03b4\2\2\u0a48\u0a42\3\2\2\2\u0a48")
        buf.write(u"\u0a49\3\2\2\2\u0a49\u00a5\3\2\2\2\u0a4a\u0a4d\5\u00c0")
        buf.write(u"a\2\u0a4b\u0a4d\5\u00c2b\2\u0a4c\u0a4a\3\2\2\2\u0a4c")
        buf.write(u"\u0a4b\3\2\2\2\u0a4d\u00a7\3\2\2\2\u0a4e\u0a4f\7\u012f")
        buf.write(u"\2\2\u0a4f\u0a50\5\u0224\u0113\2\u0a50\u00a9\3\2\2\2")
        buf.write(u"\u0a51\u0a56\5\u00c4c\2\u0a52\u0a56\5\u00c6d\2\u0a53")
        buf.write(u"\u0a56\5\u00c8e\2\u0a54\u0a56\5\u00caf\2\u0a55\u0a51")
        buf.write(u"\3\2\2\2\u0a55\u0a52\3\2\2\2\u0a55\u0a53\3\2\2\2\u0a55")
        buf.write(u"\u0a54\3\2\2\2\u0a56\u00ab\3\2\2\2\u0a57\u0a59\7I\2\2")
        buf.write(u"\u0a58\u0a5a\t\37\2\2\u0a59\u0a58\3\2\2\2\u0a59\u0a5a")
        buf.write(u"\3\2\2\2\u0a5a\u0a5c\3\2\2\2\u0a5b\u0a5d\7C\2\2\u0a5c")
        buf.write(u"\u0a5b\3\2\2\2\u0a5c\u0a5d\3\2\2\2\u0a5d\u0a5f\3\2\2")
        buf.write(u"\2\u0a5e\u0a60\7K\2\2\u0a5f\u0a5e\3\2\2\2\u0a5f\u0a60")
        buf.write(u"\3\2\2\2\u0a60\u0a61\3\2\2\2\u0a61\u0a67\5\u01e8\u00f5")
        buf.write(u"\2\u0a62\u0a63\7o\2\2\u0a63\u0a64\7\u03b3\2\2\u0a64\u0a65")
        buf.write(u"\5\u021e\u0110\2\u0a65\u0a66\7\u03b4\2\2\u0a66\u0a68")
        buf.write(u"\3\2\2\2\u0a67\u0a62\3\2\2\2\u0a67\u0a68\3\2\2\2\u0a68")
        buf.write(u"\u0a79\3\2\2\2\u0a69\u0a6a\7\u03b3\2\2\u0a6a\u0a6b\5")
        buf.write(u"\u021e\u0110\2\u0a6b\u0a6c\7\u03b4\2\2\u0a6c\u0a6e\3")
        buf.write(u"\2\2\2\u0a6d\u0a69\3\2\2\2\u0a6d\u0a6e\3\2\2\2\u0a6e")
        buf.write(u"\u0a6f\3\2\2\2\u0a6f\u0a7a\5\u00b8]\2\u0a70\u0a71\7\u0085")
        buf.write(u"\2\2\u0a71\u0a76\5\u00ba^\2\u0a72\u0a73\7\u03b5\2\2\u0a73")
        buf.write(u"\u0a75\5\u00ba^\2\u0a74\u0a72\3\2\2\2\u0a75\u0a78\3\2")
        buf.write(u"\2\2\u0a76\u0a74\3\2\2\2\u0a76\u0a77\3\2\2\2\u0a77\u0a7a")
        buf.write(u"\3\2\2\2\u0a78\u0a76\3\2\2\2\u0a79\u0a6d\3\2\2\2\u0a79")
        buf.write(u"\u0a70\3\2\2\2\u0a7a\u0a87\3\2\2\2\u0a7b\u0a7c\7f\2\2")
        buf.write(u"\u0a7c\u0a7d\7\u0131\2\2\u0a7d\u0a7e\7O\2\2\u0a7e\u0a7f")
        buf.write(u"\7\u009f\2\2\u0a7f\u0a84\5\u00ba^\2\u0a80\u0a81\7\u03b5")
        buf.write(u"\2\2\u0a81\u0a83\5\u00ba^\2\u0a82\u0a80\3\2\2\2\u0a83")
        buf.write(u"\u0a86\3\2\2\2\u0a84\u0a82\3\2\2\2\u0a84\u0a85\3\2\2")
        buf.write(u"\2\u0a85\u0a88\3\2\2\2\u0a86\u0a84\3\2\2\2\u0a87\u0a7b")
        buf.write(u"\3\2\2\2\u0a87\u0a88\3\2\2\2\u0a88\u00ad\3\2\2\2\u0a89")
        buf.write(u"\u0a8a\7Y\2\2\u0a8a\u0a8c\7\u0124\2\2\u0a8b\u0a8d\t ")
        buf.write(u"\2\2\u0a8c\u0a8b\3\2\2\2\u0a8c\u0a8d\3\2\2\2\u0a8d\u0a8f")
        buf.write(u"\3\2\2\2\u0a8e\u0a90\7\u0172\2\2\u0a8f\u0a8e\3\2\2\2")
        buf.write(u"\u0a8f\u0a90\3\2\2\2\u0a90\u0a91\3\2\2\2\u0a91\u0a92")
        buf.write(u"\7F\2\2\u0a92\u0a94\7\u03c2\2\2\u0a93\u0a95\t\b\2\2\u0a94")
        buf.write(u"\u0a93\3\2\2\2\u0a94\u0a95\3\2\2\2\u0a95\u0a96\3\2\2")
        buf.write(u"\2\u0a96\u0a97\7K\2\2\u0a97\u0a98\7\u0093\2\2\u0a98\u0a9e")
        buf.write(u"\5\u01e8\u00f5\2\u0a99\u0a9a\7o\2\2\u0a9a\u0a9b\7\u03b3")
        buf.write(u"\2\2\u0a9b\u0a9c\5\u021e\u0110\2\u0a9c\u0a9d\7\u03b4")
        buf.write(u"\2\2\u0a9d\u0a9f\3\2\2\2\u0a9e\u0a99\3\2\2\2\u0a9e\u0a9f")
        buf.write(u"\3\2\2\2\u0a9f\u0aa3\3\2\2\2\u0aa0\u0aa1\7\27\2\2\u0aa1")
        buf.write(u"\u0aa2\7\u0085\2\2\u0aa2\u0aa4\5\u01f2\u00fa\2\u0aa3")
        buf.write(u"\u0aa0\3\2\2\2\u0aa3\u0aa4\3\2\2\2\u0aa4\u0aab\3\2\2")
        buf.write(u"\2\u0aa5\u0aa7\t!\2\2\u0aa6\u0aa8\5\u00f4{\2\u0aa7\u0aa6")
        buf.write(u"\3\2\2\2\u0aa8\u0aa9\3\2\2\2\u0aa9\u0aa7\3\2\2\2\u0aa9")
        buf.write(u"\u0aaa\3\2\2\2\u0aaa\u0aac\3\2\2\2\u0aab\u0aa5\3\2\2")
        buf.write(u"\2\u0aab\u0aac\3\2\2\2\u0aac\u0ab3\3\2\2\2\u0aad\u0aaf")
        buf.write(u"\7X\2\2\u0aae\u0ab0\5\u00f6|\2\u0aaf\u0aae\3\2\2\2\u0ab0")
        buf.write(u"\u0ab1\3\2\2\2\u0ab1\u0aaf\3\2\2\2\u0ab1\u0ab2\3\2\2")
        buf.write(u"\2\u0ab2\u0ab4\3\2\2\2\u0ab3\u0aad\3\2\2\2\u0ab3\u0ab4")
        buf.write(u"\3\2\2\2\u0ab4\u0ab9\3\2\2\2\u0ab5\u0ab6\7C\2\2\u0ab6")
        buf.write(u"\u0ab7\5\u0206\u0104\2\u0ab7\u0ab8\t\"\2\2\u0ab8\u0aba")
        buf.write(u"\3\2\2\2\u0ab9\u0ab5\3\2\2\2\u0ab9\u0aba\3\2\2\2\u0aba")
        buf.write(u"\u0ac6\3\2\2\2\u0abb\u0abc\7\u03b3\2\2\u0abc\u0ac1\5")
        buf.write(u"\u00bc_\2\u0abd\u0abe\7\u03b5\2\2\u0abe\u0ac0\5\u00bc")
        buf.write(u"_\2\u0abf\u0abd\3\2\2\2\u0ac0\u0ac3\3\2\2\2\u0ac1\u0abf")
        buf.write(u"\3\2\2\2\u0ac1\u0ac2\3\2\2\2\u0ac2\u0ac4\3\2\2\2\u0ac3")
        buf.write(u"\u0ac1\3\2\2\2\u0ac4\u0ac5\7\u03b4\2\2\u0ac5\u0ac7\3")
        buf.write(u"\2\2\2\u0ac6\u0abb\3\2\2\2\u0ac6\u0ac7\3\2\2\2\u0ac7")
        buf.write(u"\u0ad1\3\2\2\2\u0ac8\u0ac9\7\u0085\2\2\u0ac9\u0ace\5")
        buf.write(u"\u00ba^\2\u0aca\u0acb\7\u03b5\2\2\u0acb\u0acd\5\u00ba")
        buf.write(u"^\2\u0acc\u0aca\3\2\2\2\u0acd\u0ad0\3\2\2\2\u0ace\u0acc")
        buf.write(u"\3\2\2\2\u0ace\u0acf\3\2\2\2\u0acf\u0ad2\3\2\2\2\u0ad0")
        buf.write(u"\u0ace\3\2\2\2\u0ad1\u0ac8\3\2\2\2\u0ad1\u0ad2\3\2\2")
        buf.write(u"\2\u0ad2\u00af\3\2\2\2\u0ad3\u0ad4\7Y\2\2\u0ad4\u0ad6")
        buf.write(u"\7\u0222\2\2\u0ad5\u0ad7\t \2\2\u0ad6\u0ad5\3\2\2\2\u0ad6")
        buf.write(u"\u0ad7\3\2\2\2\u0ad7\u0ad9\3\2\2\2\u0ad8\u0ada\7\u0172")
        buf.write(u"\2\2\u0ad9\u0ad8\3\2\2\2\u0ad9\u0ada\3\2\2\2\u0ada\u0adb")
        buf.write(u"\3\2\2\2\u0adb\u0adc\7F\2\2\u0adc\u0ade\7\u03c2\2\2\u0add")
        buf.write(u"\u0adf\t\b\2\2\u0ade\u0add\3\2\2\2\u0ade\u0adf\3\2\2")
        buf.write(u"\2\u0adf\u0ae0\3\2\2\2\u0ae0\u0ae1\7K\2\2\u0ae1\u0ae2")
        buf.write(u"\7\u0093\2\2\u0ae2\u0ae6\5\u01e8\u00f5\2\u0ae3\u0ae4")
        buf.write(u"\7\27\2\2\u0ae4\u0ae5\7\u0085\2\2\u0ae5\u0ae7\5\u01f2")
        buf.write(u"\u00fa\2\u0ae6\u0ae3\3\2\2\2\u0ae6\u0ae7\3\2\2\2\u0ae7")
        buf.write(u"\u0aee\3\2\2\2\u0ae8\u0ae9\7\u01dc\2\2\u0ae9\u0aea\7")
        buf.write(u"\u015b\2\2\u0aea\u0aeb\7\21\2\2\u0aeb\u0aec\7\u03ac\2")
        buf.write(u"\2\u0aec\u0aed\7\u03c2\2\2\u0aed\u0aef\7\u03ab\2\2\u0aee")
        buf.write(u"\u0ae8\3\2\2\2\u0aee\u0aef\3\2\2\2\u0aef\u0af4\3\2\2")
        buf.write(u"\2\u0af0\u0af1\7C\2\2\u0af1\u0af2\5\u0206\u0104\2\u0af2")
        buf.write(u"\u0af3\t\"\2\2\u0af3\u0af5\3\2\2\2\u0af4\u0af0\3\2\2")
        buf.write(u"\2\u0af4\u0af5\3\2\2\2\u0af5\u0b01\3\2\2\2\u0af6\u0af7")
        buf.write(u"\7\u03b3\2\2\u0af7\u0afc\5\u00bc_\2\u0af8\u0af9\7\u03b5")
        buf.write(u"\2\2\u0af9\u0afb\5\u00bc_\2\u0afa\u0af8\3\2\2\2\u0afb")
        buf.write(u"\u0afe\3\2\2\2\u0afc\u0afa\3\2\2\2\u0afc\u0afd\3\2\2")
        buf.write(u"\2\u0afd\u0aff\3\2\2\2\u0afe\u0afc\3\2\2\2\u0aff\u0b00")
        buf.write(u"\7\u03b4\2\2\u0b00\u0b02\3\2\2\2\u0b01\u0af6\3\2\2\2")
        buf.write(u"\u0b01\u0b02\3\2\2\2\u0b02\u0b0c\3\2\2\2\u0b03\u0b04")
        buf.write(u"\7\u0085\2\2\u0b04\u0b09\5\u00ba^\2\u0b05\u0b06\7\u03b5")
        buf.write(u"\2\2\u0b06\u0b08\5\u00ba^\2\u0b07\u0b05\3\2\2\2\u0b08")
        buf.write(u"\u0b0b\3\2\2\2\u0b09\u0b07\3\2\2\2\u0b09\u0b0a\3\2\2")
        buf.write(u"\2\u0b0a\u0b0d\3\2\2\2\u0b0b\u0b09\3\2\2\2\u0b0c\u0b03")
        buf.write(u"\3\2\2\2\u0b0c\u0b0d\3\2\2\2\u0b0d\u00b1\3\2\2\2\u0b0e")
        buf.write(u"\u0b10\7{\2\2\u0b0f\u0b11\t#\2\2\u0b10\u0b0f\3\2\2\2")
        buf.write(u"\u0b10\u0b11\3\2\2\2\u0b11\u0b13\3\2\2\2\u0b12\u0b14")
        buf.write(u"\7K\2\2\u0b13\u0b12\3\2\2\2\u0b13\u0b14\3\2\2\2\u0b14")
        buf.write(u"\u0b15\3\2\2\2\u0b15\u0b1b\5\u01e8\u00f5\2\u0b16\u0b17")
        buf.write(u"\7o\2\2\u0b17\u0b18\7\u03b3\2\2\u0b18\u0b19\5\u021e\u0110")
        buf.write(u"\2\u0b19\u0b1a\7\u03b4\2\2\u0b1a\u0b1c\3\2\2\2\u0b1b")
        buf.write(u"\u0b16\3\2\2\2\u0b1b\u0b1c\3\2\2\2\u0b1c\u0b2d\3\2\2")
        buf.write(u"\2\u0b1d\u0b1e\7\u03b3\2\2\u0b1e\u0b1f\5\u021e\u0110")
        buf.write(u"\2\u0b1f\u0b20\7\u03b4\2\2\u0b20\u0b22\3\2\2\2\u0b21")
        buf.write(u"\u0b1d\3\2\2\2\u0b21\u0b22\3\2\2\2\u0b22\u0b23\3\2\2")
        buf.write(u"\2\u0b23\u0b2e\5\u00b8]\2\u0b24\u0b25\7\u0085\2\2\u0b25")
        buf.write(u"\u0b2a\5\u00ba^\2\u0b26\u0b27\7\u03b5\2\2\u0b27\u0b29")
        buf.write(u"\5\u00ba^\2\u0b28\u0b26\3\2\2\2\u0b29\u0b2c\3\2\2\2\u0b2a")
        buf.write(u"\u0b28\3\2\2\2\u0b2a\u0b2b\3\2\2\2\u0b2b\u0b2e\3\2\2")
        buf.write(u"\2\u0b2c\u0b2a\3\2\2\2\u0b2d\u0b21\3\2\2\2\u0b2d\u0b24")
        buf.write(u"\3\2\2\2\u0b2e\u00b3\3\2\2\2\u0b2f\u0b31\5\u00e4s\2\u0b30")
        buf.write(u"\u0b32\5\u00be`\2\u0b31\u0b30\3\2\2\2\u0b31\u0b32\3\2")
        buf.write(u"\2\2\u0b32\u0b67\3\2\2\2\u0b33\u0b35\5\u00e0q\2\u0b34")
        buf.write(u"\u0b36\5\u00be`\2\u0b35\u0b34\3\2\2\2\u0b35\u0b36\3\2")
        buf.write(u"\2\2\u0b36\u0b67\3\2\2\2\u0b37\u0b39\5\u00e6t\2\u0b38")
        buf.write(u"\u0b3a\5\u00eav\2\u0b39\u0b38\3\2\2\2\u0b3a\u0b3b\3\2")
        buf.write(u"\2\2\u0b3b\u0b39\3\2\2\2\u0b3b\u0b3c\3\2\2\2\u0b3c\u0b45")
        buf.write(u"\3\2\2\2\u0b3d\u0b3f\7\u009b\2\2\u0b3e\u0b40\t$\2\2\u0b3f")
        buf.write(u"\u0b3e\3\2\2\2\u0b3f\u0b40\3\2\2\2\u0b40\u0b43\3\2\2")
        buf.write(u"\2\u0b41\u0b44\5\u00e4s\2\u0b42\u0b44\5\u00e0q\2\u0b43")
        buf.write(u"\u0b41\3\2\2\2\u0b43\u0b42\3\2\2\2\u0b44\u0b46\3\2\2")
        buf.write(u"\2\u0b45\u0b3d\3\2\2\2\u0b45\u0b46\3\2\2\2\u0b46\u0b48")
        buf.write(u"\3\2\2\2\u0b47\u0b49\5\u00d0i\2\u0b48\u0b47\3\2\2\2\u0b48")
        buf.write(u"\u0b49\3\2\2\2\u0b49\u0b4b\3\2\2\2\u0b4a\u0b4c\5\u00fc")
        buf.write(u"\177\2\u0b4b\u0b4a\3\2\2\2\u0b4b\u0b4c\3\2\2\2\u0b4c")
        buf.write(u"\u0b4e\3\2\2\2\u0b4d\u0b4f\5\u00be`\2\u0b4e\u0b4d\3\2")
        buf.write(u"\2\2\u0b4e\u0b4f\3\2\2\2\u0b4f\u0b67\3\2\2\2\u0b50\u0b52")
        buf.write(u"\5\u00e2r\2\u0b51\u0b53\5\u00e8u\2\u0b52\u0b51\3\2\2")
        buf.write(u"\2\u0b53\u0b54\3\2\2\2\u0b54\u0b52\3\2\2\2\u0b54\u0b55")
        buf.write(u"\3\2\2\2\u0b55\u0b5b\3\2\2\2\u0b56\u0b58\7\u009b\2\2")
        buf.write(u"\u0b57\u0b59\t$\2\2\u0b58\u0b57\3\2\2\2\u0b58\u0b59\3")
        buf.write(u"\2\2\2\u0b59\u0b5a\3\2\2\2\u0b5a\u0b5c\5\u00e0q\2\u0b5b")
        buf.write(u"\u0b56\3\2\2\2\u0b5b\u0b5c\3\2\2\2\u0b5c\u0b5e\3\2\2")
        buf.write(u"\2\u0b5d\u0b5f\5\u00d0i\2\u0b5e\u0b5d\3\2\2\2\u0b5e\u0b5f")
        buf.write(u"\3\2\2\2\u0b5f\u0b61\3\2\2\2\u0b60\u0b62\5\u00fc\177")
        buf.write(u"\2\u0b61\u0b60\3\2\2\2\u0b61\u0b62\3\2\2\2\u0b62\u0b64")
        buf.write(u"\3\2\2\2\u0b63\u0b65\5\u00be`\2\u0b64\u0b63\3\2\2\2\u0b64")
        buf.write(u"\u0b65\3\2\2\2\u0b65\u0b67\3\2\2\2\u0b66\u0b2f\3\2\2")
        buf.write(u"\2\u0b66\u0b33\3\2\2\2\u0b66\u0b37\3\2\2\2\u0b66\u0b50")
        buf.write(u"\3\2\2\2\u0b67\u00b5\3\2\2\2\u0b68\u0b6b\5\u00ccg\2\u0b69")
        buf.write(u"\u0b6b\5\u00ceh\2\u0b6a\u0b68\3\2\2\2\u0b6a\u0b69\3\2")
        buf.write(u"\2\2\u0b6b\u00b7\3\2\2\2\u0b6c\u0b7c\5\u00b4[\2\u0b6d")
        buf.write(u"\u0b6e\t%\2\2\u0b6e\u0b6f\7\u03b3\2\2\u0b6f\u0b70\5\u0226")
        buf.write(u"\u0114\2\u0b70\u0b78\7\u03b4\2\2\u0b71\u0b72\7\u03b5")
        buf.write(u"\2\2\u0b72\u0b73\7\u03b3\2\2\u0b73\u0b74\5\u0226\u0114")
        buf.write(u"\2\u0b74\u0b75\7\u03b4\2\2\u0b75\u0b77\3\2\2\2\u0b76")
        buf.write(u"\u0b71\3\2\2\2\u0b77\u0b7a\3\2\2\2\u0b78\u0b76\3\2\2")
        buf.write(u"\2\u0b78\u0b79\3\2\2\2\u0b79\u0b7c\3\2\2\2\u0b7a\u0b78")
        buf.write(u"\3\2\2\2\u0b7b\u0b6c\3\2\2\2\u0b7b\u0b6d\3\2\2\2\u0b7c")
        buf.write(u"\u00b9\3\2\2\2\u0b7d\u0b7e\5\u01ea\u00f6\2\u0b7e\u0b81")
        buf.write(u"\7\u03aa\2\2\u0b7f\u0b82\5\u024c\u0127\2\u0b80\u0b82")
        buf.write(u"\7&\2\2\u0b81\u0b7f\3\2\2\2\u0b81\u0b80\3\2\2\2\u0b82")
        buf.write(u"\u00bb\3\2\2\2\u0b83\u0b86\5\u0200\u0101\2\u0b84\u0b86")
        buf.write(u"\7\u03cd\2\2\u0b85\u0b83\3\2\2\2\u0b85\u0b84\3\2\2\2")
        buf.write(u"\u0b86\u00bd\3\2\2\2\u0b87\u0b88\79\2\2\u0b88\u0b8e\7")
        buf.write(u"\u009f\2\2\u0b89\u0b8a\7Z\2\2\u0b8a\u0b8b\7D\2\2\u0b8b")
        buf.write(u"\u0b8c\7\u01e3\2\2\u0b8c\u0b8e\7\u0195\2\2\u0b8d\u0b87")
        buf.write(u"\3\2\2\2\u0b8d\u0b89\3\2\2\2\u0b8e\u00bf\3\2\2\2\u0b8f")
        buf.write(u"\u0b91\7(\2\2\u0b90\u0b92\7\\\2\2\u0b91\u0b90\3\2\2\2")
        buf.write(u"\u0b91\u0b92\3\2\2\2\u0b92\u0b94\3\2\2\2\u0b93\u0b95")
        buf.write(u"\7\u01c1\2\2\u0b94\u0b93\3\2\2\2\u0b94\u0b95\3\2\2\2")
        buf.write(u"\u0b95\u0b97\3\2\2\2\u0b96\u0b98\7C\2\2\u0b97\u0b96\3")
        buf.write(u"\2\2\2\u0b97\u0b98\3\2\2\2\u0b98\u0b99\3\2\2\2\u0b99")
        buf.write(u"\u0b9a\7<\2\2\u0b9a\u0ba0\5\u01e8\u00f5\2\u0b9b\u0b9c")
        buf.write(u"\7o\2\2\u0b9c\u0b9d\7\u03b3\2\2\u0b9d\u0b9e\5\u021e\u0110")
        buf.write(u"\2\u0b9e\u0b9f\7\u03b4\2\2\u0b9f\u0ba1\3\2\2\2\u0ba0")
        buf.write(u"\u0b9b\3\2\2\2\u0ba0\u0ba1\3\2\2\2\u0ba1\u0ba4\3\2\2")
        buf.write(u"\2\u0ba2\u0ba3\7\u00a5\2\2\u0ba3\u0ba5\5\u024c\u0127")
        buf.write(u"\2\u0ba4\u0ba2\3\2\2\2\u0ba4\u0ba5\3\2\2\2\u0ba5\u0ba7")
        buf.write(u"\3\2\2\2\u0ba6\u0ba8\5\u00d0i\2\u0ba7\u0ba6\3\2\2\2\u0ba7")
        buf.write(u"\u0ba8\3\2\2\2\u0ba8\u0bab\3\2\2\2\u0ba9\u0baa\7V\2\2")
        buf.write(u"\u0baa\u0bac\5\u0206\u0104\2\u0bab\u0ba9\3\2\2\2\u0bab")
        buf.write(u"\u0bac\3\2\2\2\u0bac\u00c1\3\2\2\2\u0bad\u0baf\7(\2\2")
        buf.write(u"\u0bae\u0bb0\7\\\2\2\u0baf\u0bae\3\2\2\2\u0baf\u0bb0")
        buf.write(u"\3\2\2\2\u0bb0\u0bb2\3\2\2\2\u0bb1\u0bb3\7\u01c1\2\2")
        buf.write(u"\u0bb2\u0bb1\3\2\2\2\u0bb2\u0bb3\3\2\2\2\u0bb3\u0bb5")
        buf.write(u"\3\2\2\2\u0bb4\u0bb6\7C\2\2\u0bb5\u0bb4\3\2\2\2\u0bb5")
        buf.write(u"\u0bb6\3\2\2\2\u0bb6\u0bde\3\2\2\2\u0bb7\u0bba\5\u01e8")
        buf.write(u"\u00f5\2\u0bb8\u0bb9\7\u03b2\2\2\u0bb9\u0bbb\7\u03a2")
        buf.write(u"\2\2\u0bba\u0bb8\3\2\2\2\u0bba\u0bbb\3\2\2\2\u0bbb\u0bc4")
        buf.write(u"\3\2\2\2\u0bbc\u0bbd\7\u03b5\2\2\u0bbd\u0bc0\5\u01e8")
        buf.write(u"\u00f5\2\u0bbe\u0bbf\7\u03b2\2\2\u0bbf\u0bc1\7\u03a2")
        buf.write(u"\2\2\u0bc0\u0bbe\3\2\2\2\u0bc0\u0bc1\3\2\2\2\u0bc1\u0bc3")
        buf.write(u"\3\2\2\2\u0bc2\u0bbc\3\2\2\2\u0bc3\u0bc6\3\2\2\2\u0bc4")
        buf.write(u"\u0bc2\3\2\2\2\u0bc4\u0bc5\3\2\2\2\u0bc5\u0bc7\3\2\2")
        buf.write(u"\2\u0bc6\u0bc4\3\2\2\2\u0bc7\u0bc8\7<\2\2\u0bc8\u0bc9")
        buf.write(u"\5\u00d4k\2\u0bc9\u0bdf\3\2\2\2\u0bca\u0bcb\7<\2\2\u0bcb")
        buf.write(u"\u0bce\5\u01e8\u00f5\2\u0bcc\u0bcd\7\u03b2\2\2\u0bcd")
        buf.write(u"\u0bcf\7\u03a2\2\2\u0bce\u0bcc\3\2\2\2\u0bce\u0bcf\3")
        buf.write(u"\2\2\2\u0bcf\u0bd8\3\2\2\2\u0bd0\u0bd1\7\u03b5\2\2\u0bd1")
        buf.write(u"\u0bd4\5\u01e8\u00f5\2\u0bd2\u0bd3\7\u03b2\2\2\u0bd3")
        buf.write(u"\u0bd5\7\u03a2\2\2\u0bd4\u0bd2\3\2\2\2\u0bd4\u0bd5\3")
        buf.write(u"\2\2\2\u0bd5\u0bd7\3\2\2\2\u0bd6\u0bd0\3\2\2\2\u0bd7")
        buf.write(u"\u0bda\3\2\2\2\u0bd8\u0bd6\3\2\2\2\u0bd8\u0bd9\3\2\2")
        buf.write(u"\2\u0bd9\u0bdb\3\2\2\2\u0bda\u0bd8\3\2\2\2\u0bdb\u0bdc")
        buf.write(u"\7\u00a2\2\2\u0bdc\u0bdd\5\u00d4k\2\u0bdd\u0bdf\3\2\2")
        buf.write(u"\2\u0bde\u0bb7\3\2\2\2\u0bde\u0bca\3\2\2\2\u0bdf\u0be2")
        buf.write(u"\3\2\2\2\u0be0\u0be1\7\u00a5\2\2\u0be1\u0be3\5\u024c")
        buf.write(u"\u0127\2\u0be2\u0be0\3\2\2\2\u0be2\u0be3\3\2\2\2\u0be3")
        buf.write(u"\u00c3\3\2\2\2\u0be4\u0be5\7\u0156\2\2\u0be5\u0be6\5")
        buf.write(u"\u01e8\u00f5\2\u0be6\u0beb\7\u01a8\2\2\u0be7\u0be9\7")
        buf.write(u"\f\2\2\u0be8\u0be7\3\2\2\2\u0be8\u0be9\3\2\2\2\u0be9")
        buf.write(u"\u0bea\3\2\2\2\u0bea\u0bec\5\u0200\u0101\2\u0beb\u0be8")
        buf.write(u"\3\2\2\2\u0beb\u0bec\3\2\2\2\u0bec\u00c5\3\2\2\2\u0bed")
        buf.write(u"\u0bee\7\u0156\2\2\u0bee\u0bef\5\u01e8\u00f5\2\u0bef")
        buf.write(u"\u0bf0\7t\2\2\u0bf0\u0bf7\5\u0200\u0101\2\u0bf1\u0bf2")
        buf.write(u"\5\u0254\u012b\2\u0bf2\u0bf3\7\u03b3\2\2\u0bf3\u0bf4")
        buf.write(u"\5\u0228\u0115\2\u0bf4\u0bf5\7\u03b4\2\2\u0bf5\u0bf8")
        buf.write(u"\3\2\2\2\u0bf6\u0bf8\t&\2\2\u0bf7\u0bf1\3\2\2\2\u0bf7")
        buf.write(u"\u0bf6\3\2\2\2\u0bf8\u0bfb\3\2\2\2\u0bf9\u0bfa\7\u00a5")
        buf.write(u"\2\2\u0bfa\u0bfc\5\u024c\u0127\2\u0bfb\u0bf9\3\2\2\2")
        buf.write(u"\u0bfb\u0bfc\3\2\2\2\u0bfc\u0bff\3\2\2\2\u0bfd\u0bfe")
        buf.write(u"\7V\2\2\u0bfe\u0c00\5\u0206\u0104\2\u0bff\u0bfd\3\2\2")
        buf.write(u"\2\u0bff\u0c00\3\2\2\2\u0c00\u00c7\3\2\2\2\u0c01\u0c02")
        buf.write(u"\7\u0156\2\2\u0c02\u0c03\5\u01e8\u00f5\2\u0c03\u0c04")
        buf.write(u"\7t\2\2\u0c04\u0c07\t\'\2\2\u0c05\u0c06\7\u00a5\2\2\u0c06")
        buf.write(u"\u0c08\5\u024c\u0127\2\u0c07\u0c05\3\2\2\2\u0c07\u0c08")
        buf.write(u"\3\2\2\2\u0c08\u0c0b\3\2\2\2\u0c09\u0c0a\7V\2\2\u0c0a")
        buf.write(u"\u0c0c\5\u0206\u0104\2\u0c0b\u0c09\3\2\2\2\u0c0b\u0c0c")
        buf.write(u"\3\2\2\2\u0c0c\u00c9\3\2\2\2\u0c0d\u0c0e\7\u0156\2\2")
        buf.write(u"\u0c0e\u0c0f\5\u01e8\u00f5\2\u0c0f\u0c10\7\u0111\2\2")
        buf.write(u"\u0c10\u00cb\3\2\2\2\u0c11\u0c13\7\u009f\2\2\u0c12\u0c14")
        buf.write(u"\7\\\2\2\u0c13\u0c12\3\2\2\2\u0c13\u0c14\3\2\2\2\u0c14")
        buf.write(u"\u0c16\3\2\2\2\u0c15\u0c17\7C\2\2\u0c16\u0c15\3\2\2\2")
        buf.write(u"\u0c16\u0c17\3\2\2\2\u0c17\u0c18\3\2\2\2\u0c18\u0c1d")
        buf.write(u"\5\u01e8\u00f5\2\u0c19\u0c1b\7\f\2\2\u0c1a\u0c19\3\2")
        buf.write(u"\2\2\u0c1a\u0c1b\3\2\2\2\u0c1b\u0c1c\3\2\2\2\u0c1c\u0c1e")
        buf.write(u"\5\u0200\u0101\2\u0c1d\u0c1a\3\2\2\2\u0c1d\u0c1e\3\2")
        buf.write(u"\2\2\u0c1e\u0c1f\3\2\2\2\u0c1f\u0c20\7\u0085\2\2\u0c20")
        buf.write(u"\u0c25\5\u00ba^\2\u0c21\u0c22\7\u03b5\2\2\u0c22\u0c24")
        buf.write(u"\5\u00ba^\2\u0c23\u0c21\3\2\2\2\u0c24\u0c27\3\2\2\2\u0c25")
        buf.write(u"\u0c23\3\2\2\2\u0c25\u0c26\3\2\2\2\u0c26\u0c2a\3\2\2")
        buf.write(u"\2\u0c27\u0c25\3\2\2\2\u0c28\u0c29\7\u00a5\2\2\u0c29")
        buf.write(u"\u0c2b\5\u024c\u0127\2\u0c2a\u0c28\3\2\2\2\u0c2a\u0c2b")
        buf.write(u"\3\2\2\2\u0c2b\u0c2d\3\2\2\2\u0c2c\u0c2e\5\u00d0i\2\u0c2d")
        buf.write(u"\u0c2c\3\2\2\2\u0c2d\u0c2e\3\2\2\2\u0c2e\u0c30\3\2\2")
        buf.write(u"\2\u0c2f\u0c31\5\u00fc\177\2\u0c30\u0c2f\3\2\2\2\u0c30")
        buf.write(u"\u0c31\3\2\2\2\u0c31\u00cd\3\2\2\2\u0c32\u0c34\7\u009f")
        buf.write(u"\2\2\u0c33\u0c35\7\\\2\2\u0c34\u0c33\3\2\2\2\u0c34\u0c35")
        buf.write(u"\3\2\2\2\u0c35\u0c37\3\2\2\2\u0c36\u0c38\7C\2\2\u0c37")
        buf.write(u"\u0c36\3\2\2\2\u0c37\u0c38\3\2\2\2\u0c38\u0c39\3\2\2")
        buf.write(u"\2\u0c39\u0c3a\5\u00d4k\2\u0c3a\u0c3b\7\u0085\2\2\u0c3b")
        buf.write(u"\u0c40\5\u00ba^\2\u0c3c\u0c3d\7\u03b5\2\2\u0c3d\u0c3f")
        buf.write(u"\5\u00ba^\2\u0c3e\u0c3c\3\2\2\2\u0c3f\u0c42\3\2\2\2\u0c40")
        buf.write(u"\u0c3e\3\2\2\2\u0c40\u0c41\3\2\2\2\u0c41\u0c45\3\2\2")
        buf.write(u"\2\u0c42\u0c40\3\2\2\2\u0c43\u0c44\7\u00a5\2\2\u0c44")
        buf.write(u"\u0c46\5\u024c\u0127\2\u0c45\u0c43\3\2\2\2\u0c45\u0c46")
        buf.write(u"\3\2\2\2\u0c46\u00cf\3\2\2\2\u0c47\u0c48\7k\2\2\u0c48")
        buf.write(u"\u0c49\7\21\2\2\u0c49\u0c4e\5\u00d2j\2\u0c4a\u0c4b\7")
        buf.write(u"\u03b5\2\2\u0c4b\u0c4d\5\u00d2j\2\u0c4c\u0c4a\3\2\2\2")
        buf.write(u"\u0c4d\u0c50\3\2\2\2\u0c4e\u0c4c\3\2\2\2\u0c4e\u0c4f")
        buf.write(u"\3\2\2\2\u0c4f\u00d1\3\2\2\2\u0c50\u0c4e\3\2\2\2\u0c51")
        buf.write(u"\u0c53\5\u024c\u0127\2\u0c52\u0c54\t(\2\2\u0c53\u0c52")
        buf.write(u"\3\2\2\2\u0c53\u0c54\3\2\2\2\u0c54\u00d3\3\2\2\2\u0c55")
        buf.write(u"\u0c5a\5\u00d6l\2\u0c56\u0c57\7\u03b5\2\2\u0c57\u0c59")
        buf.write(u"\5\u00d6l\2\u0c58\u0c56\3\2\2\2\u0c59\u0c5c\3\2\2\2\u0c5a")
        buf.write(u"\u0c58\3\2\2\2\u0c5a\u0c5b\3\2\2\2\u0c5b\u00d5\3\2\2")
        buf.write(u"\2\u0c5c\u0c5a\3\2\2\2\u0c5d\u0c61\5\u00d8m\2\u0c5e\u0c60")
        buf.write(u"\5\u00dep\2\u0c5f\u0c5e\3\2\2\2\u0c60\u0c63\3\2\2\2\u0c61")
        buf.write(u"\u0c5f\3\2\2\2\u0c61\u0c62\3\2\2\2\u0c62\u0c6f\3\2\2")
        buf.write(u"\2\u0c63\u0c61\3\2\2\2\u0c64\u0c65\7\u03b3\2\2\u0c65")
        buf.write(u"\u0c69\5\u00d8m\2\u0c66\u0c68\5\u00dep\2\u0c67\u0c66")
        buf.write(u"\3\2\2\2\u0c68\u0c6b\3\2\2\2\u0c69\u0c67\3\2\2\2\u0c69")
        buf.write(u"\u0c6a\3\2\2\2\u0c6a\u0c6c\3\2\2\2\u0c6b\u0c69\3\2\2")
        buf.write(u"\2\u0c6c\u0c6d\7\u03b4\2\2\u0c6d\u0c6f\3\2\2\2\u0c6e")
        buf.write(u"\u0c5d\3\2\2\2\u0c6e\u0c64\3\2\2\2\u0c6f\u00d7\3\2\2")
        buf.write(u"\2\u0c70\u0c76\5\u01e8\u00f5\2\u0c71\u0c72\7o\2\2\u0c72")
        buf.write(u"\u0c73\7\u03b3\2\2\u0c73\u0c74\5\u021e\u0110\2\u0c74")
        buf.write(u"\u0c75\7\u03b4\2\2\u0c75\u0c77\3\2\2\2\u0c76\u0c71\3")
        buf.write(u"\2\2\2\u0c76\u0c77\3\2\2\2\u0c77\u0c7c\3\2\2\2\u0c78")
        buf.write(u"\u0c7a\7\f\2\2\u0c79\u0c78\3\2\2\2\u0c79\u0c7a\3\2\2")
        buf.write(u"\2\u0c7a\u0c7b\3\2\2\2\u0c7b\u0c7d\5\u0200\u0101\2\u0c7c")
        buf.write(u"\u0c79\3\2\2\2\u0c7c\u0c7d\3\2\2\2\u0c7d\u0c86\3\2\2")
        buf.write(u"\2\u0c7e\u0c83\5\u00dan\2\u0c7f\u0c80\7\u03b5\2\2\u0c80")
        buf.write(u"\u0c82\5\u00dan\2\u0c81\u0c7f\3\2\2\2\u0c82\u0c85\3\2")
        buf.write(u"\2\2\u0c83\u0c81\3\2\2\2\u0c83\u0c84\3\2\2\2\u0c84\u0c87")
        buf.write(u"\3\2\2\2\u0c85\u0c83\3\2\2\2\u0c86\u0c7e\3\2\2\2\u0c86")
        buf.write(u"\u0c87\3\2\2\2\u0c87\u0c99\3\2\2\2\u0c88\u0c8e\5\u00b4")
        buf.write(u"[\2\u0c89\u0c8a\7\u03b3\2\2\u0c8a\u0c8b\5\u00b4[\2\u0c8b")
        buf.write(u"\u0c8c\7\u03b4\2\2\u0c8c\u0c8e\3\2\2\2\u0c8d\u0c88\3")
        buf.write(u"\2\2\2\u0c8d\u0c89\3\2\2\2\u0c8e\u0c90\3\2\2\2\u0c8f")
        buf.write(u"\u0c91\7\f\2\2\u0c90\u0c8f\3\2\2\2\u0c90\u0c91\3\2\2")
        buf.write(u"\2\u0c91\u0c92\3\2\2\2\u0c92\u0c93\5\u0200\u0101\2\u0c93")
        buf.write(u"\u0c99\3\2\2\2\u0c94\u0c95\7\u03b3\2\2\u0c95\u0c96\5")
        buf.write(u"\u00d4k\2\u0c96\u0c97\7\u03b4\2\2\u0c97\u0c99\3\2\2\2")
        buf.write(u"\u0c98\u0c70\3\2\2\2\u0c98\u0c8d\3\2\2\2\u0c98\u0c94")
        buf.write(u"\3\2\2\2\u0c99\u00d9\3\2\2\2\u0c9a\u0c9b\t)\2\2\u0c9b")
        buf.write(u"\u0c9e\t\23\2\2\u0c9c\u0c9d\79\2\2\u0c9d\u0c9f\5\u00dc")
        buf.write(u"o\2\u0c9e\u0c9c\3\2\2\2\u0c9e\u0c9f\3\2\2\2\u0c9f\u0ca0")
        buf.write(u"\3\2\2\2\u0ca0\u0ca1\7\u03b3\2\2\u0ca1\u0ca2\5\u021e")
        buf.write(u"\u0110\2\u0ca2\u0ca3\7\u03b4\2\2\u0ca3\u00db\3\2\2\2")
        buf.write(u"\u0ca4\u0caa\7N\2\2\u0ca5\u0ca6\7k\2\2\u0ca6\u0caa\7")
        buf.write(u"\21\2\2\u0ca7\u0ca8\7?\2\2\u0ca8\u0caa\7\21\2\2\u0ca9")
        buf.write(u"\u0ca4\3\2\2\2\u0ca9\u0ca5\3\2\2\2\u0ca9\u0ca7\3\2\2")
        buf.write(u"\2\u0caa\u00dd\3\2\2\2\u0cab\u0cad\t*\2\2\u0cac\u0cab")
        buf.write(u"\3\2\2\2\u0cac\u0cad\3\2\2\2\u0cad\u0cae\3\2\2\2\u0cae")
        buf.write(u"\u0caf\7N\2\2\u0caf\u0cb7\5\u00d8m\2\u0cb0\u0cb1\7f\2")
        buf.write(u"\2\u0cb1\u0cb8\5\u024c\u0127\2\u0cb2\u0cb3\7\u00a2\2")
        buf.write(u"\2\u0cb3\u0cb4\7\u03b3\2\2\u0cb4\u0cb5\5\u021e\u0110")
        buf.write(u"\2\u0cb5\u0cb6\7\u03b4\2\2\u0cb6\u0cb8\3\2\2\2\u0cb7")
        buf.write(u"\u0cb0\3\2\2\2\u0cb7\u0cb2\3\2\2\2\u0cb7\u0cb8\3\2\2")
        buf.write(u"\2\u0cb8\u0cd8\3\2\2\2\u0cb9\u0cba\7\u0092\2\2\u0cba")
        buf.write(u"\u0cbd\5\u00d8m\2\u0cbb\u0cbc\7f\2\2\u0cbc\u0cbe\5\u024c")
        buf.write(u"\u0127\2\u0cbd\u0cbb\3\2\2\2\u0cbd\u0cbe\3\2\2\2\u0cbe")
        buf.write(u"\u0cd8\3\2\2\2\u0cbf\u0cc1\t+\2\2\u0cc0\u0cc2\7m\2\2")
        buf.write(u"\u0cc1\u0cc0\3\2\2\2\u0cc1\u0cc2\3\2\2\2\u0cc2\u0cc3")
        buf.write(u"\3\2\2\2\u0cc3\u0cc4\7N\2\2\u0cc4\u0ccc\5\u00d8m\2\u0cc5")
        buf.write(u"\u0cc6\7f\2\2\u0cc6\u0ccd\5\u024c\u0127\2\u0cc7\u0cc8")
        buf.write(u"\7\u00a2\2\2\u0cc8\u0cc9\7\u03b3\2\2\u0cc9\u0cca\5\u021e")
        buf.write(u"\u0110\2\u0cca\u0ccb\7\u03b4\2\2\u0ccb\u0ccd\3\2\2\2")
        buf.write(u"\u0ccc\u0cc5\3\2\2\2\u0ccc\u0cc7\3\2\2\2\u0ccd\u0cd8")
        buf.write(u"\3\2\2\2\u0cce\u0cd3\7b\2\2\u0ccf\u0cd1\t+\2\2\u0cd0")
        buf.write(u"\u0cd2\7m\2\2\u0cd1\u0cd0\3\2\2\2\u0cd1\u0cd2\3\2\2\2")
        buf.write(u"\u0cd2\u0cd4\3\2\2\2\u0cd3\u0ccf\3\2\2\2\u0cd3\u0cd4")
        buf.write(u"\3\2\2\2\u0cd4\u0cd5\3\2\2\2\u0cd5\u0cd6\7N\2\2\u0cd6")
        buf.write(u"\u0cd8\5\u00d8m\2\u0cd7\u0cac\3\2\2\2\u0cd7\u0cb9\3\2")
        buf.write(u"\2\2\u0cd7\u0cbf\3\2\2\2\u0cd7\u0cce\3\2\2\2\u0cd8\u00df")
        buf.write(u"\3\2\2\2\u0cd9\u0cda\7\u03b3\2\2\u0cda\u0cdb\5\u00e4")
        buf.write(u"s\2\u0cdb\u0cdc\7\u03b4\2\2\u0cdc\u0ce2\3\2\2\2\u0cdd")
        buf.write(u"\u0cde\7\u03b3\2\2\u0cde\u0cdf\5\u00e0q\2\u0cdf\u0ce0")
        buf.write(u"\7\u03b4\2\2\u0ce0\u0ce2\3\2\2\2\u0ce1\u0cd9\3\2\2\2")
        buf.write(u"\u0ce1\u0cdd\3\2\2\2\u0ce2\u00e1\3\2\2\2\u0ce3\u0ce4")
        buf.write(u"\7\u03b3\2\2\u0ce4\u0ce5\5\u00e6t\2\u0ce5\u0ce6\7\u03b4")
        buf.write(u"\2\2\u0ce6\u0cec\3\2\2\2\u0ce7\u0ce8\7\u03b3\2\2\u0ce8")
        buf.write(u"\u0ce9\5\u00e2r\2\u0ce9\u0cea\7\u03b4\2\2\u0cea\u0cec")
        buf.write(u"\3\2\2\2\u0ceb\u0ce3\3\2\2\2\u0ceb\u0ce7\3\2\2\2\u0cec")
        buf.write(u"\u00e3\3\2\2\2\u0ced\u0cf1\7\u0084\2\2\u0cee\u0cf0\5")
        buf.write(u"\u00ecw\2\u0cef\u0cee\3\2\2\2\u0cf0\u0cf3\3\2\2\2\u0cf1")
        buf.write(u"\u0cef\3\2\2\2\u0cf1\u0cf2\3\2\2\2\u0cf2\u0cf4\3\2\2")
        buf.write(u"\2\u0cf3\u0cf1\3\2\2\2\u0cf4\u0cf6\5\u00eex\2\u0cf5\u0cf7")
        buf.write(u"\5\u00f2z\2\u0cf6\u0cf5\3\2\2\2\u0cf6\u0cf7\3\2\2\2\u0cf7")
        buf.write(u"\u0cf9\3\2\2\2\u0cf8\u0cfa\5\u00f8}\2\u0cf9\u0cf8\3\2")
        buf.write(u"\2\2\u0cf9\u0cfa\3\2\2\2\u0cfa\u0cfc\3\2\2\2\u0cfb\u0cfd")
        buf.write(u"\5\u00d0i\2\u0cfc\u0cfb\3\2\2\2\u0cfc\u0cfd\3\2\2\2\u0cfd")
        buf.write(u"\u0cff\3\2\2\2\u0cfe\u0d00\5\u00fc\177\2\u0cff\u0cfe")
        buf.write(u"\3\2\2\2\u0cff\u0d00\3\2\2\2\u0d00\u0d16\3\2\2\2\u0d01")
        buf.write(u"\u0d05\7\u0084\2\2\u0d02\u0d04\5\u00ecw\2\u0d03\u0d02")
        buf.write(u"\3\2\2\2\u0d04\u0d07\3\2\2\2\u0d05\u0d03\3\2\2\2\u0d05")
        buf.write(u"\u0d06\3\2\2\2\u0d06\u0d08\3\2\2\2\u0d07\u0d05\3\2\2")
        buf.write(u"\2\u0d08\u0d0a\5\u00eex\2\u0d09\u0d0b\5\u00f8}\2\u0d0a")
        buf.write(u"\u0d09\3\2\2\2\u0d0a\u0d0b\3\2\2\2\u0d0b\u0d0d\3\2\2")
        buf.write(u"\2\u0d0c\u0d0e\5\u00d0i\2\u0d0d\u0d0c\3\2\2\2\u0d0d\u0d0e")
        buf.write(u"\3\2\2\2\u0d0e\u0d10\3\2\2\2\u0d0f\u0d11\5\u00fc\177")
        buf.write(u"\2\u0d10\u0d0f\3\2\2\2\u0d10\u0d11\3\2\2\2\u0d11\u0d13")
        buf.write(u"\3\2\2\2\u0d12\u0d14\5\u00f2z\2\u0d13\u0d12\3\2\2\2\u0d13")
        buf.write(u"\u0d14\3\2\2\2\u0d14\u0d16\3\2\2\2\u0d15\u0ced\3\2\2")
        buf.write(u"\2\u0d15\u0d01\3\2\2\2\u0d16\u00e5\3\2\2\2\u0d17\u0d1b")
        buf.write(u"\7\u0084\2\2\u0d18\u0d1a\5\u00ecw\2\u0d19\u0d18\3\2\2")
        buf.write(u"\2\u0d1a\u0d1d\3\2\2\2\u0d1b\u0d19\3\2\2\2\u0d1b\u0d1c")
        buf.write(u"\3\2\2\2\u0d1c\u0d1e\3\2\2\2\u0d1d\u0d1b\3\2\2\2\u0d1e")
        buf.write(u"\u0d20\5\u00eex\2\u0d1f\u0d21\5\u00f8}\2\u0d20\u0d1f")
        buf.write(u"\3\2\2\2\u0d20\u0d21\3\2\2\2\u0d21\u0d23\3\2\2\2\u0d22")
        buf.write(u"\u0d24\5\u00d0i\2\u0d23\u0d22\3\2\2\2\u0d23\u0d24\3\2")
        buf.write(u"\2\2\u0d24\u0d26\3\2\2\2\u0d25\u0d27\5\u00fc\177\2\u0d26")
        buf.write(u"\u0d25\3\2\2\2\u0d26\u0d27\3\2\2\2\u0d27\u00e7\3\2\2")
        buf.write(u"\2\u0d28\u0d2a\7\u009b\2\2\u0d29\u0d2b\t$\2\2\u0d2a\u0d29")
        buf.write(u"\3\2\2\2\u0d2a\u0d2b\3\2\2\2\u0d2b\u0d2c\3\2\2\2\u0d2c")
        buf.write(u"\u0d2d\5\u00e2r\2\u0d2d\u00e9\3\2\2\2\u0d2e\u0d30\7\u009b")
        buf.write(u"\2\2\u0d2f\u0d31\t$\2\2\u0d30\u0d2f\3\2\2\2\u0d30\u0d31")
        buf.write(u"\3\2\2\2\u0d31\u0d34\3\2\2\2\u0d32\u0d35\5\u00e6t\2\u0d33")
        buf.write(u"\u0d35\5\u00e2r\2\u0d34\u0d32\3\2\2\2\u0d34\u0d33\3\2")
        buf.write(u"\2\2\u0d35\u00eb\3\2\2\2\u0d36\u0d3f\t,\2\2\u0d37\u0d3f")
        buf.write(u"\7A\2\2\u0d38\u0d3f\7\u0092\2\2\u0d39\u0d3f\7\u008f\2")
        buf.write(u"\2\u0d3a\u0d3f\7\u008d\2\2\u0d3b\u0d3f\7\u01f2\2\2\u0d3c")
        buf.write(u"\u0d3f\t-\2\2\u0d3d\u0d3f\7\u008e\2\2\u0d3e\u0d36\3\2")
        buf.write(u"\2\2\u0d3e\u0d37\3\2\2\2\u0d3e\u0d38\3\2\2\2\u0d3e\u0d39")
        buf.write(u"\3\2\2\2\u0d3e\u0d3a\3\2\2\2\u0d3e\u0d3b\3\2\2\2\u0d3e")
        buf.write(u"\u0d3c\3\2\2\2\u0d3e\u0d3d\3\2\2\2\u0d3f\u00ed\3\2\2")
        buf.write(u"\2\u0d40\u0d43\7\u03a2\2\2\u0d41\u0d43\5\u00f0y\2\u0d42")
        buf.write(u"\u0d40\3\2\2\2\u0d42\u0d41\3\2\2\2\u0d43\u0d48\3\2\2")
        buf.write(u"\2\u0d44\u0d45\7\u03b5\2\2\u0d45\u0d47\5\u00f0y\2\u0d46")
        buf.write(u"\u0d44\3\2\2\2\u0d47\u0d4a\3\2\2\2\u0d48\u0d46\3\2\2")
        buf.write(u"\2\u0d48\u0d49\3\2\2\2\u0d49\u00ef\3\2\2\2\u0d4a\u0d48")
        buf.write(u"\3\2\2\2\u0d4b\u0d4c\5\u01e6\u00f4\2\u0d4c\u0d4d\7\u03b2")
        buf.write(u"\2\2\u0d4d\u0d4e\7\u03a2\2\2\u0d4e\u0d69\3\2\2\2\u0d4f")
        buf.write(u"\u0d54\5\u01ea\u00f6\2\u0d50\u0d52\7\f\2\2\u0d51\u0d50")
        buf.write(u"\3\2\2\2\u0d51\u0d52\3\2\2\2\u0d52\u0d53\3\2\2\2\u0d53")
        buf.write(u"\u0d55\5\u0200\u0101\2\u0d54\u0d51\3\2\2\2\u0d54\u0d55")
        buf.write(u"\3\2\2\2\u0d55\u0d69\3\2\2\2\u0d56\u0d5b\5\u0238\u011d")
        buf.write(u"\2\u0d57\u0d59\7\f\2\2\u0d58\u0d57\3\2\2\2\u0d58\u0d59")
        buf.write(u"\3\2\2\2\u0d59\u0d5a\3\2\2\2\u0d5a\u0d5c\5\u0200\u0101")
        buf.write(u"\2\u0d5b\u0d58\3\2\2\2\u0d5b\u0d5c\3\2\2\2\u0d5c\u0d69")
        buf.write(u"\3\2\2\2\u0d5d\u0d5e\7\u03cd\2\2\u0d5e\u0d60\7\u0399")
        buf.write(u"\2\2\u0d5f\u0d5d\3\2\2\2\u0d5f\u0d60\3\2\2\2\u0d60\u0d61")
        buf.write(u"\3\2\2\2\u0d61\u0d66\5\u024c\u0127\2\u0d62\u0d64\7\f")
        buf.write(u"\2\2\u0d63\u0d62\3\2\2\2\u0d63\u0d64\3\2\2\2\u0d64\u0d65")
        buf.write(u"\3\2\2\2\u0d65\u0d67\5\u0200\u0101\2\u0d66\u0d63\3\2")
        buf.write(u"\2\2\u0d66\u0d67\3\2\2\2\u0d67\u0d69\3\2\2\2\u0d68\u0d4b")
        buf.write(u"\3\2\2\2\u0d68\u0d4f\3\2\2\2\u0d68\u0d56\3\2\2\2\u0d68")
        buf.write(u"\u0d5f\3\2\2\2\u0d69\u00f1\3\2\2\2\u0d6a\u0d6b\7K\2\2")
        buf.write(u"\u0d6b\u0d70\5\u00bc_\2\u0d6c\u0d6d\7\u03b5\2\2\u0d6d")
        buf.write(u"\u0d6f\5\u00bc_\2\u0d6e\u0d6c\3\2\2\2\u0d6f\u0d72\3\2")
        buf.write(u"\2\2\u0d70\u0d6e\3\2\2\2\u0d70\u0d71\3\2\2\2\u0d71\u0d8f")
        buf.write(u"\3\2\2\2\u0d72\u0d70\3\2\2\2\u0d73\u0d74\7K\2\2\u0d74")
        buf.write(u"\u0d75\7\u0130\2\2\u0d75\u0d8f\7\u03c2\2\2\u0d76\u0d77")
        buf.write(u"\7K\2\2\u0d77\u0d78\7n\2\2\u0d78\u0d7c\7\u03c2\2\2\u0d79")
        buf.write(u"\u0d7a\7\27\2\2\u0d7a\u0d7b\7\u0085\2\2\u0d7b\u0d7d\5")
        buf.write(u"\u01f2\u00fa\2\u0d7c\u0d79\3\2\2\2\u0d7c\u0d7d\3\2\2")
        buf.write(u"\2\u0d7d\u0d84\3\2\2\2\u0d7e\u0d80\t!\2\2\u0d7f\u0d81")
        buf.write(u"\5\u00f4{\2\u0d80\u0d7f\3\2\2\2\u0d81\u0d82\3\2\2\2\u0d82")
        buf.write(u"\u0d80\3\2\2\2\u0d82\u0d83\3\2\2\2\u0d83\u0d85\3\2\2")
        buf.write(u"\2\u0d84\u0d7e\3\2\2\2\u0d84\u0d85\3\2\2\2\u0d85\u0d8c")
        buf.write(u"\3\2\2\2\u0d86\u0d88\7X\2\2\u0d87\u0d89\5\u00f6|\2\u0d88")
        buf.write(u"\u0d87\3\2\2\2\u0d89\u0d8a\3\2\2\2\u0d8a\u0d88\3\2\2")
        buf.write(u"\2\u0d8a\u0d8b\3\2\2\2\u0d8b\u0d8d\3\2\2\2\u0d8c\u0d86")
        buf.write(u"\3\2\2\2\u0d8c\u0d8d\3\2\2\2\u0d8d\u0d8f\3\2\2\2\u0d8e")
        buf.write(u"\u0d6a\3\2\2\2\u0d8e\u0d73\3\2\2\2\u0d8e\u0d76\3\2\2")
        buf.write(u"\2\u0d8f\u00f3\3\2\2\2\u0d90\u0d91\7\u0094\2\2\u0d91")
        buf.write(u"\u0d92\7\21\2\2\u0d92\u0d9d\7\u03c2\2\2\u0d93\u0d95\7")
        buf.write(u"i\2\2\u0d94\u0d93\3\2\2\2\u0d94\u0d95\3\2\2\2\u0d95\u0d96")
        buf.write(u"\3\2\2\2\u0d96\u0d97\7\62\2\2\u0d97\u0d98\7\21\2\2\u0d98")
        buf.write(u"\u0d9d\7\u03c2\2\2\u0d99\u0d9a\7\63\2\2\u0d9a\u0d9b\7")
        buf.write(u"\21\2\2\u0d9b\u0d9d\7\u03c2\2\2\u0d9c\u0d90\3\2\2\2\u0d9c")
        buf.write(u"\u0d94\3\2\2\2\u0d9c\u0d99\3\2\2\2\u0d9d\u00f5\3\2\2")
        buf.write(u"\2\u0d9e\u0d9f\7\u0091\2\2\u0d9f\u0da0\7\21\2\2\u0da0")
        buf.write(u"\u0da5\7\u03c2\2\2\u0da1\u0da2\7\u0094\2\2\u0da2\u0da3")
        buf.write(u"\7\21\2\2\u0da3\u0da5\7\u03c2\2\2\u0da4\u0d9e\3\2\2\2")
        buf.write(u"\u0da4\u0da1\3\2\2\2\u0da5\u00f7\3\2\2\2\u0da6\u0da7")
        buf.write(u"\7<\2\2\u0da7\u0daa\5\u00d4k\2\u0da8\u0da9\7\u00a5\2")
        buf.write(u"\2\u0da9\u0dab\5\u024c\u0127\2\u0daa\u0da8\3\2\2\2\u0daa")
        buf.write(u"\u0dab\3\2\2\2\u0dab\u0dba\3\2\2\2\u0dac\u0dad\7?\2\2")
        buf.write(u"\u0dad\u0dae\7\21\2\2\u0dae\u0db3\5\u00fa~\2\u0daf\u0db0")
        buf.write(u"\7\u03b5\2\2\u0db0\u0db2\5\u00fa~\2\u0db1\u0daf\3\2\2")
        buf.write(u"\2\u0db2\u0db5\3\2\2\2\u0db3\u0db1\3\2\2\2\u0db3\u0db4")
        buf.write(u"\3\2\2\2\u0db4\u0db8\3\2\2\2\u0db5\u0db3\3\2\2\2\u0db6")
        buf.write(u"\u0db7\7\u00a7\2\2\u0db7\u0db9\7\u01d9\2\2\u0db8\u0db6")
        buf.write(u"\3\2\2\2\u0db8\u0db9\3\2\2\2\u0db9\u0dbb\3\2\2\2\u0dba")
        buf.write(u"\u0dac\3\2\2\2\u0dba\u0dbb\3\2\2\2\u0dbb\u0dbe\3\2\2")
        buf.write(u"\2\u0dbc\u0dbd\7@\2\2\u0dbd\u0dbf\5\u024c\u0127\2\u0dbe")
        buf.write(u"\u0dbc\3\2\2\2\u0dbe\u0dbf\3\2\2\2\u0dbf\u00f9\3\2\2")
        buf.write(u"\2\u0dc0\u0dc2\5\u024c\u0127\2\u0dc1\u0dc3\t(\2\2\u0dc2")
        buf.write(u"\u0dc1\3\2\2\2\u0dc2\u0dc3\3\2\2\2\u0dc3\u00fb\3\2\2")
        buf.write(u"\2\u0dc4\u0dcf\7V\2\2\u0dc5\u0dc6\5\u0206\u0104\2\u0dc6")
        buf.write(u"\u0dc7\7\u03b5\2\2\u0dc7\u0dc9\3\2\2\2\u0dc8\u0dc5\3")
        buf.write(u"\2\2\2\u0dc8\u0dc9\3\2\2\2\u0dc9\u0dca\3\2\2\2\u0dca")
        buf.write(u"\u0dd0\5\u0206\u0104\2\u0dcb\u0dcc\5\u0206\u0104\2\u0dcc")
        buf.write(u"\u0dcd\7\u01a2\2\2\u0dcd\u0dce\5\u0206\u0104\2\u0dce")
        buf.write(u"\u0dd0\3\2\2\2\u0dcf\u0dc8\3\2\2\2\u0dcf\u0dcb\3\2\2")
        buf.write(u"\2\u0dd0\u00fd\3\2\2\2\u0dd1\u0dd2\7\u01f6\2\2\u0dd2")
        buf.write(u"\u0ddb\7\u020a\2\2\u0dd3\u0dd8\5\u0114\u008b\2\u0dd4")
        buf.write(u"\u0dd5\7\u03b5\2\2\u0dd5\u0dd7\5\u0114\u008b\2\u0dd6")
        buf.write(u"\u0dd4\3\2\2\2\u0dd7\u0dda\3\2\2\2\u0dd8\u0dd6\3\2\2")
        buf.write(u"\2\u0dd8\u0dd9\3\2\2\2\u0dd9\u0ddc\3\2\2\2\u0dda\u0dd8")
        buf.write(u"\3\2\2\2\u0ddb\u0dd3\3\2\2\2\u0ddb\u0ddc\3\2\2\2\u0ddc")
        buf.write(u"\u00ff\3\2\2\2\u0ddd\u0ddf\7\u0102\2\2\u0dde\u0de0\7")
        buf.write(u"\u021e\2\2\u0ddf\u0dde\3\2\2\2\u0ddf\u0de0\3\2\2\2\u0de0")
        buf.write(u"\u0101\3\2\2\2\u0de1\u0de3\7\u0117\2\2\u0de2\u0de4\7")
        buf.write(u"\u021e\2\2\u0de3\u0de2\3\2\2\2\u0de3\u0de4\3\2\2\2\u0de4")
        buf.write(u"\u0dea\3\2\2\2\u0de5\u0de7\7\13\2\2\u0de6\u0de8\7\u019e")
        buf.write(u"\2\2\u0de7\u0de6\3\2\2\2\u0de7\u0de8\3\2\2\2\u0de8\u0de9")
        buf.write(u"\3\2\2\2\u0de9\u0deb\7\u010b\2\2\u0dea\u0de5\3\2\2\2")
        buf.write(u"\u0dea\u0deb\3\2\2\2\u0deb\u0df0\3\2\2\2\u0dec\u0dee")
        buf.write(u"\7\u019e\2\2\u0ded\u0dec\3\2\2\2\u0ded\u0dee\3\2\2\2")
        buf.write(u"\u0dee\u0def\3\2\2\2\u0def\u0df1\7x\2\2\u0df0\u0ded\3")
        buf.write(u"\2\2\2\u0df0\u0df1\3\2\2\2\u0df1\u0103\3\2\2\2\u0df2")
        buf.write(u"\u0df4\7\u01d8\2\2\u0df3\u0df5\7\u021e\2\2\u0df4\u0df3")
        buf.write(u"\3\2\2\2\u0df4\u0df5\3\2\2\2\u0df5\u0dfb\3\2\2\2\u0df6")
        buf.write(u"\u0df8\7\13\2\2\u0df7\u0df9\7\u019e\2\2\u0df8\u0df7\3")
        buf.write(u"\2\2\2\u0df8\u0df9\3\2\2\2\u0df9\u0dfa\3\2\2\2\u0dfa")
        buf.write(u"\u0dfc\7\u010b\2\2\u0dfb\u0df6\3\2\2\2\u0dfb\u0dfc\3")
        buf.write(u"\2\2\2\u0dfc\u0e01\3\2\2\2\u0dfd\u0dff\7\u019e\2\2\u0dfe")
        buf.write(u"\u0dfd\3\2\2\2\u0dfe\u0dff\3\2\2\2\u0dff\u0e00\3\2\2")
        buf.write(u"\2\u0e00\u0e02\7x\2\2\u0e01\u0dfe\3\2\2\2\u0e01\u0e02")
        buf.write(u"\3\2\2\2\u0e02\u0105\3\2\2\2\u0e03\u0e04\7\u01de\2\2")
        buf.write(u"\u0e04\u0e05\5\u0200\u0101\2\u0e05\u0107\3\2\2\2\u0e06")
        buf.write(u"\u0e08\7\u01d8\2\2\u0e07\u0e09\7\u021e\2\2\u0e08\u0e07")
        buf.write(u"\3\2\2\2\u0e08\u0e09\3\2\2\2\u0e09\u0e0a\3\2\2\2\u0e0a")
        buf.write(u"\u0e0c\7\u0096\2\2\u0e0b\u0e0d\7\u01de\2\2\u0e0c\u0e0b")
        buf.write(u"\3\2\2\2\u0e0c\u0e0d\3\2\2\2\u0e0d\u0e0e\3\2\2\2\u0e0e")
        buf.write(u"\u0e0f\5\u0200\u0101\2\u0e0f\u0109\3\2\2\2\u0e10\u0e11")
        buf.write(u"\7x\2\2\u0e11\u0e12\7\u01de\2\2\u0e12\u0e13\5\u0200\u0101")
        buf.write(u"\2\u0e13\u010b\3\2\2\2\u0e14\u0e15\7Z\2\2\u0e15\u0e16")
        buf.write(u"\7\u0230\2\2\u0e16\u0e1b\5\u0116\u008c\2\u0e17\u0e18")
        buf.write(u"\7\u03b5\2\2\u0e18\u0e1a\5\u0116\u008c\2\u0e19\u0e17")
        buf.write(u"\3\2\2\2\u0e1a\u0e1d\3\2\2\2\u0e1b\u0e19\3\2\2\2\u0e1b")
        buf.write(u"\u0e1c\3\2\2\2\u0e1c\u010d\3\2\2\2\u0e1d\u0e1b\3\2\2")
        buf.write(u"\2\u0e1e\u0e1f\7\u009d\2\2\u0e1f\u0e20\7\u0230\2\2\u0e20")
        buf.write(u"\u010f\3\2\2\2\u0e21\u0e22\7\u0085\2\2\u0e22\u0e23\7")
        buf.write(u"\u00fe\2\2\u0e23\u0e24\7\u03aa\2\2\u0e24\u0e25\t\26\2")
        buf.write(u"\2\u0e25\u0111\3\2\2\2\u0e26\u0e28\7\u0085\2\2\u0e27")
        buf.write(u"\u0e29\t.\2\2\u0e28\u0e27\3\2\2\2\u0e28\u0e29\3\2\2\2")
        buf.write(u"\u0e29\u0e2a\3\2\2\2\u0e2a\u0e2b\7\u020a\2\2\u0e2b\u0e30")
        buf.write(u"\5\u011a\u008e\2\u0e2c\u0e2d\7\u03b5\2\2\u0e2d\u0e2f")
        buf.write(u"\5\u011a\u008e\2\u0e2e\u0e2c\3\2\2\2\u0e2f\u0e32\3\2")
        buf.write(u"\2\2\u0e30\u0e2e\3\2\2\2\u0e30\u0e31\3\2\2\2\u0e31\u0113")
        buf.write(u"\3\2\2\2\u0e32\u0e30\3\2\2\2\u0e33\u0e34\7\u00a7\2\2")
        buf.write(u"\u0e34\u0e35\7\u011e\2\2\u0e35\u0e3b\7\u01e9\2\2\u0e36")
        buf.write(u"\u0e37\7t\2\2\u0e37\u0e3b\7\u00a8\2\2\u0e38\u0e39\7t")
        buf.write(u"\2\2\u0e39\u0e3b\7\u01a7\2\2\u0e3a\u0e33\3\2\2\2\u0e3a")
        buf.write(u"\u0e36\3\2\2\2\u0e3a\u0e38\3\2\2\2\u0e3b\u0115\3\2\2")
        buf.write(u"\2\u0e3c\u0e41\5\u01e8\u00f5\2\u0e3d\u0e3f\7\f\2\2\u0e3e")
        buf.write(u"\u0e3d\3\2\2\2\u0e3e\u0e3f\3\2\2\2\u0e3f\u0e40\3\2\2")
        buf.write(u"\2\u0e40\u0e42\5\u0200\u0101\2\u0e41\u0e3e\3\2\2\2\u0e41")
        buf.write(u"\u0e42\3\2\2\2\u0e42\u0e43\3\2\2\2\u0e43\u0e44\5\u0118")
        buf.write(u"\u008d\2\u0e44\u0117\3\2\2\2\u0e45\u0e47\7t\2\2\u0e46")
        buf.write(u"\u0e48\7\u0172\2\2\u0e47\u0e46\3\2\2\2\u0e47\u0e48\3")
        buf.write(u"\2\2\2\u0e48\u0e4e\3\2\2\2\u0e49\u0e4b\7\\\2\2\u0e4a")
        buf.write(u"\u0e49\3\2\2\2\u0e4a\u0e4b\3\2\2\2\u0e4b\u0e4c\3\2\2")
        buf.write(u"\2\u0e4c\u0e4e\7\u00a8\2\2\u0e4d\u0e45\3\2\2\2\u0e4d")
        buf.write(u"\u0e4a\3\2\2\2\u0e4e\u0119\3\2\2\2\u0e4f\u0e50\7\u0168")
        buf.write(u"\2\2\u0e50\u0e51\7\u0170\2\2\u0e51\u0e57\5\u011c\u008f")
        buf.write(u"\2\u0e52\u0e53\7t\2\2\u0e53\u0e57\7\u00a8\2\2\u0e54\u0e55")
        buf.write(u"\7t\2\2\u0e55\u0e57\7\u01a7\2\2\u0e56\u0e4f\3\2\2\2\u0e56")
        buf.write(u"\u0e52\3\2\2\2\u0e56\u0e54\3\2\2\2\u0e57\u011b\3\2\2")
        buf.write(u"\2\u0e58\u0e59\7\u026c\2\2\u0e59\u0e60\7t\2\2\u0e5a\u0e5b")
        buf.write(u"\7t\2\2\u0e5b\u0e60\7\u026d\2\2\u0e5c\u0e5d\7t\2\2\u0e5d")
        buf.write(u"\u0e60\7\u026e\2\2\u0e5e\u0e60\7\u026f\2\2\u0e5f\u0e58")
        buf.write(u"\3\2\2\2\u0e5f\u0e5a\3\2\2\2\u0e5f\u0e5c\3\2\2\2\u0e5f")
        buf.write(u"\u0e5e\3\2\2\2\u0e60\u011d\3\2\2\2\u0e61\u0e62\7\26\2")
        buf.write(u"\2\u0e62\u0e63\7\u0175\2\2\u0e63\u0e64\7\u0096\2\2\u0e64")
        buf.write(u"\u0e69\5\u0130\u0099\2\u0e65\u0e66\7\u03b5\2\2\u0e66")
        buf.write(u"\u0e68\5\u0130\u0099\2\u0e67\u0e65\3\2\2\2\u0e68\u0e6b")
        buf.write(u"\3\2\2\2\u0e69\u0e67\3\2\2\2\u0e69\u0e6a\3\2\2\2\u0e6a")
        buf.write(u"\u0e6d\3\2\2\2\u0e6b\u0e69\3\2\2\2\u0e6c\u0e6e\5\u0138")
        buf.write(u"\u009d\2\u0e6d\u0e6c\3\2\2\2\u0e6d\u0e6e\3\2\2\2\u0e6e")
        buf.write(u"\u011f\3\2\2\2\u0e6f\u0e70\7\26\2\2\u0e70\u0e71\7\u01d4")
        buf.write(u"\2\2\u0e71\u0e72\7\u014a\2\2\u0e72\u0e77\5\u013a\u009e")
        buf.write(u"\2\u0e73\u0e74\7\u03b5\2\2\u0e74\u0e76\5\u013a\u009e")
        buf.write(u"\2\u0e75\u0e73\3\2\2\2\u0e76\u0e79\3\2\2\2\u0e77\u0e75")
        buf.write(u"\3\2\2\2\u0e77\u0e78\3\2\2\2\u0e78\u0121\3\2\2\2\u0e79")
        buf.write(u"\u0e77\3\2\2\2\u0e7a\u0e7b\7r\2\2\u0e7b\u0e7c\t/\2\2")
        buf.write(u"\u0e7c\u0e81\7\u0174\2\2\u0e7d\u0e7e\7\u0096\2\2\u0e7e")
        buf.write(u"\u0e82\7\u03c2\2\2\u0e7f\u0e80\7\16\2\2\u0e80\u0e82\7")
        buf.write(u"\u03c2\2\2\u0e81\u0e7d\3\2\2\2\u0e81\u0e7f\3\2\2\2\u0e82")
        buf.write(u"\u0123\3\2\2\2\u0e83\u0e84\7\u01d5\2\2\u0e84\u0e85\7")
        buf.write(u"\u0175\2\2\u0e85\u0125\3\2\2\2\u0e86\u0e87\7\u01d5\2")
        buf.write(u"\2\u0e87\u0e89\7\u01e7\2\2\u0e88\u0e8a\7\b\2\2\u0e89")
        buf.write(u"\u0e88\3\2\2\2\u0e89\u0e8a\3\2\2\2\u0e8a\u0e8c\3\2\2")
        buf.write(u"\2\u0e8b\u0e8d\5\u0138\u009d\2\u0e8c\u0e8b\3\2\2\2\u0e8c")
        buf.write(u"\u0e8d\3\2\2\2\u0e8d\u0127\3\2\2\2\u0e8e\u0e8f\7\u01f6")
        buf.write(u"\2\2\u0e8f\u0e98\7\u01e7\2\2\u0e90\u0e95\5\u013e\u00a0")
        buf.write(u"\2\u0e91\u0e92\7\u03b5\2\2\u0e92\u0e94\5\u013e\u00a0")
        buf.write(u"\2\u0e93\u0e91\3\2\2\2\u0e94\u0e97\3\2\2\2\u0e95\u0e93")
        buf.write(u"\3\2\2\2\u0e95\u0e96\3\2\2\2\u0e96\u0e99\3\2\2\2\u0e97")
        buf.write(u"\u0e95\3\2\2\2\u0e98\u0e90\3\2\2\2\u0e98\u0e99\3\2\2")
        buf.write(u"\2\u0e99\u0e9c\3\2\2\2\u0e9a\u0e9b\7\u0212\2\2\u0e9b")
        buf.write(u"\u0e9d\5\u0140\u00a1\2\u0e9c\u0e9a\3\2\2\2\u0e9c\u0e9d")
        buf.write(u"\3\2\2\2\u0e9d\u0ea1\3\2\2\2\u0e9e\u0ea0\5\u0142\u00a2")
        buf.write(u"\2\u0e9f\u0e9e\3\2\2\2\u0ea0\u0ea3\3\2\2\2\u0ea1\u0e9f")
        buf.write(u"\3\2\2\2\u0ea1\u0ea2\3\2\2\2\u0ea2\u0ea5\3\2\2\2\u0ea3")
        buf.write(u"\u0ea1\3\2\2\2\u0ea4\u0ea6\5\u0138\u009d\2\u0ea5\u0ea4")
        buf.write(u"\3\2\2\2\u0ea5\u0ea6\3\2\2\2\u0ea6\u0129\3\2\2\2\u0ea7")
        buf.write(u"\u0ea8\7\u01fc\2\2\u0ea8\u0eb1\7\u01e7\2\2\u0ea9\u0eae")
        buf.write(u"\5\u013e\u00a0\2\u0eaa\u0eab\7\u03b5\2\2\u0eab\u0ead")
        buf.write(u"\5\u013e\u00a0\2\u0eac\u0eaa\3\2\2\2\u0ead\u0eb0\3\2")
        buf.write(u"\2\2\u0eae\u0eac\3\2\2\2\u0eae\u0eaf\3\2\2\2\u0eaf\u0eb2")
        buf.write(u"\3\2\2\2\u0eb0\u0eae\3\2\2\2\u0eb1\u0ea9\3\2\2\2\u0eb1")
        buf.write(u"\u0eb2\3\2\2\2\u0eb2\u012b\3\2\2\2\u0eb3\u0eb4\7\u01f6")
        buf.write(u"\2\2\u0eb4\u0eb5\7\u0155\2\2\u0eb5\u012d\3\2\2\2\u0eb6")
        buf.write(u"\u0eb7\7\u01fc\2\2\u0eb7\u0eb8\7\u0155\2\2\u0eb8\u012f")
        buf.write(u"\3\2\2\2\u0eb9\u0eba\5\u0132\u009a\2\u0eba\u0ebb\7\u03aa")
        buf.write(u"\2\2\u0ebb\u0ebc\7\u03c2\2\2\u0ebc\u0ed7\3\2\2\2\u0ebd")
        buf.write(u"\u0ebe\5\u0134\u009b\2\u0ebe\u0ebf\7\u03aa\2\2\u0ebf")
        buf.write(u"\u0ec0\5\u0206\u0104\2\u0ec0\u0ed7\3\2\2\2\u0ec1\u0ec2")
        buf.write(u"\5\u0136\u009c\2\u0ec2\u0ec3\7\u03aa\2\2\u0ec3\u0ec4")
        buf.write(u"\t\26\2\2\u0ec4\u0ed7\3\2\2\2\u0ec5\u0ec6\7\u0179\2\2")
        buf.write(u"\u0ec6\u0ec7\7\u03aa\2\2\u0ec7\u0ed7\7\u03c5\2\2\u0ec8")
        buf.write(u"\u0ec9\7\u015c\2\2\u0ec9\u0eca\7\u03aa\2\2\u0eca\u0ed3")
        buf.write(u"\7\u03b3\2\2\u0ecb\u0ed0\5\u0200\u0101\2\u0ecc\u0ecd")
        buf.write(u"\7\u03b5\2\2\u0ecd\u0ecf\5\u0200\u0101\2\u0ece\u0ecc")
        buf.write(u"\3\2\2\2\u0ecf\u0ed2\3\2\2\2\u0ed0\u0ece\3\2\2\2\u0ed0")
        buf.write(u"\u0ed1\3\2\2\2\u0ed1\u0ed4\3\2\2\2\u0ed2\u0ed0\3\2\2")
        buf.write(u"\2\u0ed3\u0ecb\3\2\2\2\u0ed3\u0ed4\3\2\2\2\u0ed4\u0ed5")
        buf.write(u"\3\2\2\2\u0ed5\u0ed7\7\u03b4\2\2\u0ed6\u0eb9\3\2\2\2")
        buf.write(u"\u0ed6\u0ebd\3\2\2\2\u0ed6\u0ec1\3\2\2\2\u0ed6\u0ec5")
        buf.write(u"\3\2\2\2\u0ed6\u0ec8\3\2\2\2\u0ed7\u0131\3\2\2\2\u0ed8")
        buf.write(u"\u0ed9\t\60\2\2\u0ed9\u0133\3\2\2\2\u0eda\u0edb\t\61")
        buf.write(u"\2\2\u0edb\u0135\3\2\2\2\u0edc\u0edd\t\62\2\2\u0edd\u0137")
        buf.write(u"\3\2\2\2\u0ede\u0edf\79\2\2\u0edf\u0ee0\7\u010d\2\2\u0ee0")
        buf.write(u"\u0ee1\7\u03c2\2\2\u0ee1\u0139\3\2\2\2\u0ee2\u0ee3\7")
        buf.write(u"\u01cd\2\2\u0ee3\u0ee4\7\u03aa\2\2\u0ee4\u0ee5\7\u03b3")
        buf.write(u"\2\2\u0ee5\u0ee6\5\u021e\u0110\2\u0ee6\u0ee7\7\u03b4")
        buf.write(u"\2\2\u0ee7\u0f14\3\2\2\2\u0ee8\u0ee9\7\u01cf\2\2\u0ee9")
        buf.write(u"\u0eea\7\u03aa\2\2\u0eea\u0eeb\7\u03b3\2\2\u0eeb\u0eec")
        buf.write(u"\5\u021e\u0110\2\u0eec\u0eed\7\u03b4\2\2\u0eed\u0f14")
        buf.write(u"\3\2\2\2\u0eee\u0eef\7\u01ce\2\2\u0eef\u0ef0\7\u03aa")
        buf.write(u"\2\2\u0ef0\u0ef1\7\u03b3\2\2\u0ef1\u0ef2\5\u0220\u0111")
        buf.write(u"\2\u0ef2\u0ef3\7\u03b4\2\2\u0ef3\u0f14\3\2\2\2\u0ef4")
        buf.write(u"\u0ef5\7\u01d0\2\2\u0ef5\u0ef6\7\u03aa\2\2\u0ef6\u0ef7")
        buf.write(u"\7\u03b3\2\2\u0ef7\u0ef8\5\u0220\u0111\2\u0ef8\u0ef9")
        buf.write(u"\7\u03b4\2\2\u0ef9\u0f14\3\2\2\2\u0efa\u0efb\7\u01d2")
        buf.write(u"\2\2\u0efb\u0efc\7\u03aa\2\2\u0efc\u0efd\7\u03b3\2\2")
        buf.write(u"\u0efd\u0efe\5\u022a\u0116\2\u0efe\u0eff\7\u03b4\2\2")
        buf.write(u"\u0eff\u0f14\3\2\2\2\u0f00\u0f01\7\u01d3\2\2\u0f01\u0f02")
        buf.write(u"\7\u03aa\2\2\u0f02\u0f03\7\u03b3\2\2\u0f03\u0f04\5\u022a")
        buf.write(u"\u0116\2\u0f04\u0f05\7\u03b4\2\2\u0f05\u0f14\3\2\2\2")
        buf.write(u"\u0f06\u0f07\7\u01d1\2\2\u0f07\u0f08\7\u03aa\2\2\u0f08")
        buf.write(u"\u0f09\7\u03b3\2\2\u0f09\u0f0e\5\u013c\u009f\2\u0f0a")
        buf.write(u"\u0f0b\7\u03b5\2\2\u0f0b\u0f0d\5\u013c\u009f\2\u0f0c")
        buf.write(u"\u0f0a\3\2\2\2\u0f0d\u0f10\3\2\2\2\u0f0e\u0f0c\3\2\2")
        buf.write(u"\2\u0f0e\u0f0f\3\2\2\2\u0f0f\u0f11\3\2\2\2\u0f10\u0f0e")
        buf.write(u"\3\2\2\2\u0f11\u0f12\7\u03b4\2\2\u0f12\u0f14\3\2\2\2")
        buf.write(u"\u0f13\u0ee2\3\2\2\2\u0f13\u0ee8\3\2\2\2\u0f13\u0eee")
        buf.write(u"\3\2\2\2\u0f13\u0ef4\3\2\2\2\u0f13\u0efa\3\2\2\2\u0f13")
        buf.write(u"\u0f00\3\2\2\2\u0f13\u0f06\3\2\2\2\u0f14\u013b\3\2\2")
        buf.write(u"\2\u0f15\u0f16\7\u03b3\2\2\u0f16\u0f17\5\u01e8\u00f5")
        buf.write(u"\2\u0f17\u0f18\7\u03b5\2\2\u0f18\u0f19\5\u01e8\u00f5")
        buf.write(u"\2\u0f19\u0f1a\7\u03b4\2\2\u0f1a\u013d\3\2\2\2\u0f1b")
        buf.write(u"\u0f1c\t\63\2\2\u0f1c\u013f\3\2\2\2\u0f1d\u0f1e\t\64")
        buf.write(u"\2\2\u0f1e\u0f1f\7\u03aa\2\2\u0f1f\u0f30\5\u0144\u00a3")
        buf.write(u"\2\u0f20\u0f21\7\u017b\2\2\u0f21\u0f22\7\u03aa\2\2\u0f22")
        buf.write(u"\u0f23\7\u03c2\2\2\u0f23\u0f24\7\u03b5\2\2\u0f24\u0f25")
        buf.write(u"\7\u017c\2\2\u0f25\u0f26\7\u03aa\2\2\u0f26\u0f30\5\u0206")
        buf.write(u"\u0104\2\u0f27\u0f28\7\u01c7\2\2\u0f28\u0f29\7\u03aa")
        buf.write(u"\2\2\u0f29\u0f2a\7\u03c2\2\2\u0f2a\u0f2b\7\u03b5\2\2")
        buf.write(u"\u0f2b\u0f2c\7\u01c8\2\2\u0f2c\u0f2d\7\u03aa\2\2\u0f2d")
        buf.write(u"\u0f30\5\u0206\u0104\2\u0f2e\u0f30\7\u01f0\2\2\u0f2f")
        buf.write(u"\u0f1d\3\2\2\2\u0f2f\u0f20\3\2\2\2\u0f2f\u0f27\3\2\2")
        buf.write(u"\2\u0f2f\u0f2e\3\2\2\2\u0f30\u0141\3\2\2\2\u0f31\u0f32")
        buf.write(u"\7\u0214\2\2\u0f32\u0f33\7\u03aa\2\2\u0f33\u0f3e\7\u03c2")
        buf.write(u"\2\2\u0f34\u0f35\7\u01b2\2\2\u0f35\u0f36\7\u03aa\2\2")
        buf.write(u"\u0f36\u0f3e\7\u03c2\2\2\u0f37\u0f38\7\u0127\2\2\u0f38")
        buf.write(u"\u0f39\7\u03aa\2\2\u0f39\u0f3e\7\u03c2\2\2\u0f3a\u0f3b")
        buf.write(u"\7\u01b5\2\2\u0f3b\u0f3c\7\u03aa\2\2\u0f3c\u0f3e\7\u03c2")
        buf.write(u"\2\2\u0f3d\u0f31\3\2\2\2\u0f3d\u0f34\3\2\2\2\u0f3d\u0f37")
        buf.write(u"\3\2\2\2\u0f3d\u0f3a\3\2\2\2\u0f3e\u0143\3\2\2\2\u0f3f")
        buf.write(u"\u0f44\5\u01f8\u00fd\2\u0f40\u0f41\7\u03b5\2\2\u0f41")
        buf.write(u"\u0f43\5\u01f8\u00fd\2\u0f42\u0f40\3\2\2\2\u0f43\u0f46")
        buf.write(u"\3\2\2\2\u0f44\u0f42\3\2\2\2\u0f44\u0f45\3\2\2\2\u0f45")
        buf.write(u"\u0f49\3\2\2\2\u0f46\u0f44\3\2\2\2\u0f47\u0f49\7\u03c2")
        buf.write(u"\2\2\u0f48\u0f3f\3\2\2\2\u0f48\u0f47\3\2\2\2\u0f49\u0145")
        buf.write(u"\3\2\2\2\u0f4a\u0f4b\7\u0221\2\2\u0f4b\u0f4c\t\65\2\2")
        buf.write(u"\u0f4c\u0f4e\5\u01fa\u00fe\2\u0f4d\u0f4f\t\66\2\2\u0f4e")
        buf.write(u"\u0f4d\3\2\2\2\u0f4e\u0f4f\3\2\2\2\u0f4f\u0147\3\2\2")
        buf.write(u"\2\u0f50\u0f51\7\u0221\2\2\u0f51\u0f52\7\u0135\2\2\u0f52")
        buf.write(u"\u0f58\5\u01fa\u00fe\2\u0f53\u0f56\7\u0202\2\2\u0f54")
        buf.write(u"\u0f55\79\2\2\u0f55\u0f57\7\u0193\2\2\u0f56\u0f54\3\2")
        buf.write(u"\2\2\u0f56\u0f57\3\2\2\2\u0f57\u0f59\3\2\2\2\u0f58\u0f53")
        buf.write(u"\3\2\2\2\u0f58\u0f59\3\2\2\2\u0f59\u0149\3\2\2\2\u0f5a")
        buf.write(u"\u0f5b\7\u0221\2\2\u0f5b\u0f5c\7\u01b9\2\2\u0f5c\u0f5d")
        buf.write(u"\5\u01fa\u00fe\2\u0f5d\u014b\3\2\2\2\u0f5e\u0f5f\7\u0221")
        buf.write(u"\2\2\u0f5f\u0f60\7\u0117\2\2\u0f60\u0f63\5\u01fa\u00fe")
        buf.write(u"\2\u0f61\u0f62\7\u01a5\2\2\u0f62\u0f64\7\u01b3\2\2\u0f63")
        buf.write(u"\u0f61\3\2\2\2\u0f63\u0f64\3\2\2\2\u0f64\u014d\3\2\2")
        buf.write(u"\2\u0f65\u0f66\7\u0221\2\2\u0f66\u0f67\7\u01d8\2\2\u0f67")
        buf.write(u"\u0f68\5\u01fa\u00fe\2\u0f68\u014f\3\2\2\2\u0f69\u0f6a")
        buf.write(u"\7\u0221\2\2\u0f6a\u0f6d\7\u01c3\2\2\u0f6b\u0f6c\7\36")
        buf.write(u"\2\2\u0f6c\u0f6e\5\u01fa\u00fe\2\u0f6d\u0f6b\3\2\2\2")
        buf.write(u"\u0f6d\u0f6e\3\2\2\2\u0f6e\u0151\3\2\2\2\u0f6f\u0f70")
        buf.write(u"\7\u01b9\2\2\u0f70\u0f71\5\u0200\u0101\2\u0f71\u0f74")
        buf.write(u"\7<\2\2\u0f72\u0f75\7\u03c2\2\2\u0f73\u0f75\7\u03cd\2")
        buf.write(u"\2\u0f74\u0f72\3\2\2\2\u0f74\u0f73\3\2\2\2\u0f75\u0153")
        buf.write(u"\3\2\2\2\u0f76\u0f77\7\u0232\2\2\u0f77\u0f7a\5\u0200")
        buf.write(u"\u0101\2\u0f78\u0f79\7\u00a2\2\2\u0f79\u0f7b\5\u022c")
        buf.write(u"\u0117\2\u0f7a\u0f78\3\2\2\2\u0f7a\u0f7b\3\2\2\2\u0f7b")
        buf.write(u"\u0155\3\2\2\2\u0f7c\u0f7d\t\67\2\2\u0f7d\u0f7e\7\u01b9")
        buf.write(u"\2\2\u0f7e\u0f7f\5\u0200\u0101\2\u0f7f\u0157\3\2\2\2")
        buf.write(u"\u0f80\u0f83\5\u015a\u00ae\2\u0f81\u0f83\5\6\4\2\u0f82")
        buf.write(u"\u0f80\3\2\2\2\u0f82\u0f81\3\2\2\2\u0f83\u0159\3\2\2")
        buf.write(u"\2\u0f84\u0f85\5\u0200\u0101\2\u0f85\u0f86\7\u03be\2")
        buf.write(u"\2\u0f86\u0f88\3\2\2\2\u0f87\u0f84\3\2\2\2\u0f87\u0f88")
        buf.write(u"\3\2\2\2\u0f88\u0f89\3\2\2\2\u0f89\u0faf\7\u0102\2\2")
        buf.write(u"\u0f8a\u0f8b\5\u016e\u00b8\2\u0f8b\u0f8c\7\u03b6\2\2")
        buf.write(u"\u0f8c\u0f8e\3\2\2\2\u0f8d\u0f8a\3\2\2\2\u0f8e\u0f91")
        buf.write(u"\3\2\2\2\u0f8f\u0f8d\3\2\2\2\u0f8f\u0f90\3\2\2\2\u0f90")
        buf.write(u"\u0f97\3\2\2\2\u0f91\u0f8f\3\2\2\2\u0f92\u0f93\5\u0170")
        buf.write(u"\u00b9\2\u0f93\u0f94\7\u03b6\2\2\u0f94\u0f96\3\2\2\2")
        buf.write(u"\u0f95\u0f92\3\2\2\2\u0f96\u0f99\3\2\2\2\u0f97\u0f95")
        buf.write(u"\3\2\2\2\u0f97\u0f98\3\2\2\2\u0f98\u0f9f\3\2\2\2\u0f99")
        buf.write(u"\u0f97\3\2\2\2\u0f9a\u0f9b\5\u0172\u00ba\2\u0f9b\u0f9c")
        buf.write(u"\7\u03b6\2\2\u0f9c\u0f9e\3\2\2\2\u0f9d\u0f9a\3\2\2\2")
        buf.write(u"\u0f9e\u0fa1\3\2\2\2\u0f9f\u0f9d\3\2\2\2\u0f9f\u0fa0")
        buf.write(u"\3\2\2\2\u0fa0\u0fa7\3\2\2\2\u0fa1\u0f9f\3\2\2\2\u0fa2")
        buf.write(u"\u0fa3\5\u0174\u00bb\2\u0fa3\u0fa4\7\u03b6\2\2\u0fa4")
        buf.write(u"\u0fa6\3\2\2\2\u0fa5\u0fa2\3\2\2\2\u0fa6\u0fa9\3\2\2")
        buf.write(u"\2\u0fa7\u0fa5\3\2\2\2\u0fa7\u0fa8\3\2\2\2\u0fa8\u0fab")
        buf.write(u"\3\2\2\2\u0fa9\u0fa7\3\2\2\2\u0faa\u0fac\5\u0178\u00bd")
        buf.write(u"\2\u0fab\u0faa\3\2\2\2\u0fac\u0fad\3\2\2\2\u0fad\u0fab")
        buf.write(u"\3\2\2\2\u0fad\u0fae\3\2\2\2\u0fae\u0fb0\3\2\2\2\u0faf")
        buf.write(u"\u0f8f\3\2\2\2\u0faf\u0fb0\3\2\2\2\u0fb0\u0fb1\3\2\2")
        buf.write(u"\2\u0fb1\u0fb3\7\u0135\2\2\u0fb2\u0fb4\5\u0200\u0101")
        buf.write(u"\2\u0fb3\u0fb2\3\2\2\2\u0fb3\u0fb4\3\2\2\2\u0fb4\u015b")
        buf.write(u"\3\2\2\2\u0fb5\u0fb8\7\24\2\2\u0fb6\u0fb9\5\u0200\u0101")
        buf.write(u"\2\u0fb7\u0fb9\5\u024c\u0127\2\u0fb8\u0fb6\3\2\2\2\u0fb8")
        buf.write(u"\u0fb7\3\2\2\2\u0fb8\u0fb9\3\2\2\2\u0fb9\u0fbb\3\2\2")
        buf.write(u"\2\u0fba\u0fbc\5\u017a\u00be\2\u0fbb\u0fba\3\2\2\2\u0fbc")
        buf.write(u"\u0fbd\3\2\2\2\u0fbd\u0fbb\3\2\2\2\u0fbd\u0fbe\3\2\2")
        buf.write(u"\2\u0fbe\u0fc5\3\2\2\2\u0fbf\u0fc1\7\60\2\2\u0fc0\u0fc2")
        buf.write(u"\5\u0178\u00bd\2\u0fc1\u0fc0\3\2\2\2\u0fc2\u0fc3\3\2")
        buf.write(u"\2\2\u0fc3\u0fc1\3\2\2\2\u0fc3\u0fc4\3\2\2\2\u0fc4\u0fc6")
        buf.write(u"\3\2\2\2\u0fc5\u0fbf\3\2\2\2\u0fc5\u0fc6\3\2\2\2\u0fc6")
        buf.write(u"\u0fc7\3\2\2\2\u0fc7\u0fc8\7\u0135\2\2\u0fc8\u0fc9\7")
        buf.write(u"\24\2\2\u0fc9\u015d\3\2\2\2\u0fca\u0fcb\7B\2\2\u0fcb")
        buf.write(u"\u0fcc\5\u024c\u0127\2\u0fcc\u0fce\7\u0095\2\2\u0fcd")
        buf.write(u"\u0fcf\5\u0178\u00bd\2\u0fce\u0fcd\3\2\2\2\u0fcf\u0fd0")
        buf.write(u"\3\2\2\2\u0fd0\u0fce\3\2\2\2\u0fd0\u0fd1\3\2\2\2\u0fd1")
        buf.write(u"\u0fd5\3\2\2\2\u0fd2\u0fd4\5\u017c\u00bf\2\u0fd3\u0fd2")
        buf.write(u"\3\2\2\2\u0fd4\u0fd7\3\2\2\2\u0fd5\u0fd3\3\2\2\2\u0fd5")
        buf.write(u"\u0fd6\3\2\2\2\u0fd6\u0fde\3\2\2\2\u0fd7\u0fd5\3\2\2")
        buf.write(u"\2\u0fd8\u0fda\7\60\2\2\u0fd9\u0fdb\5\u0178\u00bd\2\u0fda")
        buf.write(u"\u0fd9\3\2\2\2\u0fdb\u0fdc\3\2\2\2\u0fdc\u0fda\3\2\2")
        buf.write(u"\2\u0fdc\u0fdd\3\2\2\2\u0fdd\u0fdf\3\2\2\2\u0fde\u0fd8")
        buf.write(u"\3\2\2\2\u0fde\u0fdf\3\2\2\2\u0fdf\u0fe0\3\2\2\2\u0fe0")
        buf.write(u"\u0fe1\7\u0135\2\2\u0fe1\u0fe2\7B\2\2\u0fe2\u015f\3\2")
        buf.write(u"\2\2\u0fe3\u0fe4\7M\2\2\u0fe4\u0fe5\5\u0200\u0101\2\u0fe5")
        buf.write(u"\u0161\3\2\2\2\u0fe6\u0fe7\7S\2\2\u0fe7\u0fe8\5\u0200")
        buf.write(u"\u0101\2\u0fe8\u0163\3\2\2\2\u0fe9\u0fea\5\u0200\u0101")
        buf.write(u"\2\u0fea\u0feb\7\u03be\2\2\u0feb\u0fed\3\2\2\2\u0fec")
        buf.write(u"\u0fe9\3\2\2\2\u0fec\u0fed\3\2\2\2\u0fed\u0fee\3\2\2")
        buf.write(u"\2\u0fee\u0ff0\7[\2\2\u0fef\u0ff1\5\u0178\u00bd\2\u0ff0")
        buf.write(u"\u0fef\3\2\2\2\u0ff1\u0ff2\3\2\2\2\u0ff2\u0ff0\3\2\2")
        buf.write(u"\2\u0ff2\u0ff3\3\2\2\2\u0ff3\u0ff4\3\2\2\2\u0ff4\u0ff5")
        buf.write(u"\7\u0135\2\2\u0ff5\u0ff7\7[\2\2\u0ff6\u0ff8\5\u0200\u0101")
        buf.write(u"\2\u0ff7\u0ff6\3\2\2\2\u0ff7\u0ff8\3\2\2\2\u0ff8\u0165")
        buf.write(u"\3\2\2\2\u0ff9\u0ffa\5\u0200\u0101\2\u0ffa\u0ffb\7\u03be")
        buf.write(u"\2\2\u0ffb\u0ffd\3\2\2\2\u0ffc\u0ff9\3\2\2\2\u0ffc\u0ffd")
        buf.write(u"\3\2\2\2\u0ffd\u0ffe\3\2\2\2\u0ffe\u1000\7z\2\2\u0fff")
        buf.write(u"\u1001\5\u0178\u00bd\2\u1000\u0fff\3\2\2\2\u1001\u1002")
        buf.write(u"\3\2\2\2\u1002\u1000\3\2\2\2\u1002\u1003\3\2\2\2\u1003")
        buf.write(u"\u1004\3\2\2\2\u1004\u1005\7\u0212\2\2\u1005\u1006\5")
        buf.write(u"\u024c\u0127\2\u1006\u1007\7\u0135\2\2\u1007\u1009\7")
        buf.write(u"z\2\2\u1008\u100a\5\u0200\u0101\2\u1009\u1008\3\2\2\2")
        buf.write(u"\u1009\u100a\3\2\2\2\u100a\u0167\3\2\2\2\u100b\u100c")
        buf.write(u"\7~\2\2\u100c\u100d\5\u024c\u0127\2\u100d\u0169\3\2\2")
        buf.write(u"\2\u100e\u100f\5\u0200\u0101\2\u100f\u1010\7\u03be\2")
        buf.write(u"\2\u1010\u1012\3\2\2\2\u1011\u100e\3\2\2\2\u1011\u1012")
        buf.write(u"\3\2\2\2\u1012\u1013\3\2\2\2\u1013\u1014\7\u00a6\2\2")
        buf.write(u"\u1014\u1015\5\u024c\u0127\2\u1015\u1017\7\u012f\2\2")
        buf.write(u"\u1016\u1018\5\u0178\u00bd\2\u1017\u1016\3\2\2\2\u1018")
        buf.write(u"\u1019\3\2\2\2\u1019\u1017\3\2\2\2\u1019\u101a\3\2\2")
        buf.write(u"\2\u101a\u101b\3\2\2\2\u101b\u101c\7\u0135\2\2\u101c")
        buf.write(u"\u101e\7\u00a6\2\2\u101d\u101f\5\u0200\u0101\2\u101e")
        buf.write(u"\u101d\3\2\2\2\u101e\u101f\3\2\2\2\u101f\u016b\3\2\2")
        buf.write(u"\2\u1020\u1021\7\u0111\2\2\u1021\u1030\5\u0200\u0101")
        buf.write(u"\2\u1022\u1027\78\2\2\u1023\u1025\7\u019d\2\2\u1024\u1023")
        buf.write(u"\3\2\2\2\u1024\u1025\3\2\2\2\u1025\u1026\3\2\2\2\u1026")
        buf.write(u"\u1028\7<\2\2\u1027\u1024\3\2\2\2\u1027\u1028\3\2\2\2")
        buf.write(u"\u1028\u1029\3\2\2\2\u1029\u102a\5\u0200\u0101\2\u102a")
        buf.write(u"\u102b\7K\2\2\u102b\u102c\5\u021e\u0110\2\u102c\u1030")
        buf.write(u"\3\2\2\2\u102d\u102e\7\u01a8\2\2\u102e\u1030\5\u0200")
        buf.write(u"\u0101\2\u102f\u1020\3\2\2\2\u102f\u1022\3\2\2\2\u102f")
        buf.write(u"\u102d\3\2\2\2\u1030\u016d\3\2\2\2\u1031\u1032\7%\2\2")
        buf.write(u"\u1032\u1033\5\u021e\u0110\2\u1033\u1036\5\u0214\u010b")
        buf.write(u"\2\u1034\u1035\7&\2\2\u1035\u1037\5\u022e\u0118\2\u1036")
        buf.write(u"\u1034\3\2\2\2\u1036\u1037\3\2\2\2\u1037\u016f\3\2\2")
        buf.write(u"\2\u1038\u1039\7%\2\2\u1039\u103a\5\u0200\u0101\2\u103a")
        buf.write(u"\u103b\7\33\2\2\u103b\u1042\79\2\2\u103c\u1043\5\u0206")
        buf.write(u"\u0104\2\u103d\u103f\7\u008b\2\2\u103e\u1040\7\u0218")
        buf.write(u"\2\2\u103f\u103e\3\2\2\2\u103f\u1040\3\2\2\2\u1040\u1041")
        buf.write(u"\3\2\2\2\u1041\u1043\7\u03c2\2\2\u1042\u103c\3\2\2\2")
        buf.write(u"\u1042\u103d\3\2\2\2\u1043\u0171\3\2\2\2\u1044\u1045")
        buf.write(u"\7%\2\2\u1045\u1046\5\u0200\u0101\2\u1046\u1047\7\"\2")
        buf.write(u"\2\u1047\u1048\79\2\2\u1048\u1049\5\u00b4[\2\u1049\u0173")
        buf.write(u"\3\2\2\2\u104a\u104b\7%\2\2\u104b\u104c\t8\2\2\u104c")
        buf.write(u"\u104d\7\u0156\2\2\u104d\u104e\79\2\2\u104e\u1053\5\u0176")
        buf.write(u"\u00bc\2\u104f\u1050\7\u03b5\2\2\u1050\u1052\5\u0176")
        buf.write(u"\u00bc\2\u1051\u104f\3\2\2\2\u1052\u1055\3\2\2\2\u1053")
        buf.write(u"\u1051\3\2\2\2\u1053\u1054\3\2\2\2\u1054\u1056\3\2\2")
        buf.write(u"\2\u1055\u1053\3\2\2\2\u1056\u1057\5\u0158\u00ad\2\u1057")
        buf.write(u"\u0175\3\2\2\2\u1058\u1064\5\u0206\u0104\2\u1059\u105b")
        buf.write(u"\7\u008b\2\2\u105a\u105c\7\u0218\2\2\u105b\u105a\3\2")
        buf.write(u"\2\2\u105b\u105c\3\2\2\2\u105c\u105d\3\2\2\2\u105d\u1064")
        buf.write(u"\7\u03c2\2\2\u105e\u1064\5\u0200\u0101\2\u105f\u1064")
        buf.write(u"\7\u008c\2\2\u1060\u1061\7c\2\2\u1061\u1064\7\u014f\2")
        buf.write(u"\2\u1062\u1064\7\u008a\2\2\u1063\u1058\3\2\2\2\u1063")
        buf.write(u"\u1059\3\2\2\2\u1063\u105e\3\2\2\2\u1063\u105f\3\2\2")
        buf.write(u"\2\u1063\u1060\3\2\2\2\u1063\u1062\3\2\2\2\u1064\u0177")
        buf.write(u"\3\2\2\2\u1065\u1068\5\24\13\2\u1066\u1068\5\6\4\2\u1067")
        buf.write(u"\u1065\3\2\2\2\u1067\u1066\3\2\2\2\u1068\u1069\3\2\2")
        buf.write(u"\2\u1069\u106a\7\u03b6\2\2\u106a\u0179\3\2\2\2\u106b")
        buf.write(u"\u106e\7\u00a4\2\2\u106c\u106f\5\u0212\u010a\2\u106d")
        buf.write(u"\u106f\5\u024c\u0127\2\u106e\u106c\3\2\2\2\u106e\u106d")
        buf.write(u"\3\2\2\2\u106f\u1070\3\2\2\2\u1070\u1072\7\u0095\2\2")
        buf.write(u"\u1071\u1073\5\u0178\u00bd\2\u1072\u1071\3\2\2\2\u1073")
        buf.write(u"\u1074\3\2\2\2\u1074\u1072\3\2\2\2\u1074\u1075\3\2\2")
        buf.write(u"\2\u1075\u017b\3\2\2\2\u1076\u1077\7\61\2\2\u1077\u1078")
        buf.write(u"\5\u024c\u0127\2\u1078\u107a\7\u0095\2\2\u1079\u107b")
        buf.write(u"\5\u0178\u00bd\2\u107a\u1079\3\2\2\2\u107b\u107c\3\2")
        buf.write(u"\2\2\u107c\u107a\3\2\2\2\u107c\u107d\3\2\2\2\u107d\u017d")
        buf.write(u"\3\2\2\2\u107e\u107f\7\t\2\2\u107f\u1080\7\u0214\2\2")
        buf.write(u"\u1080\u1085\5\u0190\u00c9\2\u1081\u1082\7\u03b5\2\2")
        buf.write(u"\u1082\u1084\5\u0190\u00c9\2\u1083\u1081\3\2\2\2\u1084")
        buf.write(u"\u1087\3\2\2\2\u1085\u1083\3\2\2\2\u1085\u1086\3\2\2")
        buf.write(u"\2\u1086\u10b5\3\2\2\2\u1087\u1085\3\2\2\2\u1088\u1089")
        buf.write(u"\7\t\2\2\u1089\u108b\7\u0214\2\2\u108a\u108c\5\u0234")
        buf.write(u"\u011b\2\u108b\u108a\3\2\2\2\u108b\u108c\3\2\2\2\u108c")
        buf.write(u"\u108d\3\2\2\2\u108d\u1092\5\u0192\u00ca\2\u108e\u108f")
        buf.write(u"\7\u03b5\2\2\u108f\u1091\5\u0192\u00ca\2\u1090\u108e")
        buf.write(u"\3\2\2\2\u1091\u1094\3\2\2\2\u1092\u1090\3\2\2\2\u1092")
        buf.write(u"\u1093\3\2\2\2\u1093\u10a3\3\2\2\2\u1094\u1092\3\2\2")
        buf.write(u"\2\u1095\u10a1\7|\2\2\u1096\u10a2\7\u01a0\2\2\u1097\u109e")
        buf.write(u"\5\u0194\u00cb\2\u1098\u109a\7\13\2\2\u1099\u1098\3\2")
        buf.write(u"\2\2\u1099\u109a\3\2\2\2\u109a\u109b\3\2\2\2\u109b\u109d")
        buf.write(u"\5\u0194\u00cb\2\u109c\u1099\3\2\2\2\u109d\u10a0\3\2")
        buf.write(u"\2\2\u109e\u109c\3\2\2\2\u109e\u109f\3\2\2\2\u109f\u10a2")
        buf.write(u"\3\2\2\2\u10a0\u109e\3\2\2\2\u10a1\u1096\3\2\2\2\u10a1")
        buf.write(u"\u1097\3\2\2\2\u10a2\u10a4\3\2\2\2\u10a3\u1095\3\2\2")
        buf.write(u"\2\u10a3\u10a4\3\2\2\2\u10a4\u10ab\3\2\2\2\u10a5\u10a7")
        buf.write(u"\7\u00a7\2\2\u10a6\u10a8\5\u0196\u00cc\2\u10a7\u10a6")
        buf.write(u"\3\2\2\2\u10a8\u10a9\3\2\2\2\u10a9\u10a7\3\2\2\2\u10a9")
        buf.write(u"\u10aa\3\2\2\2\u10aa\u10ac\3\2\2\2\u10ab\u10a5\3\2\2")
        buf.write(u"\2\u10ab\u10ac\3\2\2\2\u10ac\u10b1\3\2\2\2\u10ad\u10b0")
        buf.write(u"\5\u0198\u00cd\2\u10ae\u10b0\5\u019a\u00ce\2\u10af\u10ad")
        buf.write(u"\3\2\2\2\u10af\u10ae\3\2\2\2\u10b0\u10b3\3\2\2\2\u10b1")
        buf.write(u"\u10af\3\2\2\2\u10b1\u10b2\3\2\2\2\u10b2\u10b5\3\2\2")
        buf.write(u"\2\u10b3\u10b1\3\2\2\2\u10b4\u107e\3\2\2\2\u10b4\u1088")
        buf.write(u"\3\2\2\2\u10b5\u017f\3\2\2\2\u10b6\u10b7\7\37\2\2\u10b7")
        buf.write(u"\u10b8\7\u0214\2\2\u10b8\u10bd\5\u0192\u00ca\2\u10b9")
        buf.write(u"\u10ba\7\u03b5\2\2\u10ba\u10bc\5\u0192\u00ca\2\u10bb")
        buf.write(u"\u10b9\3\2\2\2\u10bc\u10bf\3\2\2\2\u10bd\u10bb\3\2\2")
        buf.write(u"\2\u10bd\u10be\3\2\2\2\u10be\u10ed\3\2\2\2\u10bf\u10bd")
        buf.write(u"\3\2\2\2\u10c0\u10c1\7\37\2\2\u10c1\u10c3\7\u0214\2\2")
        buf.write(u"\u10c2\u10c4\5\u0236\u011c\2\u10c3\u10c2\3\2\2\2\u10c3")
        buf.write(u"\u10c4\3\2\2\2\u10c4\u10c5\3\2\2\2\u10c5\u10ca\5\u0192")
        buf.write(u"\u00ca\2\u10c6\u10c7\7\u03b5\2\2\u10c7\u10c9\5\u0192")
        buf.write(u"\u00ca\2\u10c8\u10c6\3\2\2\2\u10c9\u10cc\3\2\2\2\u10ca")
        buf.write(u"\u10c8\3\2\2\2\u10ca\u10cb\3\2\2\2\u10cb\u10db\3\2\2")
        buf.write(u"\2\u10cc\u10ca\3\2\2\2\u10cd\u10d9\7|\2\2\u10ce\u10da")
        buf.write(u"\7\u01a0\2\2\u10cf\u10d6\5\u0194\u00cb\2\u10d0\u10d2")
        buf.write(u"\7\13\2\2\u10d1\u10d0\3\2\2\2\u10d1\u10d2\3\2\2\2\u10d2")
        buf.write(u"\u10d3\3\2\2\2\u10d3\u10d5\5\u0194\u00cb\2\u10d4\u10d1")
        buf.write(u"\3\2\2\2\u10d5\u10d8\3\2\2\2\u10d6\u10d4\3\2\2\2\u10d6")
        buf.write(u"\u10d7\3\2\2\2\u10d7\u10da\3\2\2\2\u10d8\u10d6\3\2\2")
        buf.write(u"\2\u10d9\u10ce\3\2\2\2\u10d9\u10cf\3\2\2\2\u10da\u10dc")
        buf.write(u"\3\2\2\2\u10db\u10cd\3\2\2\2\u10db\u10dc\3\2\2\2\u10dc")
        buf.write(u"\u10e3\3\2\2\2\u10dd\u10df\7\u00a7\2\2\u10de\u10e0\5")
        buf.write(u"\u0196\u00cc\2\u10df\u10de\3\2\2\2\u10e0\u10e1\3\2\2")
        buf.write(u"\2\u10e1\u10df\3\2\2\2\u10e1\u10e2\3\2\2\2\u10e2\u10e4")
        buf.write(u"\3\2\2\2\u10e3\u10dd\3\2\2\2\u10e3\u10e4\3\2\2\2\u10e4")
        buf.write(u"\u10e9\3\2\2\2\u10e5\u10e8\5\u0198\u00cd\2\u10e6\u10e8")
        buf.write(u"\5\u019a\u00ce\2\u10e7\u10e5\3\2\2\2\u10e7\u10e6\3\2")
        buf.write(u"\2\2\u10e8\u10eb\3\2\2\2\u10e9\u10e7\3\2\2\2\u10e9\u10ea")
        buf.write(u"\3\2\2\2\u10ea\u10ed\3\2\2\2\u10eb\u10e9\3\2\2\2\u10ec")
        buf.write(u"\u10b6\3\2\2\2\u10ec\u10c0\3\2\2\2\u10ed\u0181\3\2\2")
        buf.write(u"\2\u10ee\u10ef\7.\2\2\u10ef\u10f1\7\u0214\2\2\u10f0\u10f2")
        buf.write(u"\5\u0234\u011b\2\u10f1\u10f0\3\2\2\2\u10f1\u10f2\3\2")
        buf.write(u"\2\2\u10f2\u10f3\3\2\2\2\u10f3\u10f8\5\u01ee\u00f8\2")
        buf.write(u"\u10f4\u10f5\7\u03b5\2\2\u10f5\u10f7\5\u01ee\u00f8\2")
        buf.write(u"\u10f6\u10f4\3\2\2\2\u10f7\u10fa\3\2\2\2\u10f8\u10f6")
        buf.write(u"\3\2\2\2\u10f8\u10f9\3\2\2\2\u10f9\u0183\3\2\2\2\u10fa")
        buf.write(u"\u10f8\3\2\2\2\u10fb\u10fc\7>\2\2\u10fc\u1101\5\u019c")
        buf.write(u"\u00cf\2\u10fd\u10fe\7\u03b5\2\2\u10fe\u1100\5\u019c")
        buf.write(u"\u00cf\2\u10ff\u10fd\3\2\2\2\u1100\u1103\3\2\2\2\u1101")
        buf.write(u"\u10ff\3\2\2\2\u1101\u1102\3\2\2\2\u1102\u1104\3\2\2")
        buf.write(u"\2\u1103\u1101\3\2\2\2\u1104\u1106\7f\2\2\u1105\u1107")
        buf.write(u"\t9\2\2\u1106\u1105\3\2\2\2\u1106\u1107\3\2\2\2\u1107")
        buf.write(u"\u1108\3\2\2\2\u1108\u1109\5\u01a0\u00d1\2\u1109\u110a")
        buf.write(u"\7\u0096\2\2\u110a\u110f\5\u0192\u00ca\2\u110b\u110c")
        buf.write(u"\7\u03b5\2\2\u110c\u110e\5\u0192\u00ca\2\u110d\u110b")
        buf.write(u"\3\2\2\2\u110e\u1111\3\2\2\2\u110f\u110d\3\2\2\2\u110f")
        buf.write(u"\u1110\3\2\2\2\u1110\u1120\3\2\2\2\u1111\u110f\3\2\2")
        buf.write(u"\2\u1112\u111e\7|\2\2\u1113\u111f\7\u01a0\2\2\u1114\u111b")
        buf.write(u"\5\u0194\u00cb\2\u1115\u1117\7\13\2\2\u1116\u1115\3\2")
        buf.write(u"\2\2\u1116\u1117\3\2\2\2\u1117\u1118\3\2\2\2\u1118\u111a")
        buf.write(u"\5\u0194\u00cb\2\u1119\u1116\3\2\2\2\u111a\u111d\3\2")
        buf.write(u"\2\2\u111b\u1119\3\2\2\2\u111b\u111c\3\2\2\2\u111c\u111f")
        buf.write(u"\3\2\2\2\u111d\u111b\3\2\2\2\u111e\u1113\3\2\2\2\u111e")
        buf.write(u"\u1114\3\2\2\2\u111f\u1121\3\2\2\2\u1120\u1112\3\2\2")
        buf.write(u"\2\u1120\u1121\3\2\2\2\u1121\u112b\3\2\2\2\u1122\u1128")
        buf.write(u"\7\u00a7\2\2\u1123\u1124\7>\2\2\u1124\u1127\7h\2\2\u1125")
        buf.write(u"\u1127\5\u0196\u00cc\2\u1126\u1123\3\2\2\2\u1126\u1125")
        buf.write(u"\3\2\2\2\u1127\u112a\3\2\2\2\u1128\u1126\3\2\2\2\u1128")
        buf.write(u"\u1129\3\2\2\2\u1129\u112c\3\2\2\2\u112a\u1128\3\2\2")
        buf.write(u"\2\u112b\u1122\3\2\2\2\u112b\u112c\3\2\2\2\u112c\u0185")
        buf.write(u"\3\2\2\2\u112d\u112e\7>\2\2\u112e\u112f\7\u01bf\2\2\u112f")
        buf.write(u"\u1130\7f\2\2\u1130\u1131\5\u01ee\u00f8\2\u1131\u1132")
        buf.write(u"\7\u0096\2\2\u1132\u1137\5\u01ee\u00f8\2\u1133\u1134")
        buf.write(u"\7\u03b5\2\2\u1134\u1136\5\u01ee\u00f8\2\u1135\u1133")
        buf.write(u"\3\2\2\2\u1136\u1139\3\2\2\2\u1137\u1135\3\2\2\2\u1137")
        buf.write(u"\u1138\3\2\2\2\u1138\u113d\3\2\2\2\u1139\u1137\3\2\2")
        buf.write(u"\2\u113a\u113b\7\u00a7\2\2\u113b\u113c\7>\2\2\u113c\u113e")
        buf.write(u"\7h\2\2\u113d\u113a\3\2\2\2\u113d\u113e\3\2\2\2\u113e")
        buf.write(u"\u0187\3\2\2\2\u113f\u1140\7y\2\2\u1140\u1141\7\u0214")
        buf.write(u"\2\2\u1141\u1146\5\u01a2\u00d2\2\u1142\u1143\7\u03b5")
        buf.write(u"\2\2\u1143\u1145\5\u01a2\u00d2\2\u1144\u1142\3\2\2\2")
        buf.write(u"\u1145\u1148\3\2\2\2\u1146\u1144\3\2\2\2\u1146\u1147")
        buf.write(u"\3\2\2\2\u1147\u0189\3\2\2\2\u1148\u1146\3\2\2\2\u1149")
        buf.write(u"\u114a\7\177\2\2\u114a\u114f\5\u019c\u00cf\2\u114b\u114c")
        buf.write(u"\7\u03b5\2\2\u114c\u114e\5\u019c\u00cf\2\u114d\u114b")
        buf.write(u"\3\2\2\2\u114e\u1151\3\2\2\2\u114f\u114d\3\2\2\2\u114f")
        buf.write(u"\u1150\3\2\2\2\u1150\u1152\3\2\2\2\u1151\u114f\3\2\2")
        buf.write(u"\2\u1152\u1154\7f\2\2\u1153\u1155\t9\2\2\u1154\u1153")
        buf.write(u"\3\2\2\2\u1154\u1155\3\2\2\2\u1155\u1156\3\2\2\2\u1156")
        buf.write(u"\u1157\5\u01a0\u00d1\2\u1157\u1158\7<\2\2\u1158\u115d")
        buf.write(u"\5\u01ee\u00f8\2\u1159\u115a\7\u03b5\2\2\u115a\u115c")
        buf.write(u"\5\u01ee\u00f8\2\u115b\u1159\3\2\2\2\u115c\u115f\3\2")
        buf.write(u"\2\2\u115d\u115b\3\2\2\2\u115d\u115e\3\2\2\2\u115e\u1172")
        buf.write(u"\3\2\2\2\u115f\u115d\3\2\2\2\u1160\u1161\7\177\2\2\u1161")
        buf.write(u"\u1163\7\b\2\2\u1162\u1164\7\u0238\2\2\u1163\u1162\3")
        buf.write(u"\2\2\2\u1163\u1164\3\2\2\2\u1164\u1165\3\2\2\2\u1165")
        buf.write(u"\u1166\7\u03b5\2\2\u1166\u1167\7>\2\2\u1167\u1168\7h")
        buf.write(u"\2\2\u1168\u1169\7<\2\2\u1169\u116e\5\u01ee\u00f8\2\u116a")
        buf.write(u"\u116b\7\u03b5\2\2\u116b\u116d\5\u01ee\u00f8\2\u116c")
        buf.write(u"\u116a\3\2\2\2\u116d\u1170\3\2\2\2\u116e\u116c\3\2\2")
        buf.write(u"\2\u116e\u116f\3\2\2\2\u116f\u1172\3\2\2\2\u1170\u116e")
        buf.write(u"\3\2\2\2\u1171\u1149\3\2\2\2\u1171\u1160\3\2\2\2\u1172")
        buf.write(u"\u018b\3\2\2\2\u1173\u1174\7\177\2\2\u1174\u1175\7\u01bf")
        buf.write(u"\2\2\u1175\u1176\7f\2\2\u1176\u1177\5\u01ee\u00f8\2\u1177")
        buf.write(u"\u1178\7<\2\2\u1178\u117d\5\u01ee\u00f8\2\u1179\u117a")
        buf.write(u"\7\u03b5\2\2\u117a\u117c\5\u01ee\u00f8\2\u117b\u1179")
        buf.write(u"\3\2\2\2\u117c\u117f\3\2\2\2\u117d\u117b\3\2\2\2\u117d")
        buf.write(u"\u117e\3\2\2\2\u117e\u018d\3\2\2\2\u117f\u117d\3\2\2")
        buf.write(u"\2\u1180\u1181\7\u0085\2\2\u1181\u1184\7\u01b2\2\2\u1182")
        buf.write(u"\u1183\79\2\2\u1183\u1185\5\u01ee\u00f8\2\u1184\u1182")
        buf.write(u"\3\2\2\2\u1184\u1185\3\2\2\2\u1185\u1186\3\2\2\2\u1186")
        buf.write(u"\u1189\7\u03aa\2\2\u1187\u118a\5\u0246\u0124\2\u1188")
        buf.write(u"\u118a\7\u03c2\2\2\u1189\u1187\3\2\2\2\u1189\u1188\3")
        buf.write(u"\2\2\2\u118a\u018f\3\2\2\2\u118b\u118c\5\u01ee\u00f8")
        buf.write(u"\2\u118c\u118d\5\u0198\u00cd\2\u118d\u0191\3\2\2\2\u118e")
        buf.write(u"\u118f\5\u01ee\u00f8\2\u118f\u1190\7\u015b\2\2\u1190")
        buf.write(u"\u1191\7\21\2\2\u1191\u1192\7\u01b2\2\2\u1192\u1193\7")
        buf.write(u"\u03c2\2\2\u1193\u11a7\3\2\2\2\u1194\u1195\5\u01ee\u00f8")
        buf.write(u"\2\u1195\u1198\7\u015b\2\2\u1196\u1197\7\u00a7\2\2\u1197")
        buf.write(u"\u1199\5\u01fe\u0100\2\u1198\u1196\3\2\2\2\u1198\u1199")
        buf.write(u"\3\2\2\2\u1199\u119a\3\2\2\2\u119a\u119b\7\21\2\2\u119b")
        buf.write(u"\u119c\7\u03c2\2\2\u119c\u11a7\3\2\2\2\u119d\u119e\5")
        buf.write(u"\u01ee\u00f8\2\u119e\u119f\7\u015b\2\2\u119f\u11a0\7")
        buf.write(u"\u00a7\2\2\u11a0\u11a3\5\u01fe\u0100\2\u11a1\u11a2\7")
        buf.write(u"\f\2\2\u11a2\u11a4\7\u03c2\2\2\u11a3\u11a1\3\2\2\2\u11a3")
        buf.write(u"\u11a4\3\2\2\2\u11a4\u11a7\3\2\2\2\u11a5\u11a7\5\u01ee")
        buf.write(u"\u00f8\2\u11a6\u118e\3\2\2\2\u11a6\u1194\3\2\2\2\u11a6")
        buf.write(u"\u119d\3\2\2\2\u11a6\u11a5\3\2\2\2\u11a7\u0193\3\2\2")
        buf.write(u"\2\u11a8\u11b1\7\u0090\2\2\u11a9\u11b1\7\u0220\2\2\u11aa")
        buf.write(u"\u11ab\7\u010f\2\2\u11ab\u11b1\7\u03c2\2\2\u11ac\u11ad")
        buf.write(u"\7\u0169\2\2\u11ad\u11b1\7\u03c2\2\2\u11ae\u11af\7\u01ff")
        buf.write(u"\2\2\u11af\u11b1\7\u03c2\2\2\u11b0\u11a8\3\2\2\2\u11b0")
        buf.write(u"\u11a9\3\2\2\2\u11b0\u11aa\3\2\2\2\u11b0\u11ac\3\2\2")
        buf.write(u"\2\u11b0\u11ae\3\2\2\2\u11b1\u0195\3\2\2\2\u11b2\u11b3")
        buf.write(u"\7\u018b\2\2\u11b3\u11bb\5\u0206\u0104\2\u11b4\u11b5")
        buf.write(u"\7\u018e\2\2\u11b5\u11bb\5\u0206\u0104\2\u11b6\u11b7")
        buf.write(u"\7\u018a\2\2\u11b7\u11bb\5\u0206\u0104\2\u11b8\u11b9")
        buf.write(u"\7\u018f\2\2\u11b9\u11bb\5\u0206\u0104\2\u11ba\u11b2")
        buf.write(u"\3\2\2\2\u11ba\u11b4\3\2\2\2\u11ba\u11b6\3\2\2\2\u11ba")
        buf.write(u"\u11b8\3\2\2\2\u11bb\u0197\3\2\2\2\u11bc\u11bd\7\u01b2")
        buf.write(u"\2\2\u11bd\u11c4\7\u0142\2\2\u11be\u11c5\7&\2\2\u11bf")
        buf.write(u"\u11c5\7\u019c\2\2\u11c0\u11c1\7J\2\2\u11c1\u11c2\5\u0206")
        buf.write(u"\u0104\2\u11c2\u11c3\7\u022a\2\2\u11c3\u11c5\3\2\2\2")
        buf.write(u"\u11c4\u11be\3\2\2\2\u11c4\u11bf\3\2\2\2\u11c4\u11c0")
        buf.write(u"\3\2\2\2\u11c4\u11c5\3\2\2\2\u11c5\u0199\3\2\2\2\u11c6")
        buf.write(u"\u11c7\7\u00f6\2\2\u11c7\u11c8\t:\2\2\u11c8\u019b\3\2")
        buf.write(u"\2\2\u11c9\u11ce\5\u019e\u00d0\2\u11ca\u11cb\7\u03b3")
        buf.write(u"\2\2\u11cb\u11cc\5\u021e\u0110\2\u11cc\u11cd\7\u03b4")
        buf.write(u"\2\2\u11cd\u11cf\3\2\2\2\u11ce\u11ca\3\2\2\2\u11ce\u11cf")
        buf.write(u"\3\2\2\2\u11cf\u019d\3\2\2\2\u11d0\u11d2\7\b\2\2\u11d1")
        buf.write(u"\u11d3\7\u0238\2\2\u11d2\u11d1\3\2\2\2\u11d2\u11d3\3")
        buf.write(u"\2\2\2\u11d3\u11fb\3\2\2\2\u11d4\u11d6\7\t\2\2\u11d5")
        buf.write(u"\u11d7\7\u0231\2\2\u11d6\u11d5\3\2\2\2\u11d6\u11d7\3")
        buf.write(u"\2\2\2\u11d7\u11fb\3\2\2\2\u11d8\u11df\7\37\2\2\u11d9")
        buf.write(u"\u11da\7\u0206\2\2\u11da\u11e0\7\u0230\2\2\u11db\u11e0")
        buf.write(u"\7\u0231\2\2\u11dc\u11e0\7\u021a\2\2\u11dd\u11e0\7\u0214")
        buf.write(u"\2\2\u11de\u11e0\7\u0205\2\2\u11df\u11d9\3\2\2\2\u11df")
        buf.write(u"\u11db\3\2\2\2\u11df\u11dc\3\2\2\2\u11df\u11dd\3\2\2")
        buf.write(u"\2\u11df\u11de\3\2\2\2\u11df\u11e0\3\2\2\2\u11e0\u11fb")
        buf.write(u"\3\2\2\2\u11e1\u11fb\7(\2\2\u11e2\u11fb\7.\2\2\u11e3")
        buf.write(u"\u11fb\7\u013d\2\2\u11e4\u11fb\7\u0232\2\2\u11e5\u11fb")
        buf.write(u"\7\u0233\2\2\u11e6\u11e7\7>\2\2\u11e7\u11fb\7h\2\2\u11e8")
        buf.write(u"\u11fb\7E\2\2\u11e9\u11fb\7I\2\2\u11ea\u11eb\7Z\2\2\u11eb")
        buf.write(u"\u11fb\7\u0230\2\2\u11ec\u11fb\7\u0234\2\2\u11ed\u11fb")
        buf.write(u"\7\u01bf\2\2\u11ee\u11fb\7v\2\2\u11ef\u11fb\7\u0235\2")
        buf.write(u"\2\u11f0\u11f1\7\u01d4\2\2\u11f1\u11fb\t;\2\2\u11f2\u11fb")
        buf.write(u"\7\u0084\2\2\u11f3\u11f4\7\u0087\2\2\u11f4\u11fb\t<\2")
        buf.write(u"\2\u11f5\u11fb\7\u0236\2\2\u11f6\u11fb\7\u0237\2\2\u11f7")
        buf.write(u"\u11fb\7\u0098\2\2\u11f8\u11fb\7\u009f\2\2\u11f9\u11fb")
        buf.write(u"\7\u00a0\2\2\u11fa\u11d0\3\2\2\2\u11fa\u11d4\3\2\2\2")
        buf.write(u"\u11fa\u11d8\3\2\2\2\u11fa\u11e1\3\2\2\2\u11fa\u11e2")
        buf.write(u"\3\2\2\2\u11fa\u11e3\3\2\2\2\u11fa\u11e4\3\2\2\2\u11fa")
        buf.write(u"\u11e5\3\2\2\2\u11fa\u11e6\3\2\2\2\u11fa\u11e8\3\2\2")
        buf.write(u"\2\u11fa\u11e9\3\2\2\2\u11fa\u11ea\3\2\2\2\u11fa\u11ec")
        buf.write(u"\3\2\2\2\u11fa\u11ed\3\2\2\2\u11fa\u11ee\3\2\2\2\u11fa")
        buf.write(u"\u11ef\3\2\2\2\u11fa\u11f0\3\2\2\2\u11fa\u11f2\3\2\2")
        buf.write(u"\2\u11fa\u11f3\3\2\2\2\u11fa\u11f5\3\2\2\2\u11fa\u11f6")
        buf.write(u"\3\2\2\2\u11fa\u11f7\3\2\2\2\u11fa\u11f8\3\2\2\2\u11fa")
        buf.write(u"\u11f9\3\2\2\2\u11fb\u019f\3\2\2\2\u11fc\u120a\7\u03a2")
        buf.write(u"\2\2\u11fd\u11fe\7\u03a2\2\2\u11fe\u11ff\7\u03b2\2\2")
        buf.write(u"\u11ff\u120a\7\u03a2\2\2\u1200\u1201\5\u0200\u0101\2")
        buf.write(u"\u1201\u1202\7\u03b2\2\2\u1202\u1203\7\u03a2\2\2\u1203")
        buf.write(u"\u120a\3\2\2\2\u1204\u1205\5\u0200\u0101\2\u1205\u1206")
        buf.write(u"\7\u03b2\2\2\u1206\u1207\5\u0200\u0101\2\u1207\u120a")
        buf.write(u"\3\2\2\2\u1208\u120a\5\u0200\u0101\2\u1209\u11fc\3\2")
        buf.write(u"\2\2\u1209\u11fd\3\2\2\2\u1209\u1200\3\2\2\2\u1209\u1204")
        buf.write(u"\3\2\2\2\u1209\u1208\3\2\2\2\u120a\u01a1\3\2\2\2\u120b")
        buf.write(u"\u120c\5\u01ee\u00f8\2\u120c\u120d\7\u0096\2\2\u120d")
        buf.write(u"\u120e\5\u01ee\u00f8\2\u120e\u01a3\3\2\2\2\u120f\u1211")
        buf.write(u"\7\n\2\2\u1210\u1212\t=\2\2\u1211\u1210\3\2\2\2\u1211")
        buf.write(u"\u1212\3\2\2\2\u1212\u1213\3\2\2\2\u1213\u1214\7\u0093")
        buf.write(u"\2\2\u1214\u1215\5\u0220\u0111\2\u1215\u01a5\3\2\2\2")
        buf.write(u"\u1216\u1217\7\30\2\2\u1217\u1218\7\u0093\2\2\u1218\u121c")
        buf.write(u"\5\u0220\u0111\2\u1219\u121b\5\u01ae\u00d8\2\u121a\u1219")
        buf.write(u"\3\2\2\2\u121b\u121e\3\2\2\2\u121c\u121a\3\2\2\2\u121c")
        buf.write(u"\u121d\3\2\2\2\u121d\u01a7\3\2\2\2\u121e\u121c\3\2\2")
        buf.write(u"\2\u121f\u1220\7\u010e\2\2\u1220\u1221\7\u0093\2\2\u1221")
        buf.write(u"\u1223\5\u0220\u0111\2\u1222\u1224\t>\2\2\u1223\u1222")
        buf.write(u"\3\2\2\2\u1223\u1224\3\2\2\2\u1224\u01a9\3\2\2\2\u1225")
        buf.write(u"\u1227\7g\2\2\u1226\u1228\t=\2\2\u1227\u1226\3\2\2\2")
        buf.write(u"\u1227\u1228\3\2\2\2\u1228\u1229\3\2\2\2\u1229\u122a")
        buf.write(u"\7\u0093\2\2\u122a\u122b\5\u0220\u0111\2\u122b\u01ab")
        buf.write(u"\3\2\2\2\u122c\u122e\7\u01cc\2\2\u122d\u122f\t=\2\2\u122e")
        buf.write(u"\u122d\3\2\2\2\u122e\u122f\3\2\2\2\u122f\u1230\3\2\2")
        buf.write(u"\2\u1230\u1231\7\u0093\2\2\u1231\u1233\5\u0220\u0111")
        buf.write(u"\2\u1232\u1234\7\u01c1\2\2\u1233\u1232\3\2\2\2\u1233")
        buf.write(u"\u1234\3\2\2\2\u1234\u1236\3\2\2\2\u1235\u1237\7\u0144")
        buf.write(u"\2\2\u1236\u1235\3\2\2\2\u1236\u1237\3\2\2\2\u1237\u1239")
        buf.write(u"\3\2\2\2\u1238\u123a\7\u0215\2\2\u1239\u1238\3\2\2\2")
        buf.write(u"\u1239\u123a\3\2\2\2\u123a\u01ad\3\2\2\2\u123b\u123c")
        buf.write(u"\79\2\2\u123c\u1243\7\u0213\2\2\u123d\u1243\7\u01c1\2")
        buf.write(u"\2\u123e\u1243\7\u0146\2\2\u123f\u1243\7\u0190\2\2\u1240")
        buf.write(u"\u1243\7\u0144\2\2\u1241\u1243\7\u010c\2\2\u1242\u123b")
        buf.write(u"\3\2\2\2\u1242\u123d\3\2\2\2\u1242\u123e\3\2\2\2\u1242")
        buf.write(u"\u123f\3\2\2\2\u1242\u1240\3\2\2\2\u1242\u1241\3\2\2")
        buf.write(u"\2\u1243\u01af\3\2\2\2\u1244\u1246\7\37\2\2\u1245\u1247")
        buf.write(u"\7\u00f9\2\2\u1246\u1245\3\2\2\2\u1246\u1247\3\2\2\2")
        buf.write(u"\u1247\u1248\3\2\2\2\u1248\u1249\7\u0151\2\2\u1249\u124a")
        buf.write(u"\5\u0200\u0101\2\u124a\u124b\7\u01d7\2\2\u124b\u124c")
        buf.write(u"\t?\2\2\u124c\u124d\7\u01ec\2\2\u124d\u124e\7\u03c2\2")
        buf.write(u"\2\u124e\u01b1\3\2\2\2\u124f\u1250\7\u0162\2\2\u1250")
        buf.write(u"\u1251\7\u01b4\2\2\u1251\u1252\5\u0200\u0101\2\u1252")
        buf.write(u"\u1253\7\u01ec\2\2\u1253\u1254\7\u03c2\2\2\u1254\u01b3")
        buf.write(u"\3\2\2\2\u1255\u1256\7\u0210\2\2\u1256\u1257\7\u01b4")
        buf.write(u"\2\2\u1257\u1258\5\u0200\u0101\2\u1258\u01b5\3\2\2\2")
        buf.write(u"\u1259\u125a\7\u0085\2\2\u125a\u125b\5\u01ba\u00de\2")
        buf.write(u"\u125b\u125c\7\u03aa\2\2\u125c\u1264\5\u024c\u0127\2")
        buf.write(u"\u125d\u125e\7\u03b5\2\2\u125e\u125f\5\u01ba\u00de\2")
        buf.write(u"\u125f\u1260\7\u03aa\2\2\u1260\u1261\5\u024c\u0127\2")
        buf.write(u"\u1261\u1263\3\2\2\2\u1262\u125d\3\2\2\2\u1263\u1266")
        buf.write(u"\3\2\2\2\u1264\u1262\3\2\2\2\u1264\u1265\3\2\2\2\u1265")
        buf.write(u"\u127f\3\2\2\2\u1266\u1264\3\2\2\2\u1267\u126b\7\u0085")
        buf.write(u"\2\2\u1268\u1269\7\27\2\2\u1269\u126c\7\u0085\2\2\u126a")
        buf.write(u"\u126c\7\u0293\2\2\u126b\u1268\3\2\2\2\u126b\u126a\3")
        buf.write(u"\2\2\2\u126c\u126f\3\2\2\2\u126d\u1270\5\u01f2\u00fa")
        buf.write(u"\2\u126e\u1270\7&\2\2\u126f\u126d\3\2\2\2\u126f\u126e")
        buf.write(u"\3\2\2\2\u1270\u127f\3\2\2\2\u1271\u1272\7\u0085\2\2")
        buf.write(u"\u1272\u1279\7\u019a\2\2\u1273\u1276\5\u01f2\u00fa\2")
        buf.write(u"\u1274\u1275\7\31\2\2\u1275\u1277\5\u01f4\u00fb\2\u1276")
        buf.write(u"\u1274\3\2\2\2\u1276\u1277\3\2\2\2\u1277\u127a\3\2\2")
        buf.write(u"\2\u1278\u127a\7&\2\2\u1279\u1273\3\2\2\2\u1279\u1278")
        buf.write(u"\3\2\2\2\u127a\u127f\3\2\2\2\u127b\u127f\5\u018e\u00c8")
        buf.write(u"\2\u127c\u127f\5\u0112\u008a\2\u127d\u127f\5\u0110\u0089")
        buf.write(u"\2\u127e\u1259\3\2\2\2\u127e\u1267\3\2\2\2\u127e\u1271")
        buf.write(u"\3\2\2\2\u127e\u127b\3\2\2\2\u127e\u127c\3\2\2\2\u127e")
        buf.write(u"\u127d\3\2\2\2\u127f\u01b7\3\2\2\2\u1280\u1281\7\u0087")
        buf.write(u"\2\2\u1281\u1282\t/\2\2\u1282\u1318\7\u0174\2\2\u1283")
        buf.write(u"\u1284\7\u0087\2\2\u1284\u1285\t@\2\2\u1285\u1288\7\u013e")
        buf.write(u"\2\2\u1286\u1287\7D\2\2\u1287\u1289\7\u03c2\2\2\u1288")
        buf.write(u"\u1286\3\2\2\2\u1288\u1289\3\2\2\2\u1289\u128c\3\2\2")
        buf.write(u"\2\u128a\u128b\7<\2\2\u128b\u128d\5\u0206\u0104\2\u128c")
        buf.write(u"\u128a\3\2\2\2\u128c\u128d\3\2\2\2\u128d\u1295\3\2\2")
        buf.write(u"\2\u128e\u1292\7V\2\2\u128f\u1290\5\u0206\u0104\2\u1290")
        buf.write(u"\u1291\7\u03b5\2\2\u1291\u1293\3\2\2\2\u1292\u128f\3")
        buf.write(u"\2\2\2\u1292\u1293\3\2\2\2\u1293\u1294\3\2\2\2\u1294")
        buf.write(u"\u1296\5\u0206\u0104\2\u1295\u128e\3\2\2\2\u1295\u1296")
        buf.write(u"\3\2\2\2\u1296\u1318\3\2\2\2\u1297\u1298\7\u0087\2\2")
        buf.write(u"\u1298\u129a\5\u01bc\u00df\2\u1299\u129b\5\u01be\u00e0")
        buf.write(u"\2\u129a\u1299\3\2\2\2\u129a\u129b\3\2\2\2\u129b\u1318")
        buf.write(u"\3\2\2\2\u129c\u129e\7\u0087\2\2\u129d\u129f\7\u0150")
        buf.write(u"\2\2\u129e\u129d\3\2\2\2\u129e\u129f\3\2\2\2\u129f\u12a0")
        buf.write(u"\3\2\2\2\u12a0\u12a1\t!\2\2\u12a1\u12a2\tA\2\2\u12a2")
        buf.write(u"\u12a5\5\u01e8\u00f5\2\u12a3\u12a4\tA\2\2\u12a4\u12a6")
        buf.write(u"\5\u0200\u0101\2\u12a5\u12a3\3\2\2\2\u12a5\u12a6\3\2")
        buf.write(u"\2\2\u12a6\u12a8\3\2\2\2\u12a7\u12a9\5\u01be\u00e0\2")
        buf.write(u"\u12a8\u12a7\3\2\2\2\u12a8\u12a9\3\2\2\2\u12a9\u1318")
        buf.write(u"\3\2\2\2\u12aa\u12ab\7\u0087\2\2\u12ab\u12ac\7\37\2\2")
        buf.write(u"\u12ac\u12ae\t\2\2\2\u12ad\u12af\5\u0236\u011c\2\u12ae")
        buf.write(u"\u12ad\3\2\2\2\u12ae\u12af\3\2\2\2\u12af\u12b0\3\2\2")
        buf.write(u"\2\u12b0\u1318\5\u0200\u0101\2\u12b1\u12b2\7\u0087\2")
        buf.write(u"\2\u12b2\u12b3\7\37\2\2\u12b3\u12b4\tB\2\2\u12b4\u1318")
        buf.write(u"\5\u01e6\u00f4\2\u12b5\u12b6\7\u0087\2\2\u12b6\u12b7")
        buf.write(u"\7\37\2\2\u12b7\u12b8\7\u0214\2\2\u12b8\u1318\5\u01ee")
        buf.write(u"\u00f8\2\u12b9\u12ba\7\u0087\2\2\u12ba\u12bb\7\u0137")
        buf.write(u"\2\2\u12bb\u12bc\5\u01f6\u00fc\2\u12bc\u12bd\tC\2\2\u12bd")
        buf.write(u"\u1318\3\2\2\2\u12be\u12bf\7\u0087\2\2\u12bf\u1318\5")
        buf.write(u"\u01c0\u00e1\2\u12c0\u12c1\7\u0087\2\2\u12c1\u12c2\t")
        buf.write(u"D\2\2\u12c2\u12c6\7V\2\2\u12c3\u12c4\5\u0206\u0104\2")
        buf.write(u"\u12c4\u12c5\7\u03b5\2\2\u12c5\u12c7\3\2\2\2\u12c6\u12c3")
        buf.write(u"\3\2\2\2\u12c6\u12c7\3\2\2\2\u12c7\u12c8\3\2\2\2\u12c8")
        buf.write(u"\u1318\5\u0206\u0104\2\u12c9\u12ca\7\u0087\2\2\u12ca")
        buf.write(u"\u12cb\7\u00d7\2\2\u12cb\u12cc\7\u03b3\2\2\u12cc\u12cd")
        buf.write(u"\7\u03a2\2\2\u12cd\u12ce\7\u03b4\2\2\u12ce\u1318\tD\2")
        buf.write(u"\2\u12cf\u12d0\7\u0087\2\2\u12d0\u12d3\5\u01c2\u00e2")
        buf.write(u"\2\u12d1\u12d2\tA\2\2\u12d2\u12d4\5\u0200\u0101\2\u12d3")
        buf.write(u"\u12d1\3\2\2\2\u12d3\u12d4\3\2\2\2\u12d4\u12d6\3\2\2")
        buf.write(u"\2\u12d5\u12d7\5\u01be\u00e0\2\u12d6\u12d5\3\2\2\2\u12d6")
        buf.write(u"\u12d7\3\2\2\2\u12d7\u1318\3\2\2\2\u12d8\u12d9\7\u0087")
        buf.write(u"\2\2\u12d9\u12da\tE\2\2\u12da\u12db\7\u0113\2\2\u12db")
        buf.write(u"\u1318\5\u01e6\u00f4\2\u12dc\u12dd\7\u0087\2\2\u12dd")
        buf.write(u"\u12e0\7\u0154\2\2\u12de\u12df\79\2\2\u12df\u12e1\5\u01ee")
        buf.write(u"\u00f8\2\u12e0\u12de\3\2\2\2\u12e0\u12e1\3\2\2\2\u12e1")
        buf.write(u"\u1318\3\2\2\2\u12e2\u12e3\7\u0087\2\2\u12e3\u12e4\t")
        buf.write(u"F\2\2\u12e4\u12e5\tA\2\2\u12e5\u12e8\5\u01e8\u00f5\2")
        buf.write(u"\u12e6\u12e7\tA\2\2\u12e7\u12e9\5\u0200\u0101\2\u12e8")
        buf.write(u"\u12e6\3\2\2\2\u12e8\u12e9\3\2\2\2\u12e9\u12ec\3\2\2")
        buf.write(u"\2\u12ea\u12eb\7\u00a5\2\2\u12eb\u12ed\5\u024c\u0127")
        buf.write(u"\2\u12ec\u12ea\3\2\2\2\u12ec\u12ed\3\2\2\2\u12ed\u1318")
        buf.write(u"\3\2\2\2\u12ee\u12ef\7\u0087\2\2\u12ef\u12f0\7\u01a8")
        buf.write(u"\2\2\u12f0\u12f3\7\u0230\2\2\u12f1\u12f2\tA\2\2\u12f2")
        buf.write(u"\u12f4\5\u0200\u0101\2\u12f3\u12f1\3\2\2\2\u12f3\u12f4")
        buf.write(u"\3\2\2\2\u12f4\u12f6\3\2\2\2\u12f5\u12f7\5\u01be\u00e0")
        buf.write(u"\2\u12f6\u12f5\3\2\2\2\u12f6\u12f7\3\2\2\2\u12f7\u1318")
        buf.write(u"\3\2\2\2\u12f8\u12f9\7\u0087\2\2\u12f9\u12fa\7\u01bd")
        buf.write(u"\2\2\u12fa\u12ff\5\u01c4\u00e3\2\u12fb\u12fc\7\u03b5")
        buf.write(u"\2\2\u12fc\u12fe\5\u01c4\u00e3\2\u12fd\u12fb\3\2\2\2")
        buf.write(u"\u12fe\u1301\3\2\2\2\u12ff\u12fd\3\2\2\2\u12ff\u1300")
        buf.write(u"\3\2\2\2\u1300\u1305\3\2\2\2\u1301\u12ff\3\2\2\2\u1302")
        buf.write(u"\u1303\79\2\2\u1303\u1304\7\u01c0\2\2\u1304\u1306\5\u0206")
        buf.write(u"\u0104\2\u1305\u1302\3\2\2\2\u1305\u1306\3\2\2\2\u1306")
        buf.write(u"\u1307\3\2\2\2\u1307\u130b\7V\2\2\u1308\u1309\5\u0206")
        buf.write(u"\u0104\2\u1309\u130a\7\u03b5\2\2\u130a\u130c\3\2\2\2")
        buf.write(u"\u130b\u1308\3\2\2\2\u130b\u130c\3\2\2\2\u130c\u130d")
        buf.write(u"\3\2\2\2\u130d\u130e\5\u0206\u0104\2\u130e\u1318\3\2")
        buf.write(u"\2\2\u130f\u1310\7\u0087\2\2\u1310\u1311\7\u01e7\2\2")
        buf.write(u"\u1311\u1315\7\u01fb\2\2\u1312\u1313\79\2\2\u1313\u1314")
        buf.write(u"\7\u010d\2\2\u1314\u1316\7\u03c2\2\2\u1315\u1312\3\2")
        buf.write(u"\2\2\u1315\u1316\3\2\2\2\u1316\u1318\3\2\2\2\u1317\u1280")
        buf.write(u"\3\2\2\2\u1317\u1283\3\2\2\2\u1317\u1297\3\2\2\2\u1317")
        buf.write(u"\u129c\3\2\2\2\u1317\u12aa\3\2\2\2\u1317\u12b1\3\2\2")
        buf.write(u"\2\u1317\u12b5\3\2\2\2\u1317\u12b9\3\2\2\2\u1317\u12be")
        buf.write(u"\3\2\2\2\u1317\u12c0\3\2\2\2\u1317\u12c9\3\2\2\2\u1317")
        buf.write(u"\u12cf\3\2\2\2\u1317\u12d8\3\2\2\2\u1317\u12dc\3\2\2")
        buf.write(u"\2\u1317\u12e2\3\2\2\2\u1317\u12ee\3\2\2\2\u1317\u12f8")
        buf.write(u"\3\2\2\2\u1317\u130f\3\2\2\2\u1318\u01b9\3\2\2\2\u1319")
        buf.write(u"\u1324\7\u03cd\2\2\u131a\u1324\7\u03ce\2\2\u131b\u131c")
        buf.write(u"\7\u03b7\2\2\u131c\u131e\7\u03b7\2\2\u131d\u131b\3\2")
        buf.write(u"\2\2\u131d\u131e\3\2\2\2\u131e\u131f\3\2\2\2\u131f\u1321")
        buf.write(u"\t.\2\2\u1320\u131d\3\2\2\2\u1320\u1321\3\2\2\2\u1321")
        buf.write(u"\u1322\3\2\2\2\u1322\u1324\5\u0200\u0101\2\u1323\u1319")
        buf.write(u"\3\2\2\2\u1323\u131a\3\2\2\2\u1323\u1320\3\2\2\2\u1324")
        buf.write(u"\u01bb\3\2\2\2\u1325\u1326\7\27\2\2\u1326\u1333\7\u0085")
        buf.write(u"\2\2\u1327\u1333\7\u0296\2\2\u1328\u1333\7$\2\2\u1329")
        buf.write(u"\u1333\7\u0083\2\2\u132a\u132b\7\u0151\2\2\u132b\u1333")
        buf.write(u"\7\u01fb\2\2\u132c\u132d\7q\2\2\u132d\u1333\7\u01fb\2")
        buf.write(u"\2\u132e\u1330\t.\2\2\u132f\u132e\3\2\2\2\u132f\u1330")
        buf.write(u"\3\2\2\2\u1330\u1331\3\2\2\2\u1331\u1333\tG\2\2\u1332")
        buf.write(u"\u1325\3\2\2\2\u1332\u1327\3\2\2\2\u1332\u1328\3\2\2")
        buf.write(u"\2\u1332\u1329\3\2\2\2\u1332\u132a\3\2\2\2\u1332\u132c")
        buf.write(u"\3\2\2\2\u1332\u132f\3\2\2\2\u1333\u01bd\3\2\2\2\u1334")
        buf.write(u"\u1335\7U\2\2\u1335\u1339\7\u03c2\2\2\u1336\u1337\7\u00a5")
        buf.write(u"\2\2\u1337\u1339\5\u024c\u0127\2\u1338\u1334\3\2\2\2")
        buf.write(u"\u1338\u1336\3\2\2\2\u1339\u01bf\3\2\2\2\u133a\u133c")
        buf.write(u"\7\u01fd\2\2\u133b\u133a\3\2\2\2\u133b\u133c\3\2\2\2")
        buf.write(u"\u133c\u133d\3\2\2\2\u133d\u134c\7\u0138\2\2\u133e\u133f")
        buf.write(u"\7\u0175\2\2\u133f\u134c\7\u01fb\2\2\u1340\u134c\7\u01b6")
        buf.write(u"\2\2\u1341\u134c\7\u0238\2\2\u1342\u1344\7\u0150\2\2")
        buf.write(u"\u1343\u1342\3\2\2\2\u1343\u1344\3\2\2\2\u1344\u1345")
        buf.write(u"\3\2\2\2\u1345\u134c\7\u01bc\2\2\u1346\u134c\7\u01be")
        buf.write(u"\2\2\u1347\u1348\7\u01e7\2\2\u1348\u134c\7\u015a\2\2")
        buf.write(u"\u1349\u134c\7\u00fd\2\2\u134a\u134c\7\u0121\2\2\u134b")
        buf.write(u"\u133b\3\2\2\2\u134b\u133e\3\2\2\2\u134b\u1340\3\2\2")
        buf.write(u"\2\u134b\u1341\3\2\2\2\u134b\u1343\3\2\2\2\u134b\u1346")
        buf.write(u"\3\2\2\2\u134b\u1347\3\2\2\2\u134b\u1349\3\2\2\2\u134b")
        buf.write(u"\u134a\3\2\2\2\u134c\u01c1\3\2\2\2\u134d\u1356\7\u013e")
        buf.write(u"\2\2\u134e\u134f\7\u0093\2\2\u134f\u1356\7\u01fb\2\2")
        buf.write(u"\u1350\u1352\7\u0150\2\2\u1351\u1350\3\2\2\2\u1351\u1352")
        buf.write(u"\3\2\2\2\u1352\u1353\3\2\2\2\u1353\u1356\7\u0230\2\2")
        buf.write(u"\u1354\u1356\7\u020b\2\2\u1355\u134d\3\2\2\2\u1355\u134e")
        buf.write(u"\3\2\2\2\u1355\u1351\3\2\2\2\u1355\u1354\3\2\2\2\u1356")
        buf.write(u"\u01c3\3\2\2\2\u1357\u1364\7\b\2\2\u1358\u1359\7\u0105")
        buf.write(u"\2\2\u1359\u1364\7\u0165\2\2\u135a\u135b\7\u0120\2\2")
        buf.write(u"\u135b\u1364\7\u0204\2\2\u135c\u1364\7\u0123\2\2\u135d")
        buf.write(u"\u1364\7\u0167\2\2\u135e\u1364\7\u0266\2\2\u135f\u1360")
        buf.write(u"\7\u01ad\2\2\u1360\u1364\7\u0147\2\2\u1361\u1364\7\u01ee")
        buf.write(u"\2\2\u1362\u1364\7\u0203\2\2\u1363\u1357\3\2\2\2\u1363")
        buf.write(u"\u1358\3\2\2\2\u1363\u135a\3\2\2\2\u1363\u135c\3\2\2")
        buf.write(u"\2\u1363\u135d\3\2\2\2\u1363\u135e\3\2\2\2\u1363\u135f")
        buf.write(u"\3\2\2\2\u1363\u1361\3\2\2\2\u1363\u1362\3\2\2\2\u1364")
        buf.write(u"\u01c5\3\2\2\2\u1365\u1366\7\u0103\2\2\u1366\u1367\7")
        buf.write(u"\u03c2\2\2\u1367\u01c7\3\2\2\2\u1368\u1369\7\u0109\2")
        buf.write(u"\2\u1369\u136a\7E\2\2\u136a\u136f\5\u01d4\u00eb\2\u136b")
        buf.write(u"\u136c\7\u03b5\2\2\u136c\u136e\5\u01d4\u00eb\2\u136d")
        buf.write(u"\u136b\3\2\2\2\u136e\u1371\3\2\2\2\u136f\u136d\3\2\2")
        buf.write(u"\2\u136f\u1370\3\2\2\2\u1370\u1379\3\2\2\2\u1371\u136f")
        buf.write(u"\3\2\2\2\u1372\u1373\7o\2\2\u1373\u1376\7\u03b3\2\2\u1374")
        buf.write(u"\u1377\5\u021e\u0110\2\u1375\u1377\7\b\2\2\u1376\u1374")
        buf.write(u"\3\2\2\2\u1376\u1375\3\2\2\2\u1377\u1378\3\2\2\2\u1378")
        buf.write(u"\u137a\7\u03b4\2\2\u1379\u1372\3\2\2\2\u1379\u137a\3")
        buf.write(u"\2\2\2\u137a\u137b\3\2\2\2\u137b\u137c\7D\2\2\u137c\u137d")
        buf.write(u"\5\u0200\u0101\2\u137d\u01c9\3\2\2\2\u137e\u1380\7\u014d")
        buf.write(u"\2\2\u137f\u1381\t=\2\2\u1380\u137f\3\2\2\2\u1380\u1381")
        buf.write(u"\3\2\2\2\u1381\u1382\3\2\2\2\u1382\u1387\5\u01d6\u00ec")
        buf.write(u"\2\u1383\u1384\7\u03b5\2\2\u1384\u1386\5\u01d6\u00ec")
        buf.write(u"\2\u1385\u1383\3\2\2\2\u1386\u1389\3\2\2\2\u1387\u1385")
        buf.write(u"\3\2\2\2\u1387\u1388\3\2\2\2\u1388\u01cb\3\2\2\2\u1389")
        buf.write(u"\u1387\3\2\2\2\u138a\u138c\7Q\2\2\u138b\u138d\tH\2\2")
        buf.write(u"\u138c\u138b\3\2\2\2\u138c\u138d\3\2\2\2\u138d\u138f")
        buf.write(u"\3\2\2\2\u138e\u1390\5\u0206\u0104\2\u138f\u138e\3\2")
        buf.write(u"\2\2\u1390\u1391\3\2\2\2\u1391\u138f\3\2\2\2\u1391\u1392")
        buf.write(u"\3\2\2\2\u1392\u01cd\3\2\2\2\u1393\u1394\7Y\2\2\u1394")
        buf.write(u"\u1395\7E\2\2\u1395\u1396\7K\2\2\u1396\u1397\7\u0109")
        buf.write(u"\2\2\u1397\u139c\5\u01da\u00ee\2\u1398\u1399\7\u03b5")
        buf.write(u"\2\2\u1399\u139b\5\u01da\u00ee\2\u139a\u1398\3\2\2\2")
        buf.write(u"\u139b\u139e\3\2\2\2\u139c\u139a\3\2\2\2\u139c\u139d")
        buf.write(u"\3\2\2\2\u139d\u01cf\3\2\2\2\u139e\u139c\3\2\2\2\u139f")
        buf.write(u"\u13a0\7\u01d5\2\2\u13a0\u13a1\7\u01c0\2\2\u13a1\u13a2")
        buf.write(u"\7\u0109\2\2\u13a2\u01d1\3\2\2\2\u13a3\u13a4\7\u0236")
        buf.write(u"\2\2\u13a4\u01d3\3\2\2\2\u13a5\u13ad\5\u01e8\u00f5\2")
        buf.write(u"\u13a6\u13a8\t\23\2\2\u13a7\u13a6\3\2\2\2\u13a7\u13a8")
        buf.write(u"\3\2\2\2\u13a8\u13a9\3\2\2\2\u13a9\u13aa\7\u03b3\2\2")
        buf.write(u"\u13aa\u13ab\5\u021e\u0110\2\u13ab\u13ac\7\u03b4\2\2")
        buf.write(u"\u13ac\u13ae\3\2\2\2\u13ad\u13a7\3\2\2\2\u13ad\u13ae")
        buf.write(u"\3\2\2\2\u13ae\u01d5\3\2\2\2\u13af\u13c2\7\u012a\2\2")
        buf.write(u"\u13b0\u13c2\7\u015a\2\2\u13b1\u13b3\tI\2\2\u13b2\u13b1")
        buf.write(u"\3\2\2\2\u13b2\u13b3\3\2\2\2\u13b3\u13b4\3\2\2\2\u13b4")
        buf.write(u"\u13c2\7\u0174\2\2\u13b5\u13c2\7\u01a9\2\2\u13b6\u13c2")
        buf.write(u"\7\u0238\2\2\u13b7\u13b8\7\u01c0\2\2\u13b8\u13c2\7\u0109")
        buf.write(u"\2\2\u13b9\u13c2\7\u01fb\2\2\u13ba\u13c2\7\u0216\2\2")
        buf.write(u"\u13bb\u13bf\7\u0230\2\2\u13bc\u13bd\7\u00a7\2\2\u13bd")
        buf.write(u"\u13be\7t\2\2\u13be\u13c0\7Z\2\2\u13bf\u13bc\3\2\2\2")
        buf.write(u"\u13bf\u13c0\3\2\2\2\u13c0\u13c2\3\2\2\2\u13c1\u13af")
        buf.write(u"\3\2\2\2\u13c1\u13b0\3\2\2\2\u13c1\u13b2\3\2\2\2\u13c1")
        buf.write(u"\u13b5\3\2\2\2\u13c1\u13b6\3\2\2\2\u13c1\u13b7\3\2\2")
        buf.write(u"\2\u13c1\u13b9\3\2\2\2\u13c1\u13ba\3\2\2\2\u13c1\u13bb")
        buf.write(u"\3\2\2\2\u13c2\u13ce\3\2\2\2\u13c3\u13c4\7\u01c6\2\2")
        buf.write(u"\u13c4\u13c6\7\u0174\2\2\u13c5\u13c7\5\u0138\u009d\2")
        buf.write(u"\u13c6\u13c5\3\2\2\2\u13c6\u13c7\3\2\2\2\u13c7\u13ce")
        buf.write(u"\3\2\2\2\u13c8\u13c9\7\u0230\2\2\u13c9\u13cb\5\u0220")
        buf.write(u"\u0111\2\u13ca\u13cc\5\u01d8\u00ed\2\u13cb\u13ca\3\2")
        buf.write(u"\2\2\u13cb\u13cc\3\2\2\2\u13cc\u13ce\3\2\2\2\u13cd\u13c1")
        buf.write(u"\3\2\2\2\u13cd\u13c3\3\2\2\2\u13cd\u13c8\3\2\2\2\u13ce")
        buf.write(u"\u01d7\3\2\2\2\u13cf\u13d0\7\u00a7\2\2\u13d0\u13d1\7")
        buf.write(u"t\2\2\u13d1\u13d5\7Z\2\2\u13d2\u13d3\79\2\2\u13d3\u13d5")
        buf.write(u"\7\u0143\2\2\u13d4\u13cf\3\2\2\2\u13d4\u13d2\3\2\2\2")
        buf.write(u"\u13d5\u01d9\3\2\2\2\u13d6\u13de\5\u01e8\u00f5\2\u13d7")
        buf.write(u"\u13d8\7o\2\2\u13d8\u13db\7\u03b3\2\2\u13d9\u13dc\5\u021e")
        buf.write(u"\u0110\2\u13da\u13dc\7\b\2\2\u13db\u13d9\3\2\2\2\u13db")
        buf.write(u"\u13da\3\2\2\2\u13dc\u13dd\3\2\2\2\u13dd\u13df\7\u03b4")
        buf.write(u"\2\2\u13de\u13d7\3\2\2\2\u13de\u13df\3\2\2\2\u13df\u13e7")
        buf.write(u"\3\2\2\2\u13e0\u13e2\t\23\2\2\u13e1\u13e0\3\2\2\2\u13e1")
        buf.write(u"\u13e2\3\2\2\2\u13e2\u13e3\3\2\2\2\u13e3\u13e4\7\u03b3")
        buf.write(u"\2\2\u13e4\u13e5\5\u021e\u0110\2\u13e5\u13e6\7\u03b4")
        buf.write(u"\2\2\u13e6\u13e8\3\2\2\2\u13e7\u13e1\3\2\2\2\u13e7\u13e8")
        buf.write(u"\3\2\2\2\u13e8\u13eb\3\2\2\2\u13e9\u13ea\7C\2\2\u13ea")
        buf.write(u"\u13ec\7\u016e\2\2\u13eb\u13e9\3\2\2\2\u13eb\u13ec\3")
        buf.write(u"\2\2\2\u13ec\u01db\3\2\2\2\u13ed\u13ee\tJ\2\2\u13ee\u13f1")
        buf.write(u"\5\u01e8\u00f5\2\u13ef\u13f2\5\u0200\u0101\2\u13f0\u13f2")
        buf.write(u"\7\u03c2\2\2\u13f1\u13ef\3\2\2\2\u13f1\u13f0\3\2\2\2")
        buf.write(u"\u13f1\u13f2\3\2\2\2\u13f2\u01dd\3\2\2\2\u13f3\u13f7")
        buf.write(u"\tJ\2\2\u13f4\u13f5\tK\2\2\u13f5\u13f6\7\u03aa\2\2\u13f6")
        buf.write(u"\u13f8\tL\2\2\u13f7\u13f4\3\2\2\2\u13f7\u13f8\3\2\2\2")
        buf.write(u"\u13f8\u13f9\3\2\2\2\u13f9\u13fa\5\u01e4\u00f3\2\u13fa")
        buf.write(u"\u01df\3\2\2\2\u13fb\u13fc\7\u0158\2\2\u13fc\u13fd\7")
        buf.write(u"\u03c2\2\2\u13fd\u01e1\3\2\2\2\u13fe\u13ff\7\u00a1\2")
        buf.write(u"\2\u13ff\u1400\5\u0200\u0101\2\u1400\u01e3\3\2\2\2\u1401")
        buf.write(u"\u1407\5\u00b4[\2\u1402\u1407\5\u00a6T\2\u1403\u1407")
        buf.write(u"\5\u00acW\2\u1404\u1407\5\u00b2Z\2\u1405\u1407\5\u00b6")
        buf.write(u"\\\2\u1406\u1401\3\2\2\2\u1406\u1402\3\2\2\2\u1406\u1403")
        buf.write(u"\3\2\2\2\u1406\u1404\3\2\2\2\u1406\u1405\3\2\2\2\u1407")
        buf.write(u"\u140c\3\2\2\2\u1408\u1409\79\2\2\u1409\u140a\7\u011d")
        buf.write(u"\2\2\u140a\u140c\5\u0200\u0101\2\u140b\u1406\3\2\2\2")
        buf.write(u"\u140b\u1408\3\2\2\2\u140c\u01e5\3\2\2\2\u140d\u1411")
        buf.write(u"\5\u0200\u0101\2\u140e\u1412\7\u03c9\2\2\u140f\u1410")
        buf.write(u"\7\u03b2\2\2\u1410\u1412\5\u0200\u0101\2\u1411\u140e")
        buf.write(u"\3\2\2\2\u1411\u140f\3\2\2\2\u1411\u1412\3\2\2\2\u1412")
        buf.write(u"\u01e7\3\2\2\2\u1413\u1414\5\u01e6\u00f4\2\u1414\u01e9")
        buf.write(u"\3\2\2\2\u1415\u141a\5\u0200\u0101\2\u1416\u1418\5\u0204")
        buf.write(u"\u0103\2\u1417\u1419\5\u0204\u0103\2\u1418\u1417\3\2")
        buf.write(u"\2\2\u1418\u1419\3\2\2\2\u1419\u141b\3\2\2\2\u141a\u1416")
        buf.write(u"\3\2\2\2\u141a\u141b\3\2\2\2\u141b\u01eb\3\2\2\2\u141c")
        buf.write(u"\u1421\5\u0200\u0101\2\u141d\u141e\7\u03b3\2\2\u141e")
        buf.write(u"\u141f\5\u0206\u0104\2\u141f\u1420\7\u03b4\2\2\u1420")
        buf.write(u"\u1422\3\2\2\2\u1421\u141d\3\2\2\2\u1421\u1422\3\2\2")
        buf.write(u"\2\u1422\u1424\3\2\2\2\u1423\u1425\t(\2\2\u1424\u1423")
        buf.write(u"\3\2\2\2\u1424\u1425\3\2\2\2\u1425\u01ed\3\2\2\2\u1426")
        buf.write(u"\u1427\tM\2\2\u1427\u01ef\3\2\2\2\u1428\u1429\tN\2\2")
        buf.write(u"\u1429\u01f1\3\2\2\2\u142a\u142f\7\u00bd\2\2\u142b\u142f")
        buf.write(u"\5\u025c\u012f\2\u142c\u142f\7\u03c2\2\2\u142d\u142f")
        buf.write(u"\7\u03bf\2\2\u142e\u142a\3\2\2\2\u142e\u142b\3\2\2\2")
        buf.write(u"\u142e\u142c\3\2\2\2\u142e\u142d\3\2\2\2\u142f\u01f3")
        buf.write(u"\3\2\2\2\u1430\u1433\5\u0200\u0101\2\u1431\u1433\7\u03c2")
        buf.write(u"\2\2\u1432\u1430\3\2\2\2\u1432\u1431\3\2\2\2\u1433\u01f5")
        buf.write(u"\3\2\2\2\u1434\u1435\tO\2\2\u1435\u01f7\3\2\2\2\u1436")
        buf.write(u"\u1437\5\u0206\u0104\2\u1437\u1438\7\u03a7\2\2\u1438")
        buf.write(u"\u1439\5\u0206\u0104\2\u1439\u143a\7\u03a7\2\2\u143a")
        buf.write(u"\u143b\5\u0206\u0104\2\u143b\u143c\7\u03a7\2\2\u143c")
        buf.write(u"\u143d\5\u0206\u0104\2\u143d\u143e\7\u03a7\2\2\u143e")
        buf.write(u"\u1444\5\u0206\u0104\2\u143f\u1440\7\u03be\2\2\u1440")
        buf.write(u"\u1441\5\u0206\u0104\2\u1441\u1442\7\u03a7\2\2\u1442")
        buf.write(u"\u1443\5\u0206\u0104\2\u1443\u1445\3\2\2\2\u1444\u143f")
        buf.write(u"\3\2\2\2\u1445\u1446\3\2\2\2\u1446\u1444\3\2\2\2\u1446")
        buf.write(u"\u1447\3\2\2\2\u1447\u01f9\3\2\2\2\u1448\u144f\5\u01fc")
        buf.write(u"\u00ff\2\u1449\u144a\7\u03b5\2\2\u144a\u144d\5\u01fc")
        buf.write(u"\u00ff\2\u144b\u144c\7\u03b5\2\2\u144c\u144e\5\u0206")
        buf.write(u"\u0104\2\u144d\u144b\3\2\2\2\u144d\u144e\3\2\2\2\u144e")
        buf.write(u"\u1450\3\2\2\2\u144f\u1449\3\2\2\2\u144f\u1450\3\2\2")
        buf.write(u"\2\u1450\u01fb\3\2\2\2\u1451\u1459\7\u03c2\2\2\u1452")
        buf.write(u"\u1459\7\u03c7\2\2\u1453\u1455\7\u03c4\2\2\u1454\u1453")
        buf.write(u"\3\2\2\2\u1455\u1456\3\2\2\2\u1456\u1454\3\2\2\2\u1456")
        buf.write(u"\u1457\3\2\2\2\u1457\u1459\3\2\2\2\u1458\u1451\3\2\2")
        buf.write(u"\2\u1458\u1452\3\2\2\2\u1458\u1454\3\2\2\2\u1459\u01fd")
        buf.write(u"\3\2\2\2\u145a\u145d\5\u0200\u0101\2\u145b\u145d\7\u03c2")
        buf.write(u"\2\2\u145c\u145a\3\2\2\2\u145c\u145b\3\2\2\2\u145d\u01ff")
        buf.write(u"\3\2\2\2\u145e\u1462\5\u0202\u0102\2\u145f\u1462\7\u03cb")
        buf.write(u"\2\2\u1460\u1462\7\u03bf\2\2\u1461\u145e\3\2\2\2\u1461")
        buf.write(u"\u145f\3\2\2\2\u1461\u1460\3\2\2\2\u1462\u0201\3\2\2")
        buf.write(u"\2\u1463\u146d\7\u03ca\2\2\u1464\u146d\5\u025c\u012f")
        buf.write(u"\2\u1465\u146d\5\u025e\u0130\2\u1466\u146d\5\u01f6\u00fc")
        buf.write(u"\2\u1467\u146d\5\u0260\u0131\2\u1468\u146d\5\u0262\u0132")
        buf.write(u"\2\u1469\u146d\5\u0264\u0133\2\u146a\u146d\5\u0266\u0134")
        buf.write(u"\2\u146b\u146d\5\u0268\u0135\2\u146c\u1463\3\2\2\2\u146c")
        buf.write(u"\u1464\3\2\2\2\u146c\u1465\3\2\2\2\u146c\u1466\3\2\2")
        buf.write(u"\2\u146c\u1467\3\2\2\2\u146c\u1468\3\2\2\2\u146c\u1469")
        buf.write(u"\3\2\2\2\u146c\u146a\3\2\2\2\u146c\u146b\3\2\2\2\u146d")
        buf.write(u"\u0203\3\2\2\2\u146e\u1472\7\u03c9\2\2\u146f\u1470\7")
        buf.write(u"\u03b2\2\2\u1470\u1472\5\u0200\u0101\2\u1471\u146e\3")
        buf.write(u"\2\2\2\u1471\u146f\3\2\2\2\u1472\u0205\3\2\2\2\u1473")
        buf.write(u"\u1474\tP\2\2\u1474\u0207\3\2\2\2\u1475\u1478\7\u03c0")
        buf.write(u"\2\2\u1476\u1478\5\u0206\u0104\2\u1477\u1475\3\2\2\2")
        buf.write(u"\u1477\u1476\3\2\2\2\u1478\u0209\3\2\2\2\u1479\u147b")
        buf.write(u"\7\u03c8\2\2\u147a\u1479\3\2\2\2\u147a\u147b\3\2\2\2")
        buf.write(u"\u147b\u147c\3\2\2\2\u147c\u147f\7\u03c2\2\2\u147d\u147f")
        buf.write(u"\7\u03c1\2\2\u147e\u147a\3\2\2\2\u147e\u147d\3\2\2\2")
        buf.write(u"\u147f\u1481\3\2\2\2\u1480\u1482\7\u03c2\2\2\u1481\u1480")
        buf.write(u"\3\2\2\2\u1482\u1483\3\2\2\2\u1483\u1481\3\2\2\2\u1483")
        buf.write(u"\u1484\3\2\2\2\u1484\u1491\3\2\2\2\u1485\u1487\7\u03c8")
        buf.write(u"\2\2\u1486\u1485\3\2\2\2\u1486\u1487\3\2\2\2\u1487\u1488")
        buf.write(u"\3\2\2\2\u1488\u148b\7\u03c2\2\2\u1489\u148b\7\u03c1")
        buf.write(u"\2\2\u148a\u1486\3\2\2\2\u148a\u1489\3\2\2\2\u148b\u148e")
        buf.write(u"\3\2\2\2\u148c\u148d\7\31\2\2\u148d\u148f\5\u01f4\u00fb")
        buf.write(u"\2\u148e\u148c\3\2\2\2\u148e\u148f\3\2\2\2\u148f\u1491")
        buf.write(u"\3\2\2\2\u1490\u147e\3\2\2\2\u1490\u148a\3\2\2\2\u1491")
        buf.write(u"\u020b\3\2\2\2\u1492\u1493\tQ\2\2\u1493\u020d\3\2\2\2")
        buf.write(u"\u1494\u1496\7\u03c8\2\2\u1495\u1494\3\2\2\2\u1495\u1496")
        buf.write(u"\3\2\2\2\u1496\u1497\3\2\2\2\u1497\u1498\7\u03c4\2\2")
        buf.write(u"\u1498\u020f\3\2\2\2\u1499\u149b\7c\2\2\u149a\u1499\3")
        buf.write(u"\2\2\2\u149a\u149b\3\2\2\2\u149b\u149c\3\2\2\2\u149c")
        buf.write(u"\u149d\tR\2\2\u149d\u0211\3\2\2\2\u149e\u14ab\5\u020a")
        buf.write(u"\u0106\2\u149f\u14ab\5\u0206\u0104\2\u14a0\u14a1\7\u03a7")
        buf.write(u"\2\2\u14a1\u14ab\5\u0206\u0104\2\u14a2\u14ab\5\u020e")
        buf.write(u"\u0108\2\u14a3\u14ab\5\u020c\u0107\2\u14a4\u14ab\7\u03c5")
        buf.write(u"\2\2\u14a5\u14ab\7\u03c7\2\2\u14a6\u14a8\7c\2\2\u14a7")
        buf.write(u"\u14a6\3\2\2\2\u14a7\u14a8\3\2\2\2\u14a8\u14a9\3\2\2")
        buf.write(u"\2\u14a9\u14ab\tR\2\2\u14aa\u149e\3\2\2\2\u14aa\u149f")
        buf.write(u"\3\2\2\2\u14aa\u14a0\3\2\2\2\u14aa\u14a2\3\2\2\2\u14aa")
        buf.write(u"\u14a3\3\2\2\2\u14aa\u14a4\3\2\2\2\u14aa\u14a5\3\2\2")
        buf.write(u"\2\u14aa\u14a7\3\2\2\2\u14ab\u0213\3\2\2\2\u14ac\u14ae")
        buf.write(u"\tS\2\2\u14ad\u14af\5\u0218\u010d\2\u14ae\u14ad\3\2\2")
        buf.write(u"\2\u14ae\u14af\3\2\2\2\u14af\u14b1\3\2\2\2\u14b0\u14b2")
        buf.write(u"\7\u00bd\2\2\u14b1\u14b0\3\2\2\2\u14b1\u14b2\3\2\2\2")
        buf.write(u"\u14b2\u14b6\3\2\2\2\u14b3\u14b4\7\27\2\2\u14b4\u14b5")
        buf.write(u"\7\u0085\2\2\u14b5\u14b7\5\u01f2\u00fa\2\u14b6\u14b3")
        buf.write(u"\3\2\2\2\u14b6\u14b7\3\2\2\2\u14b7\u14ba\3\2\2\2\u14b8")
        buf.write(u"\u14b9\7\31\2\2\u14b9\u14bb\5\u01f4\u00fb\2\u14ba\u14b8")
        buf.write(u"\3\2\2\2\u14ba\u14bb\3\2\2\2\u14bb\u14f8\3\2\2\2\u14bc")
        buf.write(u"\u14be\tT\2\2\u14bd\u14bf\5\u0218\u010d\2\u14be\u14bd")
        buf.write(u"\3\2\2\2\u14be\u14bf\3\2\2\2\u14bf\u14c1\3\2\2\2\u14c0")
        buf.write(u"\u14c2\7\u009e\2\2\u14c1\u14c0\3\2\2\2\u14c1\u14c2\3")
        buf.write(u"\2\2\2\u14c2\u14c4\3\2\2\2\u14c3\u14c5\7\u00aa\2\2\u14c4")
        buf.write(u"\u14c3\3\2\2\2\u14c4\u14c5\3\2\2\2\u14c5\u14f8\3\2\2")
        buf.write(u"\2\u14c6\u14c8\tU\2\2\u14c7\u14c9\5\u021a\u010e\2\u14c8")
        buf.write(u"\u14c7\3\2\2\2\u14c8\u14c9\3\2\2\2\u14c9\u14cb\3\2\2")
        buf.write(u"\2\u14ca\u14cc\7\u009e\2\2\u14cb\u14ca\3\2\2\2\u14cb")
        buf.write(u"\u14cc\3\2\2\2\u14cc\u14ce\3\2\2\2\u14cd\u14cf\7\u00aa")
        buf.write(u"\2\2\u14ce\u14cd\3\2\2\2\u14ce\u14cf\3\2\2\2\u14cf\u14f8")
        buf.write(u"\3\2\2\2\u14d0\u14d2\tV\2\2\u14d1\u14d3\5\u021c\u010f")
        buf.write(u"\2\u14d2\u14d1\3\2\2\2\u14d2\u14d3\3\2\2\2\u14d3\u14d5")
        buf.write(u"\3\2\2\2\u14d4\u14d6\7\u009e\2\2\u14d5\u14d4\3\2\2\2")
        buf.write(u"\u14d5\u14d6\3\2\2\2\u14d6\u14d8\3\2\2\2\u14d7\u14d9")
        buf.write(u"\7\u00aa\2\2\u14d8\u14d7\3\2\2\2\u14d8\u14d9\3\2\2\2")
        buf.write(u"\u14d9\u14f8\3\2\2\2\u14da\u14f8\tW\2\2\u14db\u14dd\t")
        buf.write(u"X\2\2\u14dc\u14de\5\u0218\u010d\2\u14dd\u14dc\3\2\2\2")
        buf.write(u"\u14dd\u14de\3\2\2\2\u14de\u14f8\3\2\2\2\u14df\u14e0")
        buf.write(u"\tY\2\2\u14e0\u14e1\7\u03b3\2\2\u14e1\u14e6\7\u03c2\2")
        buf.write(u"\2\u14e2\u14e3\7\u03b5\2\2\u14e3\u14e5\7\u03c2\2\2\u14e4")
        buf.write(u"\u14e2\3\2\2\2\u14e5\u14e8\3\2\2\2\u14e6\u14e4\3\2\2")
        buf.write(u"\2\u14e6\u14e7\3\2\2\2\u14e7\u14e9\3\2\2\2\u14e8\u14e6")
        buf.write(u"\3\2\2\2\u14e9\u14eb\7\u03b4\2\2\u14ea\u14ec\7\u00bd")
        buf.write(u"\2\2\u14eb\u14ea\3\2\2\2\u14eb\u14ec\3\2\2\2\u14ec\u14f0")
        buf.write(u"\3\2\2\2\u14ed\u14ee\7\27\2\2\u14ee\u14ef\7\u0085\2\2")
        buf.write(u"\u14ef\u14f1\5\u01f2\u00fa\2\u14f0\u14ed\3\2\2\2\u14f0")
        buf.write(u"\u14f1\3\2\2\2\u14f1\u14f4\3\2\2\2\u14f2\u14f3\7\31\2")
        buf.write(u"\2\u14f3\u14f5\5\u01f4\u00fb\2\u14f4\u14f2\3\2\2\2\u14f4")
        buf.write(u"\u14f5\3\2\2\2\u14f5\u14f8\3\2\2\2\u14f6\u14f8\tZ\2\2")
        buf.write(u"\u14f7\u14ac\3\2\2\2\u14f7\u14bc\3\2\2\2\u14f7\u14c6")
        buf.write(u"\3\2\2\2\u14f7\u14d0\3\2\2\2\u14f7\u14da\3\2\2\2\u14f7")
        buf.write(u"\u14db\3\2\2\2\u14f7\u14df\3\2\2\2\u14f7\u14f6\3\2\2")
        buf.write(u"\2\u14f8\u0215\3\2\2\2\u14f9\u14fb\t[\2\2\u14fa\u14fc")
        buf.write(u"\5\u0218\u010d\2\u14fb\u14fa\3\2\2\2\u14fb\u14fc\3\2")
        buf.write(u"\2\2\u14fc\u1510\3\2\2\2\u14fd\u14ff\7\u00bb\2\2\u14fe")
        buf.write(u"\u1500\5\u0218\u010d\2\u14ff\u14fe\3\2\2\2\u14ff\u1500")
        buf.write(u"\3\2\2\2\u1500\u1504\3\2\2\2\u1501\u1502\7\27\2\2\u1502")
        buf.write(u"\u1503\7\u0085\2\2\u1503\u1505\5\u01f2\u00fa\2\u1504")
        buf.write(u"\u1501\3\2\2\2\u1504\u1505\3\2\2\2\u1505\u1510\3\2\2")
        buf.write(u"\2\u1506\u1510\t\\\2\2\u1507\u1509\7\u00b4\2\2\u1508")
        buf.write(u"\u150a\5\u021a\u010e\2\u1509\u1508\3\2\2\2\u1509\u150a")
        buf.write(u"\3\2\2\2\u150a\u1510\3\2\2\2\u150b\u150d\t]\2\2\u150c")
        buf.write(u"\u150e\7\u00af\2\2\u150d\u150c\3\2\2\2\u150d\u150e\3")
        buf.write(u"\2\2\2\u150e\u1510\3\2\2\2\u150f\u14f9\3\2\2\2\u150f")
        buf.write(u"\u14fd\3\2\2\2\u150f\u1506\3\2\2\2\u150f\u1507\3\2\2")
        buf.write(u"\2\u150f\u150b\3\2\2\2\u1510\u0217\3\2\2\2\u1511\u1512")
        buf.write(u"\7\u03b3\2\2\u1512\u1513\5\u0206\u0104\2\u1513\u1514")
        buf.write(u"\7\u03b4\2\2\u1514\u0219\3\2\2\2\u1515\u1516\7\u03b3")
        buf.write(u"\2\2\u1516\u1517\5\u0206\u0104\2\u1517\u1518\7\u03b5")
        buf.write(u"\2\2\u1518\u1519\5\u0206\u0104\2\u1519\u151a\7\u03b4")
        buf.write(u"\2\2\u151a\u021b\3\2\2\2\u151b\u151c\7\u03b3\2\2\u151c")
        buf.write(u"\u151f\5\u0206\u0104\2\u151d\u151e\7\u03b5\2\2\u151e")
        buf.write(u"\u1520\5\u0206\u0104\2\u151f\u151d\3\2\2\2\u151f\u1520")
        buf.write(u"\3\2\2\2\u1520\u1521\3\2\2\2\u1521\u1522\7\u03b4\2\2")
        buf.write(u"\u1522\u021d\3\2\2\2\u1523\u1528\5\u0200\u0101\2\u1524")
        buf.write(u"\u1525\7\u03b5\2\2\u1525\u1527\5\u0200\u0101\2\u1526")
        buf.write(u"\u1524\3\2\2\2\u1527\u152a\3\2\2\2\u1528\u1526\3\2\2")
        buf.write(u"\2\u1528\u1529\3\2\2\2\u1529\u021f\3\2\2\2\u152a\u1528")
        buf.write(u"\3\2\2\2\u152b\u1530\5\u01e8\u00f5\2\u152c\u152d\7\u03b5")
        buf.write(u"\2\2\u152d\u152f\5\u01e8\u00f5\2\u152e\u152c\3\2\2\2")
        buf.write(u"\u152f\u1532\3\2\2\2\u1530\u152e\3\2\2\2\u1530\u1531")
        buf.write(u"\3\2\2\2\u1531\u0221\3\2\2\2\u1532\u1530\3\2\2\2\u1533")
        buf.write(u"\u1534\7\u03b3\2\2\u1534\u1539\5\u01ec\u00f7\2\u1535")
        buf.write(u"\u1536\7\u03b5\2\2\u1536\u1538\5\u01ec\u00f7\2\u1537")
        buf.write(u"\u1535\3\2\2\2\u1538\u153b\3\2\2\2\u1539\u1537\3\2\2")
        buf.write(u"\2\u1539\u153a\3\2\2\2\u153a\u153c\3\2\2\2\u153b\u1539")
        buf.write(u"\3\2\2\2\u153c\u153d\7\u03b4\2\2\u153d\u0223\3\2\2\2")
        buf.write(u"\u153e\u1543\5\u024c\u0127\2\u153f\u1540\7\u03b5\2\2")
        buf.write(u"\u1540\u1542\5\u024c\u0127\2\u1541\u153f\3\2\2\2\u1542")
        buf.write(u"\u1545\3\2\2\2\u1543\u1541\3\2\2\2\u1543\u1544\3\2\2")
        buf.write(u"\2\u1544\u0225\3\2\2\2\u1545\u1543\3\2\2\2\u1546\u154b")
        buf.write(u"\5\u0232\u011a\2\u1547\u1548\7\u03b5\2\2\u1548\u154a")
        buf.write(u"\5\u0232\u011a\2\u1549\u1547\3\2\2\2\u154a\u154d\3\2")
        buf.write(u"\2\2\u154b\u1549\3\2\2\2\u154b\u154c\3\2\2\2\u154c\u0227")
        buf.write(u"\3\2\2\2\u154d\u154b\3\2\2\2\u154e\u1553\5\u0212\u010a")
        buf.write(u"\2\u154f\u1550\7\u03b5\2\2\u1550\u1552\5\u0212\u010a")
        buf.write(u"\2\u1551\u154f\3\2\2\2\u1552\u1555\3\2\2\2\u1553\u1551")
        buf.write(u"\3\2\2\2\u1553\u1554\3\2\2\2\u1554\u0229\3\2\2\2\u1555")
        buf.write(u"\u1553\3\2\2\2\u1556\u155b\7\u03c2\2\2\u1557\u1558\7")
        buf.write(u"\u03b5\2\2\u1558\u155a\7\u03c2\2\2\u1559\u1557\3\2\2")
        buf.write(u"\2\u155a\u155d\3\2\2\2\u155b\u1559\3\2\2\2\u155b\u155c")
        buf.write(u"\3\2\2\2\u155c\u022b\3\2\2\2\u155d\u155b\3\2\2\2\u155e")
        buf.write(u"\u1563\7\u03cd\2\2\u155f\u1560\7\u03b5\2\2\u1560\u1562")
        buf.write(u"\7\u03cd\2\2\u1561\u155f\3\2\2\2\u1562\u1565\3\2\2\2")
        buf.write(u"\u1563\u1561\3\2\2\2\u1563\u1564\3\2\2\2\u1564\u022d")
        buf.write(u"\3\2\2\2\u1565\u1563\3\2\2\2\u1566\u156f\7e\2\2\u1567")
        buf.write(u"\u156f\5\u0212\u010a\2\u1568\u156c\5\u0230\u0119\2\u1569")
        buf.write(u"\u156a\7f\2\2\u156a\u156b\7\u009f\2\2\u156b\u156d\5\u0230")
        buf.write(u"\u0119\2\u156c\u1569\3\2\2\2\u156c\u156d\3\2\2\2\u156d")
        buf.write(u"\u156f\3\2\2\2\u156e\u1566\3\2\2\2\u156e\u1567\3\2\2")
        buf.write(u"\2\u156e\u1568\3\2\2\2\u156f\u022f\3\2\2\2\u1570\u1576")
        buf.write(u"\t^\2\2\u1571\u1573\7\u03b3\2\2\u1572\u1574\5\u0206\u0104")
        buf.write(u"\2\u1573\u1572\3\2\2\2\u1573\u1574\3\2\2\2\u1574\u1575")
        buf.write(u"\3\2\2\2\u1575\u1577\7\u03b4\2\2\u1576\u1571\3\2\2\2")
        buf.write(u"\u1576\u1577\3\2\2\2\u1577\u157f\3\2\2\2\u1578\u1579")
        buf.write(u"\7\u00ed\2\2\u1579\u157b\7\u03b3\2\2\u157a\u157c\5\u0206")
        buf.write(u"\u0104\2\u157b\u157a\3\2\2\2\u157b\u157c\3\2\2\2\u157c")
        buf.write(u"\u157d\3\2\2\2\u157d\u157f\7\u03b4\2\2\u157e\u1570\3")
        buf.write(u"\2\2\2\u157e\u1578\3\2\2\2\u157f\u0231\3\2\2\2\u1580")
        buf.write(u"\u1583\5\u024c\u0127\2\u1581\u1583\7&\2\2\u1582\u1580")
        buf.write(u"\3\2\2\2\u1582\u1581\3\2\2\2\u1583\u0233\3\2\2\2\u1584")
        buf.write(u"\u1585\7B\2\2\u1585\u1586\7\64\2\2\u1586\u0235\3\2\2")
        buf.write(u"\2\u1587\u1588\7B\2\2\u1588\u1589\7c\2\2\u1589\u158a")
        buf.write(u"\7\64\2\2\u158a\u0237\3\2\2\2\u158b\u159d\5\u023a\u011e")
        buf.write(u"\2\u158c\u159d\5\u0242\u0122\2\u158d\u158e\5\u0244\u0123")
        buf.write(u"\2\u158e\u1590\7\u03b3\2\2\u158f\u1591\5\u0248\u0125")
        buf.write(u"\2\u1590\u158f\3\2\2\2\u1590\u1591\3\2\2\2\u1591\u1592")
        buf.write(u"\3\2\2\2\u1592\u1593\7\u03b4\2\2\u1593\u159d\3\2\2\2")
        buf.write(u"\u1594\u1595\5\u01e6\u00f4\2\u1595\u1597\7\u03b3\2\2")
        buf.write(u"\u1596\u1598\5\u0248\u0125\2\u1597\u1596\3\2\2\2\u1597")
        buf.write(u"\u1598\3\2\2\2\u1598\u1599\3\2\2\2\u1599\u159a\7\u03b4")
        buf.write(u"\2\2\u159a\u159d\3\2\2\2\u159b\u159d\5\u0246\u0124\2")
        buf.write(u"\u159c\u158b\3\2\2\2\u159c\u158c\3\2\2\2\u159c\u158d")
        buf.write(u"\3\2\2\2\u159c\u1594\3\2\2\2\u159c\u159b\3\2\2\2\u159d")
        buf.write(u"\u0239\3\2\2\2\u159e\u163c\t_\2\2\u159f\u15a0\7\36\2")
        buf.write(u"\2\u15a0\u15a1\7\u03b3\2\2\u15a1\u15a2\5\u024c\u0127")
        buf.write(u"\2\u15a2\u15a3\7\u03b5\2\2\u15a3\u15a4\5\u0216\u010c")
        buf.write(u"\2\u15a4\u15a5\7\u03b4\2\2\u15a5\u163c\3\2\2\2\u15a6")
        buf.write(u"\u15a7\7\36\2\2\u15a7\u15a8\7\u03b3\2\2\u15a8\u15a9\5")
        buf.write(u"\u024c\u0127\2\u15a9\u15aa\7\u00a2\2\2\u15aa\u15ab\5")
        buf.write(u"\u01f2\u00fa\2\u15ab\u15ac\7\u03b4\2\2\u15ac\u163c\3")
        buf.write(u"\2\2\2\u15ad\u15ae\7\25\2\2\u15ae\u15af\7\u03b3\2\2\u15af")
        buf.write(u"\u15b0\5\u024c\u0127\2\u15b0\u15b1\7\f\2\2\u15b1\u15b2")
        buf.write(u"\5\u0216\u010c\2\u15b2\u15b3\7\u03b4\2\2\u15b3\u163c")
        buf.write(u"\3\2\2\2\u15b4\u15b5\7\u00a3\2\2\u15b5\u15b6\7\u03b3")
        buf.write(u"\2\2\u15b6\u15b7\5\u01ea\u00f6\2\u15b7\u15b8\7\u03b4")
        buf.write(u"\2\2\u15b8\u163c\3\2\2\2\u15b9\u15ba\7\24\2\2\u15ba\u15bc")
        buf.write(u"\5\u024c\u0127\2\u15bb\u15bd\5\u023c\u011f\2\u15bc\u15bb")
        buf.write(u"\3\2\2\2\u15bd\u15be\3\2\2\2\u15be\u15bc\3\2\2\2\u15be")
        buf.write(u"\u15bf\3\2\2\2\u15bf\u15c2\3\2\2\2\u15c0\u15c1\7\60\2")
        buf.write(u"\2\u15c1\u15c3\5\u024a\u0126\2\u15c2\u15c0\3\2\2\2\u15c2")
        buf.write(u"\u15c3\3\2\2\2\u15c3\u15c4\3\2\2\2\u15c4\u15c5\7\u0135")
        buf.write(u"\2\2\u15c5\u163c\3\2\2\2\u15c6\u15c8\7\24\2\2\u15c7\u15c9")
        buf.write(u"\5\u023c\u011f\2\u15c8\u15c7\3\2\2\2\u15c9\u15ca\3\2")
        buf.write(u"\2\2\u15ca\u15c8\3\2\2\2\u15ca\u15cb\3\2\2\2\u15cb\u15ce")
        buf.write(u"\3\2\2\2\u15cc\u15cd\7\60\2\2\u15cd\u15cf\5\u024a\u0126")
        buf.write(u"\2\u15ce\u15cc\3\2\2\2\u15ce\u15cf\3\2\2\2\u15cf\u15d0")
        buf.write(u"\3\2\2\2\u15d0\u15d1\7\u0135\2\2\u15d1\u163c\3\2\2\2")
        buf.write(u"\u15d2\u15d3\7\u00bb\2\2\u15d3\u15d4\7\u03b3\2\2\u15d4")
        buf.write(u"\u15d7\5\u0248\u0125\2\u15d5\u15d6\7\u00a2\2\2\u15d6")
        buf.write(u"\u15d8\5\u01f2\u00fa\2\u15d7\u15d5\3\2\2\2\u15d7\u15d8")
        buf.write(u"\3\2\2\2\u15d8\u15d9\3\2\2\2\u15d9\u15da\7\u03b4\2\2")
        buf.write(u"\u15da\u163c\3\2\2\2\u15db\u15dc\7\u00ee\2\2\u15dc\u15df")
        buf.write(u"\7\u03b3\2\2\u15dd\u15e0\5\u020a\u0106\2\u15de\u15e0")
        buf.write(u"\5\u024c\u0127\2\u15df\u15dd\3\2\2\2\u15df\u15de\3\2")
        buf.write(u"\2\2\u15e0\u15e1\3\2\2\2\u15e1\u15e4\7D\2\2\u15e2\u15e5")
        buf.write(u"\5\u020a\u0106\2\u15e3\u15e5\5\u024c\u0127\2\u15e4\u15e2")
        buf.write(u"\3\2\2\2\u15e4\u15e3\3\2\2\2\u15e5\u15e6\3\2\2\2\u15e6")
        buf.write(u"\u15e7\7\u03b4\2\2\u15e7\u163c\3\2\2\2\u15e8\u15e9\t")
        buf.write(u"`\2\2\u15e9\u15ec\7\u03b3\2\2\u15ea\u15ed\5\u020a\u0106")
        buf.write(u"\2\u15eb\u15ed\5\u024c\u0127\2\u15ec\u15ea\3\2\2\2\u15ec")
        buf.write(u"\u15eb\3\2\2\2\u15ed\u15ee\3\2\2\2\u15ee\u15f1\7<\2\2")
        buf.write(u"\u15ef\u15f2\5\u0206\u0104\2\u15f0\u15f2\5\u024c\u0127")
        buf.write(u"\2\u15f1\u15ef\3\2\2\2\u15f1\u15f0\3\2\2\2\u15f2\u15f8")
        buf.write(u"\3\2\2\2\u15f3\u15f6\79\2\2\u15f4\u15f7\5\u0206\u0104")
        buf.write(u"\2\u15f5\u15f7\5\u024c\u0127\2\u15f6\u15f4\3\2\2\2\u15f6")
        buf.write(u"\u15f5\3\2\2\2\u15f7\u15f9\3\2\2\2\u15f8\u15f3\3\2\2")
        buf.write(u"\2\u15f8\u15f9\3\2\2\2\u15f9\u15fa\3\2\2\2\u15fa\u15fb")
        buf.write(u"\7\u03b4\2\2\u15fb\u163c\3\2\2\2\u15fc\u15fd\7\u00f2")
        buf.write(u"\2\2\u15fd\u15fe\7\u03b3\2\2\u15fe\u1601\ta\2\2\u15ff")
        buf.write(u"\u1602\5\u020a\u0106\2\u1600\u1602\5\u024c\u0127\2\u1601")
        buf.write(u"\u15ff\3\2\2\2\u1601\u1600\3\2\2\2\u1601\u1602\3\2\2")
        buf.write(u"\2\u1602\u1603\3\2\2\2\u1603\u1606\7<\2\2\u1604\u1607")
        buf.write(u"\5\u020a\u0106\2\u1605\u1607\5\u024c\u0127\2\u1606\u1604")
        buf.write(u"\3\2\2\2\u1606\u1605\3\2\2\2\u1607\u1608\3\2\2\2\u1608")
        buf.write(u"\u1609\7\u03b4\2\2\u1609\u163c\3\2\2\2\u160a\u160b\7")
        buf.write(u"\u00f2\2\2\u160b\u160e\7\u03b3\2\2\u160c\u160f\5\u020a")
        buf.write(u"\u0106\2\u160d\u160f\5\u024c\u0127\2\u160e\u160c\3\2")
        buf.write(u"\2\2\u160e\u160d\3\2\2\2\u160f\u1610\3\2\2\2\u1610\u1613")
        buf.write(u"\7<\2\2\u1611\u1614\5\u020a\u0106\2\u1612\u1614\5\u024c")
        buf.write(u"\u0127\2\u1613\u1611\3\2\2\2\u1613\u1612\3\2\2\2\u1614")
        buf.write(u"\u1615\3\2\2\2\u1615\u1616\7\u03b4\2\2\u1616\u163c\3")
        buf.write(u"\2\2\2\u1617\u1618\7\u0394\2\2\u1618\u161b\7\u03b3\2")
        buf.write(u"\2\u1619\u161c\5\u020a\u0106\2\u161a\u161c\5\u024c\u0127")
        buf.write(u"\2\u161b\u1619\3\2\2\2\u161b\u161a\3\2\2\2\u161c\u1623")
        buf.write(u"\3\2\2\2\u161d\u161e\7\f\2\2\u161e\u161f\tb\2\2\u161f")
        buf.write(u"\u1620\7\u03b3\2\2\u1620\u1621\5\u0206\u0104\2\u1621")
        buf.write(u"\u1622\7\u03b4\2\2\u1622\u1624\3\2\2\2\u1623\u161d\3")
        buf.write(u"\2\2\2\u1623\u1624\3\2\2\2\u1624\u1626\3\2\2\2\u1625")
        buf.write(u"\u1627\5\u023e\u0120\2\u1626\u1625\3\2\2\2\u1626\u1627")
        buf.write(u"\3\2\2\2\u1627\u1628\3\2\2\2\u1628\u1629\7\u03b4\2\2")
        buf.write(u"\u1629\u163c\3\2\2\2\u162a\u162b\7\u00eb\2\2\u162b\u162c")
        buf.write(u"\7\u03b3\2\2\u162c\u162d\5<\37\2\u162d\u1630\7<\2\2\u162e")
        buf.write(u"\u1631\5\u020a\u0106\2\u162f\u1631\5\u024c\u0127\2\u1630")
        buf.write(u"\u162e\3\2\2\2\u1630\u162f\3\2\2\2\u1631\u1632\3\2\2")
        buf.write(u"\2\u1632\u1633\7\u03b4\2\2\u1633\u163c\3\2\2\2\u1634")
        buf.write(u"\u1635\7\u02cd\2\2\u1635\u1636\7\u03b3\2\2\u1636\u1637")
        buf.write(u"\t\\\2\2\u1637\u1638\7\u03b5\2\2\u1638\u1639\5\u020a")
        buf.write(u"\u0106\2\u1639\u163a\7\u03b4\2\2\u163a\u163c\3\2\2\2")
        buf.write(u"\u163b\u159e\3\2\2\2\u163b\u159f\3\2\2\2\u163b\u15a6")
        buf.write(u"\3\2\2\2\u163b\u15ad\3\2\2\2\u163b\u15b4\3\2\2\2\u163b")
        buf.write(u"\u15b9\3\2\2\2\u163b\u15c6\3\2\2\2\u163b\u15d2\3\2\2")
        buf.write(u"\2\u163b\u15db\3\2\2\2\u163b\u15e8\3\2\2\2\u163b\u15fc")
        buf.write(u"\3\2\2\2\u163b\u160a\3\2\2\2\u163b\u1617\3\2\2\2\u163b")
        buf.write(u"\u162a\3\2\2\2\u163b\u1634\3\2\2\2\u163c\u023b\3\2\2")
        buf.write(u"\2\u163d\u163e\7\u00a4\2\2\u163e\u163f\5\u024a\u0126")
        buf.write(u"\2\u163f\u1640\7\u0095\2\2\u1640\u1641\5\u024a\u0126")
        buf.write(u"\2\u1641\u023d\3\2\2\2\u1642\u1643\7\u0170\2\2\u1643")
        buf.write(u"\u1648\5\u0240\u0121\2\u1644\u1645\7\u03b5\2\2\u1645")
        buf.write(u"\u1647\5\u0240\u0121\2\u1646\u1644\3\2\2\2\u1647\u164a")
        buf.write(u"\3\2\2\2\u1648\u1646\3\2\2\2\u1648\u1649\3\2\2\2\u1649")
        buf.write(u"\u1651\3\2\2\2\u164a\u1648\3\2\2\2\u164b\u164c\7\u0170")
        buf.write(u"\2\2\u164c\u164d\5\u0206\u0104\2\u164d\u164e\7\u03a7")
        buf.write(u"\2\2\u164e\u164f\5\u0206\u0104\2\u164f\u1651\3\2\2\2")
        buf.write(u"\u1650\u1642\3\2\2\2\u1650\u164b\3\2\2\2\u1651\u023f")
        buf.write(u"\3\2\2\2\u1652\u1654\5\u0206\u0104\2\u1653\u1655\tc\2")
        buf.write(u"\2\u1654\u1653\3\2\2\2\u1654\u1655\3\2\2\2\u1655\u0241")
        buf.write(u"\3\2\2\2\u1656\u1657\td\2\2\u1657\u1659\7\u03b3\2\2\u1658")
        buf.write(u"\u165a\t$\2\2\u1659\u1658\3\2\2\2\u1659\u165a\3\2\2\2")
        buf.write(u"\u165a\u165b\3\2\2\2\u165b\u165c\5\u024a\u0126\2\u165c")
        buf.write(u"\u165d\7\u03b4\2\2\u165d\u168f\3\2\2\2\u165e\u165f\7")
        buf.write(u"\u00d7\2\2\u165f\u1665\7\u03b3\2\2\u1660\u1666\7\u03a2")
        buf.write(u"\2\2\u1661\u1663\7\b\2\2\u1662\u1661\3\2\2\2\u1662\u1663")
        buf.write(u"\3\2\2\2\u1663\u1664\3\2\2\2\u1664\u1666\5\u024a\u0126")
        buf.write(u"\2\u1665\u1660\3\2\2\2\u1665\u1662\3\2\2\2\u1666\u1667")
        buf.write(u"\3\2\2\2\u1667\u168f\7\u03b4\2\2\u1668\u1669\7\u00d7")
        buf.write(u"\2\2\u1669\u166a\7\u03b3\2\2\u166a\u166b\7,\2\2\u166b")
        buf.write(u"\u166c\5\u0248\u0125\2\u166c\u166d\7\u03b4\2\2\u166d")
        buf.write(u"\u168f\3\2\2\2\u166e\u166f\te\2\2\u166f\u1671\7\u03b3")
        buf.write(u"\2\2\u1670\u1672\7\b\2\2\u1671\u1670\3\2\2\2\u1671\u1672")
        buf.write(u"\3\2\2\2\u1672\u1673\3\2\2\2\u1673\u1674\5\u024a\u0126")
        buf.write(u"\2\u1674\u1675\7\u03b4\2\2\u1675\u168f\3\2\2\2\u1676")
        buf.write(u"\u1677\7\u00d8\2\2\u1677\u1679\7\u03b3\2\2\u1678\u167a")
        buf.write(u"\7,\2\2\u1679\u1678\3\2\2\2\u1679\u167a\3\2\2\2\u167a")
        buf.write(u"\u167b\3\2\2\2\u167b\u1686\5\u0248\u0125\2\u167c\u167d")
        buf.write(u"\7k\2\2\u167d\u167e\7\21\2\2\u167e\u1683\5\u00d2j\2\u167f")
        buf.write(u"\u1680\7\u03b5\2\2\u1680\u1682\5\u00d2j\2\u1681\u167f")
        buf.write(u"\3\2\2\2\u1682\u1685\3\2\2\2\u1683\u1681\3\2\2\2\u1683")
        buf.write(u"\u1684\3\2\2\2\u1684\u1687\3\2\2\2\u1685\u1683\3\2\2")
        buf.write(u"\2\u1686\u167c\3\2\2\2\u1686\u1687\3\2\2\2\u1687\u168a")
        buf.write(u"\3\2\2\2\u1688\u1689\7\u0086\2\2\u1689\u168b\7\u03c2")
        buf.write(u"\2\2\u168a\u1688\3\2\2\2\u168a\u168b\3\2\2\2\u168b\u168c")
        buf.write(u"\3\2\2\2\u168c\u168d\7\u03b4\2\2\u168d\u168f\3\2\2\2")
        buf.write(u"\u168e\u1656\3\2\2\2\u168e\u165e\3\2\2\2\u168e\u1668")
        buf.write(u"\3\2\2\2\u168e\u166e\3\2\2\2\u168e\u1676\3\2\2\2\u168f")
        buf.write(u"\u0243\3\2\2\2\u1690\u16a8\5\u0268\u0135\2\u1691\u16a8")
        buf.write(u"\7\u023a\2\2\u1692\u16a8\7\u00e7\2\2\u1693\u16a8\7\u00e3")
        buf.write(u"\2\2\u1694\u16a8\7\u00e4\2\2\u1695\u16a8\7\u00e5\2\2")
        buf.write(u"\u1696\u16a8\7\u00e8\2\2\u1697\u16a8\7\u00e9\2\2\u1698")
        buf.write(u"\u16a8\7\u00ea\2\2\u1699\u16a8\7B\2\2\u169a\u16a8\7I")
        buf.write(u"\2\2\u169b\u16a8\7\u00e6\2\2\u169c\u16a8\7\u00ec\2\2")
        buf.write(u"\u169d\u16a8\7\u0192\2\2\u169e\u16a8\7\u00ed\2\2\u169f")
        buf.write(u"\u16a8\7{\2\2\u16a0\u16a8\7\u00ef\2\2\u16a1\u16a8\7\u00f0")
        buf.write(u"\2\2\u16a2\u16a8\7\u00f1\2\2\u16a3\u16a8\7\u00f2\2\2")
        buf.write(u"\u16a4\u16a8\7\u00f3\2\2\u16a5\u16a8\7\u00f4\2\2\u16a6")
        buf.write(u"\u16a8\7\u00f5\2\2\u16a7\u1690\3\2\2\2\u16a7\u1691\3")
        buf.write(u"\2\2\2\u16a7\u1692\3\2\2\2\u16a7\u1693\3\2\2\2\u16a7")
        buf.write(u"\u1694\3\2\2\2\u16a7\u1695\3\2\2\2\u16a7\u1696\3\2\2")
        buf.write(u"\2\u16a7\u1697\3\2\2\2\u16a7\u1698\3\2\2\2\u16a7\u1699")
        buf.write(u"\3\2\2\2\u16a7\u169a\3\2\2\2\u16a7\u169b\3\2\2\2\u16a7")
        buf.write(u"\u169c\3\2\2\2\u16a7\u169d\3\2\2\2\u16a7\u169e\3\2\2")
        buf.write(u"\2\u16a7\u169f\3\2\2\2\u16a7\u16a0\3\2\2\2\u16a7\u16a1")
        buf.write(u"\3\2\2\2\u16a7\u16a2\3\2\2\2\u16a7\u16a3\3\2\2\2\u16a7")
        buf.write(u"\u16a4\3\2\2\2\u16a7\u16a5\3\2\2\2\u16a7\u16a6\3\2\2")
        buf.write(u"\2\u16a8\u0245\3\2\2\2\u16a9\u16aa\tf\2\2\u16aa\u16ab")
        buf.write(u"\7\u03b3\2\2\u16ab\u16ac\5\u024a\u0126\2\u16ac\u16ad")
        buf.write(u"\7\u03b4\2\2\u16ad\u0247\3\2\2\2\u16ae\u16b3\5\u0212")
        buf.write(u"\u010a\2\u16af\u16b3\5\u01ea\u00f6\2\u16b0\u16b3\5\u0238")
        buf.write(u"\u011d\2\u16b1\u16b3\5\u024c\u0127\2\u16b2\u16ae\3\2")
        buf.write(u"\2\2\u16b2\u16af\3\2\2\2\u16b2\u16b0\3\2\2\2\u16b2\u16b1")
        buf.write(u"\3\2\2\2\u16b3\u16bd\3\2\2\2\u16b4\u16b9\7\u03b5\2\2")
        buf.write(u"\u16b5\u16ba\5\u0212\u010a\2\u16b6\u16ba\5\u01ea\u00f6")
        buf.write(u"\2\u16b7\u16ba\5\u0238\u011d\2\u16b8\u16ba\5\u024c\u0127")
        buf.write(u"\2\u16b9\u16b5\3\2\2\2\u16b9\u16b6\3\2\2\2\u16b9\u16b7")
        buf.write(u"\3\2\2\2\u16b9\u16b8\3\2\2\2\u16ba\u16bc\3\2\2\2\u16bb")
        buf.write(u"\u16b4\3\2\2\2\u16bc\u16bf\3\2\2\2\u16bd\u16bb\3\2\2")
        buf.write(u"\2\u16bd\u16be\3\2\2\2\u16be\u0249\3\2\2\2\u16bf\u16bd")
        buf.write(u"\3\2\2\2\u16c0\u16c5\5\u0212\u010a\2\u16c1\u16c5\5\u01ea")
        buf.write(u"\u00f6\2\u16c2\u16c5\5\u0238\u011d\2\u16c3\u16c5\5\u024c")
        buf.write(u"\u0127\2\u16c4\u16c0\3\2\2\2\u16c4\u16c1\3\2\2\2\u16c4")
        buf.write(u"\u16c2\3\2\2\2\u16c4\u16c3\3\2\2\2\u16c5\u024b\3\2\2")
        buf.write(u"\2\u16c6\u16c7\b\u0127\1\2\u16c7\u16c8\tg\2\2\u16c8\u16d2")
        buf.write(u"\5\u024c\u0127\6\u16c9\u16ca\5\u024e\u0128\2\u16ca\u16cc")
        buf.write(u"\7L\2\2\u16cb\u16cd\7c\2\2\u16cc\u16cb\3\2\2\2\u16cc")
        buf.write(u"\u16cd\3\2\2\2\u16cd\u16ce\3\2\2\2\u16ce\u16cf\th\2\2")
        buf.write(u"\u16cf\u16d2\3\2\2\2\u16d0\u16d2\5\u024e\u0128\2\u16d1")
        buf.write(u"\u16c6\3\2\2\2\u16d1\u16c9\3\2\2\2\u16d1\u16d0\3\2\2")
        buf.write(u"\2\u16d2\u16d9\3\2\2\2\u16d3\u16d4\f\5\2\2\u16d4\u16d5")
        buf.write(u"\5\u0256\u012c\2\u16d5\u16d6\5\u024c\u0127\6\u16d6\u16d8")
        buf.write(u"\3\2\2\2\u16d7\u16d3\3\2\2\2\u16d8\u16db\3\2\2\2\u16d9")
        buf.write(u"\u16d7\3\2\2\2\u16d9\u16da\3\2\2\2\u16da\u024d\3\2\2")
        buf.write(u"\2\u16db\u16d9\3\2\2\2\u16dc\u16df\b\u0128\1\2\u16dd")
        buf.write(u"\u16de\7\u03cd\2\2\u16de\u16e0\7\u0399\2\2\u16df\u16dd")
        buf.write(u"\3\2\2\2\u16df\u16e0\3\2\2\2\u16e0\u16e1\3\2\2\2\u16e1")
        buf.write(u"\u16e2\5\u0250\u0129\2\u16e2\u171c\3\2\2\2\u16e3\u16e4")
        buf.write(u"\f\t\2\2\u16e4\u16e5\5\u0254\u012b\2\u16e5\u16e6\5\u024e")
        buf.write(u"\u0128\n\u16e6\u171b\3\2\2\2\u16e7\u16e9\f\7\2\2\u16e8")
        buf.write(u"\u16ea\7c\2\2\u16e9\u16e8\3\2\2\2\u16e9\u16ea\3\2\2\2")
        buf.write(u"\u16ea\u16eb\3\2\2\2\u16eb\u16ec\7\17\2\2\u16ec\u16ed")
        buf.write(u"\5\u024e\u0128\2\u16ed\u16ee\7\13\2\2\u16ee\u16ef\5\u024e")
        buf.write(u"\u0128\b\u16ef\u171b\3\2\2\2\u16f0\u16f1\f\6\2\2\u16f1")
        buf.write(u"\u16f2\7\u01ed\2\2\u16f2\u16f3\7U\2\2\u16f3\u171b\5\u024e")
        buf.write(u"\u0128\7\u16f4\u16f6\f\4\2\2\u16f5\u16f7\7c\2\2\u16f6")
        buf.write(u"\u16f5\3\2\2\2\u16f6\u16f7\3\2\2\2\u16f7\u16f8\3\2\2")
        buf.write(u"\2\u16f8\u16f9\ti\2\2\u16f9\u171b\5\u024e\u0128\5\u16fa")
        buf.write(u"\u16fc\f\13\2\2\u16fb\u16fd\7c\2\2\u16fc\u16fb\3\2\2")
        buf.write(u"\2\u16fc\u16fd\3\2\2\2\u16fd\u16fe\3\2\2\2\u16fe\u16ff")
        buf.write(u"\7D\2\2\u16ff\u1702\7\u03b3\2\2\u1700\u1703\5\u00b4[")
        buf.write(u"\2\u1701\u1703\5\u0224\u0113\2\u1702\u1700\3\2\2\2\u1702")
        buf.write(u"\u1701\3\2\2\2\u1703\u1704\3\2\2\2\u1704\u1705\7\u03b4")
        buf.write(u"\2\2\u1705\u171b\3\2\2\2\u1706\u1707\f\n\2\2\u1707\u1708")
        buf.write(u"\7L\2\2\u1708\u171b\5\u0210\u0109\2\u1709\u170a\f\b\2")
        buf.write(u"\2\u170a\u170b\5\u0254\u012b\2\u170b\u170c\tj\2\2\u170c")
        buf.write(u"\u170d\7\u03b3\2\2\u170d\u170e\5\u00b4[\2\u170e\u170f")
        buf.write(u"\7\u03b4\2\2\u170f\u171b\3\2\2\2\u1710\u1712\f\5\2\2")
        buf.write(u"\u1711\u1713\7c\2\2\u1712\u1711\3\2\2\2\u1712\u1713\3")
        buf.write(u"\2\2\2\u1713\u1714\3\2\2\2\u1714\u1715\7U\2\2\u1715\u1718")
        buf.write(u"\5\u024e\u0128\2\u1716\u1717\7\u013b\2\2\u1717\u1719")
        buf.write(u"\7\u03c2\2\2\u1718\u1716\3\2\2\2\u1718\u1719\3\2\2\2")
        buf.write(u"\u1719\u171b\3\2\2\2\u171a\u16e3\3\2\2\2\u171a\u16e7")
        buf.write(u"\3\2\2\2\u171a\u16f0\3\2\2\2\u171a\u16f4\3\2\2\2\u171a")
        buf.write(u"\u16fa\3\2\2\2\u171a\u1706\3\2\2\2\u171a\u1709\3\2\2")
        buf.write(u"\2\u171a\u1710\3\2\2\2\u171b\u171e\3\2\2\2\u171c\u171a")
        buf.write(u"\3\2\2\2\u171c\u171d\3\2\2\2\u171d\u024f\3\2\2\2\u171e")
        buf.write(u"\u171c\3\2\2\2\u171f\u1720\b\u0129\1\2\u1720\u174d\5")
        buf.write(u"\u0212\u010a\2\u1721\u174d\5\u01ea\u00f6\2\u1722\u174d")
        buf.write(u"\5\u0238\u011d\2\u1723\u174d\5\u01f0\u00f9\2\u1724\u1725")
        buf.write(u"\5\u0252\u012a\2\u1725\u1726\5\u0250\u0129\13\u1726\u174d")
        buf.write(u"\3\2\2\2\u1727\u1728\7\u00bd\2\2\u1728\u174d\5\u0250")
        buf.write(u"\u0129\n\u1729\u172a\7\u03b3\2\2\u172a\u172f\5\u024c")
        buf.write(u"\u0127\2\u172b\u172c\7\u03b5\2\2\u172c\u172e\5\u024c")
        buf.write(u"\u0127\2\u172d\u172b\3\2\2\2\u172e\u1731\3\2\2\2\u172f")
        buf.write(u"\u172d\3\2\2\2\u172f\u1730\3\2\2\2\u1730\u1732\3\2\2")
        buf.write(u"\2\u1731\u172f\3\2\2\2\u1732\u1733\7\u03b4\2\2\u1733")
        buf.write(u"\u174d\3\2\2\2\u1734\u1735\7\u01db\2\2\u1735\u1736\7")
        buf.write(u"\u03b3\2\2\u1736\u1739\5\u024c\u0127\2\u1737\u1738\7")
        buf.write(u"\u03b5\2\2\u1738\u173a\5\u024c\u0127\2\u1739\u1737\3")
        buf.write(u"\2\2\2\u173a\u173b\3\2\2\2\u173b\u1739\3\2\2\2\u173b")
        buf.write(u"\u173c\3\2\2\2\u173c\u173d\3\2\2\2\u173d\u173e\7\u03b4")
        buf.write(u"\2\2\u173e\u174d\3\2\2\2\u173f\u1740\7\64\2\2\u1740\u1741")
        buf.write(u"\7\u03b3\2\2\u1741\u1742\5\u00b4[\2\u1742\u1743\7\u03b4")
        buf.write(u"\2\2\u1743\u174d\3\2\2\2\u1744\u1745\7\u03b3\2\2\u1745")
        buf.write(u"\u1746\5\u00b4[\2\u1746\u1747\7\u03b4\2\2\u1747\u174d")
        buf.write(u"\3\2\2\2\u1748\u1749\7J\2\2\u1749\u174a\5\u024c\u0127")
        buf.write(u"\2\u174a\u174b\5<\37\2\u174b\u174d\3\2\2\2\u174c\u171f")
        buf.write(u"\3\2\2\2\u174c\u1721\3\2\2\2\u174c\u1722\3\2\2\2\u174c")
        buf.write(u"\u1723\3\2\2\2\u174c\u1724\3\2\2\2\u174c\u1727\3\2\2")
        buf.write(u"\2\u174c\u1729\3\2\2\2\u174c\u1734\3\2\2\2\u174c\u173f")
        buf.write(u"\3\2\2\2\u174c\u1744\3\2\2\2\u174c\u1748\3\2\2\2\u174d")
        buf.write(u"\u175b\3\2\2\2\u174e\u174f\f\4\2\2\u174f\u1750\5\u0258")
        buf.write(u"\u012d\2\u1750\u1751\5\u0250\u0129\5\u1751\u175a\3\2")
        buf.write(u"\2\2\u1752\u1753\f\3\2\2\u1753\u1754\5\u025a\u012e\2")
        buf.write(u"\u1754\u1755\5\u0250\u0129\4\u1755\u175a\3\2\2\2\u1756")
        buf.write(u"\u1757\f\r\2\2\u1757\u1758\7\31\2\2\u1758\u175a\5\u01f4")
        buf.write(u"\u00fb\2\u1759\u174e\3\2\2\2\u1759\u1752\3\2\2\2\u1759")
        buf.write(u"\u1756\3\2\2\2\u175a\u175d\3\2\2\2\u175b\u1759\3\2\2")
        buf.write(u"\2\u175b\u175c\3\2\2\2\u175c\u0251\3\2\2\2\u175d\u175b")
        buf.write(u"\3\2\2\2\u175e\u175f\tk\2\2\u175f\u0253\3\2\2\2\u1760")
        buf.write(u"\u176f\7\u03aa\2\2\u1761\u176f\7\u03ab\2\2\u1762\u176f")
        buf.write(u"\7\u03ac\2\2\u1763\u1764\7\u03ac\2\2\u1764\u176f\7\u03aa")
        buf.write(u"\2\2\u1765\u1766\7\u03ab\2\2\u1766\u176f\7\u03aa\2\2")
        buf.write(u"\u1767\u1768\7\u03ac\2\2\u1768\u176f\7\u03ab\2\2\u1769")
        buf.write(u"\u176a\7\u03ad\2\2\u176a\u176f\7\u03aa\2\2\u176b\u176c")
        buf.write(u"\7\u03ac\2\2\u176c\u176d\7\u03aa\2\2\u176d\u176f\7\u03ab")
        buf.write(u"\2\2\u176e\u1760\3\2\2\2\u176e\u1761\3\2\2\2\u176e\u1762")
        buf.write(u"\3\2\2\2\u176e\u1763\3\2\2\2\u176e\u1765\3\2\2\2\u176e")
        buf.write(u"\u1767\3\2\2\2\u176e\u1769\3\2\2\2\u176e\u176b\3\2\2")
        buf.write(u"\2\u176f\u0255\3\2\2\2\u1770\u1778\7\13\2\2\u1771\u1772")
        buf.write(u"\7\u03b0\2\2\u1772\u1778\7\u03b0\2\2\u1773\u1778\7\u00a9")
        buf.write(u"\2\2\u1774\u1778\7j\2\2\u1775\u1776\7\u03af\2\2\u1776")
        buf.write(u"\u1778\7\u03af\2\2\u1777\u1770\3\2\2\2\u1777\u1771\3")
        buf.write(u"\2\2\2\u1777\u1773\3\2\2\2\u1777\u1774\3\2\2\2\u1777")
        buf.write(u"\u1775\3\2\2\2\u1778\u0257\3\2\2\2\u1779\u177a\7\u03ac")
        buf.write(u"\2\2\u177a\u1781\7\u03ac\2\2\u177b\u177c\7\u03ab\2\2")
        buf.write(u"\u177c\u1781\7\u03ab\2\2\u177d\u1781\7\u03b0\2\2\u177e")
        buf.write(u"\u1781\7\u03b1\2\2\u177f\u1781\7\u03af\2\2\u1780\u1779")
        buf.write(u"\3\2\2\2\u1780\u177b\3\2\2\2\u1780\u177d\3\2\2\2\u1780")
        buf.write(u"\u177e\3\2\2\2\u1780\u177f\3\2\2\2\u1781\u0259\3\2\2")
        buf.write(u"\2\u1782\u1783\tl\2\2\u1783\u025b\3\2\2\2\u1784\u1785")
        buf.write(u"\tm\2\2\u1785\u025d\3\2\2\2\u1786\u1787\tn\2\2\u1787")
        buf.write(u"\u025f\3\2\2\2\u1788\u1789\to\2\2\u1789\u0261\3\2\2\2")
        buf.write(u"\u178a\u178b\tp\2\2\u178b\u0263\3\2\2\2\u178c\u178d\t")
        buf.write(u"q\2\2\u178d\u0265\3\2\2\2\u178e\u178f\tr\2\2\u178f\u0267")
        buf.write(u"\3\2\2\2\u1790\u1791\ts\2\2\u1791\u0269\3\2\2\2\u0365")
        buf.write(u"\u026b\u026e\u0274\u0279\u027b\u0280\u0283\u0286\u028f")
        buf.write(u"\u02b6\u02c2\u02cd\u02de\u02e3\u02ef\u030a\u0310\u0315")
        buf.write(u"\u031b\u0320\u0324\u032d\u0330\u0333\u0337\u033e\u0341")
        buf.write(u"\u0346\u034e\u0353\u0358\u035b\u0366\u0369\u036d\u0370")
        buf.write(u"\u0374\u0377\u037b\u037e\u0381\u0385\u0388\u038c\u0392")
        buf.write(u"\u0398\u039e\u03a5\u03ac\u03b2\u03b8\u03c1\u03d4\u03db")
        buf.write(u"\u03df\u03e9\u03ed\u03f1\u03f5\u03f9\u03fe\u0401\u0404")
        buf.write(u"\u0407\u040a\u0410\u0414\u041a\u041f\u0422\u0425\u0427")
        buf.write(u"\u0432\u0436\u0439\u0447\u044a\u044e\u0451\u0455\u0458")
        buf.write(u"\u045c\u045f\u0463\u0466\u0469\u046d\u0470\u0474\u047a")
        buf.write(u"\u0487\u048e\u0493\u0496\u049b\u04a3\u04a9\u04ad\u04b0")
        buf.write(u"\u04b5\u04b8\u04bc\u04c0\u04c3\u04cb\u04cd\u04d4\u04da")
        buf.write(u"\u04e2\u04e5\u04ec\u04ef\u04f1\u04f7\u04fd\u050e\u0515")
        buf.write(u"\u051c\u0525\u0533\u0540\u0545\u0555\u055d\u0567\u056d")
        buf.write(u"\u0575\u057a\u0583\u0587\u0589\u058e\u0594\u0599\u059b")
        buf.write(u"\u059f\u05a2\u05a5\u05ab\u05b0\u05b2\u05b7\u05be\u05c0")
        buf.write(u"\u05c7\u05ce\u05d1\u05d9\u05e1\u05e3\u05eb\u05ef\u05f2")
        buf.write(u"\u05f8\u05fd\u0600\u0606\u0609\u060d\u0612\u0617\u061b")
        buf.write(u"\u0620\u0623\u0628\u062c\u0630\u0635\u063a\u063f\u0645")
        buf.write(u"\u064a\u064f\u0655\u065a\u065f\u0664\u0669\u066e\u0673")
        buf.write(u"\u0678\u067d\u0682\u0687\u068d\u0691\u0697\u06a1\u06a8")
        buf.write(u"\u06aa\u06b2\u06b7\u06ba\u06c2\u06c8\u06d8\u06e4\u06e6")
        buf.write(u"\u06e9\u06f1\u06f7\u06fd\u070a\u0711\u0719\u071c\u0728")
        buf.write(u"\u072f\u0737\u073a\u0746\u074d\u0755\u0758\u075f\u0767")
        buf.write(u"\u076a\u076c\u0771\u0779\u0782\u0786\u078a\u078f\u0795")
        buf.write(u"\u079b\u07a0\u07a5\u07aa\u07af\u07b2\u07b7\u07bc\u07c6")
        buf.write(u"\u07ca\u07d1\u07d6\u07d9\u07de\u07e1\u07e5\u07e9\u07f1")
        buf.write(u"\u0804\u0807\u080a\u080e\u0818\u0825\u082c\u082f\u0838")
        buf.write(u"\u083c\u0847\u084a\u084e\u0856\u0859\u085e\u0866\u086c")
        buf.write(u"\u0870\u0875\u087c\u0880\u088b\u0893\u0896\u089c\u08a2")
        buf.write(u"\u08a4\u08a9\u08af\u08b5\u08b7\u08bb\u08be\u08c1\u08c7")
        buf.write(u"\u08cd\u08d0\u08d6\u08dc\u08de\u08e3\u08eb\u08ed\u08f6")
        buf.write(u"\u08fb\u0903\u0907\u090f\u0919\u091e\u0925\u0929\u093c")
        buf.write(u"\u0940\u094c\u094f\u0958\u096e\u0975\u097c\u098b\u0998")
        buf.write(u"\u099e\u09a4\u09aa\u09b0\u09b6\u09bc\u09c1\u09c8\u09cf")
        buf.write(u"\u09d6\u09d9\u09dd\u09e0\u09ed\u09f4\u09fb\u0a01\u0a05")
        buf.write(u"\u0a09\u0a10\u0a13\u0a18\u0a1f\u0a26\u0a2a\u0a33\u0a3c")
        buf.write(u"\u0a45\u0a48\u0a4c\u0a55\u0a59\u0a5c\u0a5f\u0a67\u0a6d")
        buf.write(u"\u0a76\u0a79\u0a84\u0a87\u0a8c\u0a8f\u0a94\u0a9e\u0aa3")
        buf.write(u"\u0aa9\u0aab\u0ab1\u0ab3\u0ab9\u0ac1\u0ac6\u0ace\u0ad1")
        buf.write(u"\u0ad6\u0ad9\u0ade\u0ae6\u0aee\u0af4\u0afc\u0b01\u0b09")
        buf.write(u"\u0b0c\u0b10\u0b13\u0b1b\u0b21\u0b2a\u0b2d\u0b31\u0b35")
        buf.write(u"\u0b3b\u0b3f\u0b43\u0b45\u0b48\u0b4b\u0b4e\u0b54\u0b58")
        buf.write(u"\u0b5b\u0b5e\u0b61\u0b64\u0b66\u0b6a\u0b78\u0b7b\u0b81")
        buf.write(u"\u0b85\u0b8d\u0b91\u0b94\u0b97\u0ba0\u0ba4\u0ba7\u0bab")
        buf.write(u"\u0baf\u0bb2\u0bb5\u0bba\u0bc0\u0bc4\u0bce\u0bd4\u0bd8")
        buf.write(u"\u0bde\u0be2\u0be8\u0beb\u0bf7\u0bfb\u0bff\u0c07\u0c0b")
        buf.write(u"\u0c13\u0c16\u0c1a\u0c1d\u0c25\u0c2a\u0c2d\u0c30\u0c34")
        buf.write(u"\u0c37\u0c40\u0c45\u0c4e\u0c53\u0c5a\u0c61\u0c69\u0c6e")
        buf.write(u"\u0c76\u0c79\u0c7c\u0c83\u0c86\u0c8d\u0c90\u0c98\u0c9e")
        buf.write(u"\u0ca9\u0cac\u0cb7\u0cbd\u0cc1\u0ccc\u0cd1\u0cd3\u0cd7")
        buf.write(u"\u0ce1\u0ceb\u0cf1\u0cf6\u0cf9\u0cfc\u0cff\u0d05\u0d0a")
        buf.write(u"\u0d0d\u0d10\u0d13\u0d15\u0d1b\u0d20\u0d23\u0d26\u0d2a")
        buf.write(u"\u0d30\u0d34\u0d3e\u0d42\u0d48\u0d51\u0d54\u0d58\u0d5b")
        buf.write(u"\u0d5f\u0d63\u0d66\u0d68\u0d70\u0d7c\u0d82\u0d84\u0d8a")
        buf.write(u"\u0d8c\u0d8e\u0d94\u0d9c\u0da4\u0daa\u0db3\u0db8\u0dba")
        buf.write(u"\u0dbe\u0dc2\u0dc8\u0dcf\u0dd8\u0ddb\u0ddf\u0de3\u0de7")
        buf.write(u"\u0dea\u0ded\u0df0\u0df4\u0df8\u0dfb\u0dfe\u0e01\u0e08")
        buf.write(u"\u0e0c\u0e1b\u0e28\u0e30\u0e3a\u0e3e\u0e41\u0e47\u0e4a")
        buf.write(u"\u0e4d\u0e56\u0e5f\u0e69\u0e6d\u0e77\u0e81\u0e89\u0e8c")
        buf.write(u"\u0e95\u0e98\u0e9c\u0ea1\u0ea5\u0eae\u0eb1\u0ed0\u0ed3")
        buf.write(u"\u0ed6\u0f0e\u0f13\u0f2f\u0f3d\u0f44\u0f48\u0f4e\u0f56")
        buf.write(u"\u0f58\u0f63\u0f6d\u0f74\u0f7a\u0f82\u0f87\u0f8f\u0f97")
        buf.write(u"\u0f9f\u0fa7\u0fad\u0faf\u0fb3\u0fb8\u0fbd\u0fc3\u0fc5")
        buf.write(u"\u0fd0\u0fd5\u0fdc\u0fde\u0fec\u0ff2\u0ff7\u0ffc\u1002")
        buf.write(u"\u1009\u1011\u1019\u101e\u1024\u1027\u102f\u1036\u103f")
        buf.write(u"\u1042\u1053\u105b\u1063\u1067\u106e\u1074\u107c\u1085")
        buf.write(u"\u108b\u1092\u1099\u109e\u10a1\u10a3\u10a9\u10ab\u10af")
        buf.write(u"\u10b1\u10b4\u10bd\u10c3\u10ca\u10d1\u10d6\u10d9\u10db")
        buf.write(u"\u10e1\u10e3\u10e7\u10e9\u10ec\u10f1\u10f8\u1101\u1106")
        buf.write(u"\u110f\u1116\u111b\u111e\u1120\u1126\u1128\u112b\u1137")
        buf.write(u"\u113d\u1146\u114f\u1154\u115d\u1163\u116e\u1171\u117d")
        buf.write(u"\u1184\u1189\u1198\u11a3\u11a6\u11b0\u11ba\u11c4\u11ce")
        buf.write(u"\u11d2\u11d6\u11df\u11fa\u1209\u1211\u121c\u1223\u1227")
        buf.write(u"\u122e\u1233\u1236\u1239\u1242\u1246\u1264\u126b\u126f")
        buf.write(u"\u1276\u1279\u127e\u1288\u128c\u1292\u1295\u129a\u129e")
        buf.write(u"\u12a5\u12a8\u12ae\u12c6\u12d3\u12d6\u12e0\u12e8\u12ec")
        buf.write(u"\u12f3\u12f6\u12ff\u1305\u130b\u1315\u1317\u131d\u1320")
        buf.write(u"\u1323\u132f\u1332\u1338\u133b\u1343\u134b\u1351\u1355")
        buf.write(u"\u1363\u136f\u1376\u1379\u1380\u1387\u138c\u1391\u139c")
        buf.write(u"\u13a7\u13ad\u13b2\u13bf\u13c1\u13c6\u13cb\u13cd\u13d4")
        buf.write(u"\u13db\u13de\u13e1\u13e7\u13eb\u13f1\u13f7\u1406\u140b")
        buf.write(u"\u1411\u1418\u141a\u1421\u1424\u142e\u1432\u1446\u144d")
        buf.write(u"\u144f\u1456\u1458\u145c\u1461\u146c\u1471\u1477\u147a")
        buf.write(u"\u147e\u1483\u1486\u148a\u148e\u1490\u1495\u149a\u14a7")
        buf.write(u"\u14aa\u14ae\u14b1\u14b6\u14ba\u14be\u14c1\u14c4\u14c8")
        buf.write(u"\u14cb\u14ce\u14d2\u14d5\u14d8\u14dd\u14e6\u14eb\u14f0")
        buf.write(u"\u14f4\u14f7\u14fb\u14ff\u1504\u1509\u150d\u150f\u151f")
        buf.write(u"\u1528\u1530\u1539\u1543\u154b\u1553\u155b\u1563\u156c")
        buf.write(u"\u156e\u1573\u1576\u157b\u157e\u1582\u1590\u1597\u159c")
        buf.write(u"\u15be\u15c2\u15ca\u15ce\u15d7\u15df\u15e4\u15ec\u15f1")
        buf.write(u"\u15f6\u15f8\u1601\u1606\u160e\u1613\u161b\u1623\u1626")
        buf.write(u"\u1630\u163b\u1648\u1650\u1654\u1659\u1662\u1665\u1671")
        buf.write(u"\u1679\u1683\u1686\u168a\u168e\u16a7\u16b2\u16b9\u16bd")
        buf.write(u"\u16c4\u16cc\u16d1\u16d9\u16df\u16e9\u16f6\u16fc\u1702")
        buf.write(u"\u1712\u1718\u171a\u171c\u172f\u173b\u174c\u1759\u175b")
        buf.write(u"\u176e\u1777\u1780")
        return buf.getvalue()


class MySqlParser ( Parser ):

    grammarFileName = "MySqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                     u"<INVALID>", u"'ADD'", u"'ALL'", u"'ALTER'", u"'ANALYZE'", 
                     u"'AND'", u"'AS'", u"'ASC'", u"'BEFORE'", u"'BETWEEN'", 
                     u"'BOTH'", u"'BY'", u"'CALL'", u"'CASCADE'", u"'CASE'", 
                     u"'CAST'", u"'CHANGE'", u"'CHARACTER'", u"'CHECK'", 
                     u"'COLLATE'", u"'COLUMN'", u"'CONDITION'", u"'CONSTRAINT'", 
                     u"'CONTINUE'", u"'CONVERT'", u"'CREATE'", u"'CROSS'", 
                     u"'CURRENT_USER'", u"'CURSOR'", u"'DATABASE'", u"'DATABASES'", 
                     u"'DECLARE'", u"'DEFAULT'", u"'DELAYED'", u"'DELETE'", 
                     u"'DESC'", u"'DESCRIBE'", u"'DETERMINISTIC'", u"'DISTINCT'", 
                     u"'DISTINCTROW'", u"'DROP'", u"'EACH'", u"'ELSE'", 
                     u"'ELSEIF'", u"'ENCLOSED'", u"'ESCAPED'", u"'EXISTS'", 
                     u"'EXIT'", u"'EXPLAIN'", u"'FALSE'", u"'FETCH'", u"'FOR'", 
                     u"'FORCE'", u"'FOREIGN'", u"'FROM'", u"'FULLTEXT'", 
                     u"'GRANT'", u"'GROUP'", u"'HAVING'", u"'HIGH_PRIORITY'", 
                     u"'IF'", u"'IGNORE'", u"'IN'", u"'INDEX'", u"'INFILE'", 
                     u"'INNER'", u"'INOUT'", u"'INSERT'", u"'INTERVAL'", 
                     u"'INTO'", u"'IS'", u"'ITERATE'", u"'JOIN'", u"'KEY'", 
                     u"'KEYS'", u"'KILL'", u"'LEADING'", u"'LEAVE'", u"'LEFT'", 
                     u"'LIKE'", u"'LIMIT'", u"'LINEAR'", u"'LINES'", u"'LOAD'", 
                     u"'LOCK'", u"'LOOP'", u"'LOW_PRIORITY'", u"'MASTER_BIND'", 
                     u"'MASTER_SSL_VERIFY_SERVER_CERT'", u"'MATCH'", u"'MAXVALUE'", 
                     u"'MODIFIES'", u"'NATURAL'", u"'NOT'", u"'NO_WRITE_TO_BINLOG'", 
                     u"'NULL'", u"'ON'", u"'OPTIMIZE'", u"'OPTION'", u"'OPTIONALLY'", 
                     u"'OR'", u"'ORDER'", u"'OUT'", u"'OUTER'", u"'OUTFILE'", 
                     u"'PARTITION'", u"'PRIMARY'", u"'PROCEDURE'", u"'PURGE'", 
                     u"'RANGE'", u"'READ'", u"'READS'", u"'REFERENCES'", 
                     u"'REGEXP'", u"'RELEASE'", u"'RENAME'", u"'REPEAT'", 
                     u"'REPLACE'", u"'REQUIRE'", u"'RESTRICT'", u"'RETURN'", 
                     u"'REVOKE'", u"'RIGHT'", u"'RLIKE'", u"'SCHEMA'", u"'SCHEMAS'", 
                     u"'SELECT'", u"'SET'", u"'SEPARATOR'", u"'SHOW'", u"'SPATIAL'", 
                     u"'SQL'", u"'SQLEXCEPTION'", u"'SQLSTATE'", u"'SQLWARNING'", 
                     u"'SQL_BIG_RESULT'", u"'SQL_CALC_FOUND_ROWS'", u"'SQL_SMALL_RESULT'", 
                     u"'SSL'", u"'STARTING'", u"'STRAIGHT_JOIN'", u"'TABLE'", 
                     u"'TERMINATED'", u"'THEN'", u"'TO'", u"'TRAILING'", 
                     u"'TRIGGER'", u"'TRUE'", u"'UNDO'", u"'UNION'", u"'UNIQUE'", 
                     u"'UNLOCK'", u"'UNSIGNED'", u"'UPDATE'", u"'USAGE'", 
                     u"'USE'", u"'USING'", u"'VALUES'", u"'WHEN'", u"'WHERE'", 
                     u"'WHILE'", u"'WITH'", u"'WRITE'", u"'XOR'", u"'ZEROFILL'", 
                     u"'TINYINT'", u"'SMALLINT'", u"'MEDIUMINT'", u"'INT'", 
                     u"'INTEGER'", u"'BIGINT'", u"'REAL'", u"'DOUBLE'", 
                     u"'FLOAT'", u"'DECIMAL'", u"'NUMERIC'", u"'DATE'", 
                     u"'TIME'", u"'TIMESTAMP'", u"'DATETIME'", u"'YEAR'", 
                     u"'CHAR'", u"'VARCHAR'", u"'BINARY'", u"'VARBINARY'", 
                     u"'TINYBLOB'", u"'BLOB'", u"'MEDIUMBLOB'", u"'LONGBLOB'", 
                     u"'TINYTEXT'", u"'TEXT'", u"'MEDIUMTEXT'", u"'LONGTEXT'", 
                     u"'ENUM'", u"'YEAR_MONTH'", u"'DAY_HOUR'", u"'DAY_MINUTE'", 
                     u"'DAY_SECOND'", u"'HOUR_MINUTE'", u"'HOUR_SECOND'", 
                     u"'MINUTE_SECOND'", u"'SECOND_MICROSECOND'", u"'MINUTE_MICROSECOND'", 
                     u"'HOUR_MICROSECOND'", u"'DAY_MICROSECOND'", u"'AVG'", 
                     u"'BIT_AND'", u"'BIT_OR'", u"'BIT_XOR'", u"'COUNT'", 
                     u"'GROUP_CONCAT'", u"'MAX'", u"'MIN'", u"'STD'", u"'STDDEV'", 
                     u"'STDDEV_POP'", u"'STDDEV_SAMP'", u"'SUM'", u"'VAR_POP'", 
                     u"'VAR_SAMP'", u"'VARIANCE'", u"'CURRENT_DATE'", u"'CURRENT_TIME'", 
                     u"'CURRENT_TIMESTAMP'", u"'LOCALTIME'", u"'CURDATE'", 
                     u"'CURTIME'", u"'DATE_ADD'", u"'DATE_SUB'", u"'EXTRACT'", 
                     u"'LOCALTIMESTAMP'", u"'NOW'", u"'POSITION'", u"'SUBSTR'", 
                     u"'SUBSTRING'", u"'SYSDATE'", u"'TRIM'", u"'UTC_DATE'", 
                     u"'UTC_TIME'", u"'UTC_TIMESTAMP'", u"'ACCOUNT'", u"'ACTION'", 
                     u"'AFTER'", u"'AGGREGATE'", u"'ALGORITHM'", u"'ANY'", 
                     u"'AT'", u"'AUTHORS'", u"'AUTOCOMMIT'", u"'AUTOEXTEND_SIZE'", 
                     u"'AUTO_INCREMENT'", u"'AVG_ROW_LENGTH'", u"'BEGIN'", 
                     u"'BINLOG'", u"'BIT'", u"'BLOCK'", u"'BOOL'", u"'BOOLEAN'", 
                     u"'BTREE'", u"'CACHE'", u"'CASCADED'", u"'CHAIN'", 
                     u"'CHANGED'", u"'CHANNEL'", u"'CHECKSUM'", u"'CIPHER'", 
                     u"'CLIENT'", u"'CLOSE'", u"'COALESCE'", u"'CODE'", 
                     u"'COLUMNS'", u"'COLUMN_FORMAT'", u"'COMMENT'", u"'COMMIT'", 
                     u"'COMPACT'", u"'COMPLETION'", u"'COMPRESSED'", u"'COMPRESSION'", 
                     u"'CONCURRENT'", u"'CONNECTION'", u"'CONSISTENT'", 
                     u"'CONTAINS'", u"'CONTEXT'", u"'CONTRIBUTORS'", u"'COPY'", 
                     u"'CPU'", u"'DATA'", u"'DATAFILE'", u"'DEALLOCATE'", 
                     u"'DEFAULT_AUTH'", u"'DEFINER'", u"'DELAY_KEY_WRITE'", 
                     u"'DES_KEY_FILE'", u"'DIRECTORY'", u"'DISABLE'", u"'DISCARD'", 
                     u"'DISK'", u"'DO'", u"'DUMPFILE'", u"'DUPLICATE'", 
                     u"'DYNAMIC'", u"'ENABLE'", u"'ENCRYPTION'", u"'END'", 
                     u"'ENDS'", u"'ENGINE'", u"'ENGINES'", u"'ERROR'", u"'ERRORS'", 
                     u"'ESCAPE'", u"'EVEN'", u"'EVENT'", u"'EVENTS'", u"'EVERY'", 
                     u"'EXCHANGE'", u"'EXCLUSIVE'", u"'EXPIRE'", u"'EXPORT'", 
                     u"'EXTENDED'", u"'EXTENT_SIZE'", u"'FAST'", u"'FAULTS'", 
                     u"'FIELDS'", u"'FILE_BLOCK_SIZE'", u"'FILTER'", u"'FIRST'", 
                     u"'FIXED'", u"'FLUSH'", u"'FOLLOWS'", u"'FOUND'", u"'FULL'", 
                     u"'FUNCTION'", u"'GENERAL'", u"'GLOBAL'", u"'GRANTS'", 
                     u"'GROUP_REPLICATION'", u"'HANDLER'", u"'HASH'", u"'HELP'", 
                     u"'HOST'", u"'HOSTS'", u"'IDENTIFIED'", u"'IGNORE_SERVER_IDS'", 
                     u"'IMPORT'", u"'INDEXES'", u"'INITIAL_SIZE'", u"'INPLACE'", 
                     u"'INSERT_METHOD'", u"'INSTALL'", u"'INSTANCE'", u"'INVOKER'", 
                     u"'IO'", u"'IO_THREAD'", u"'IPC'", u"'ISOLATION'", 
                     u"'ISSUER'", u"'JSON'", u"'KEY_BLOCK_SIZE'", u"'LANGUAGE'", 
                     u"'LAST'", u"'LEAVES'", u"'LESS'", u"'LEVEL'", u"'LIST'", 
                     u"'LOCAL'", u"'LOGFILE'", u"'LOGS'", u"'MASTER'", u"'MASTER_AUTO_POSITION'", 
                     u"'MASTER_CONNECT_RETRY'", u"'MASTER_DELAY'", u"'MASTER_HEARTBEAT_PERIOD'", 
                     u"'MASTER_HOST'", u"'MASTER_LOG_FILE'", u"'MASTER_LOG_POS'", 
                     u"'MASTER_PASSWORD'", u"'MASTER_PORT'", u"'MASTER_RETRY_COUNT'", 
                     u"'MASTER_SSL'", u"'MASTER_SSL_CA'", u"'MASTER_SSL_CAPATH'", 
                     u"'MASTER_SSL_CERT'", u"'MASTER_SSL_CIPHER'", u"'MASTER_SSL_CRL'", 
                     u"'MASTER_SSL_CRLPATH'", u"'MASTER_SSL_KEY'", u"'MASTER_TLS_VERSION'", 
                     u"'MASTER_USER'", u"'MAX_CONNECTIONS_PER_HOUR'", u"'MAX_QUERIES_PER_HOUR'", 
                     u"'MAX_ROWS'", u"'MAX_SIZE'", u"'MAX_UPDATES_PER_HOUR'", 
                     u"'MAX_USER_CONNECTIONS'", u"'MEDIUM'", u"'MERGE'", 
                     u"'MID'", u"'MIGRATE'", u"'MIN_ROWS'", u"'MODE'", u"'MODIFY'", 
                     u"'MUTEX'", u"'MYSQL'", u"'NAME'", u"'NAMES'", u"'NCHAR'", 
                     u"'NEVER'", u"'NEXT'", u"'NO'", u"'NODEGROUP'", u"'NONE'", 
                     u"'OFFLINE'", u"'OFFSET'", u"'OJ'", u"'OLD_PASSWORD'", 
                     u"'ONE'", u"'ONLINE'", u"'ONLY'", u"'OPEN'", u"'OPTIMIZER_COSTS'", 
                     u"'OPTIONS'", u"'OWNER'", u"'PACK_KEYS'", u"'PAGE'", 
                     u"'PARSER'", u"'PARTIAL'", u"'PARTITIONING'", u"'PARTITIONS'", 
                     u"'PASSWORD'", u"'PHASE'", u"'PLUGIN'", u"'PLUGIN_DIR'", 
                     u"'PLUGINS'", u"'PORT'", u"'PRECEDES'", u"'PREPARE'", 
                     u"'PRESERVE'", u"'PREV'", u"'PROCESSLIST'", u"'PROFILE'", 
                     u"'PROFILES'", u"'PROXY'", u"'QUERY'", u"'QUICK'", 
                     u"'REBUILD'", u"'RECOVER'", u"'REDO_BUFFER_SIZE'", 
                     u"'REDUNDANT'", u"'RELAY'", u"'RELAY_LOG_FILE'", u"'RELAY_LOG_POS'", 
                     u"'RELAYLOG'", u"'REMOVE'", u"'REORGANIZE'", u"'REPAIR'", 
                     u"'REPLICATE_DO_DB'", u"'REPLICATE_DO_TABLE'", u"'REPLICATE_IGNORE_DB'", 
                     u"'REPLICATE_IGNORE_TABLE'", u"'REPLICATE_REWRITE_DB'", 
                     u"'REPLICATE_WILD_DO_TABLE'", u"'REPLICATE_WILD_IGNORE_TABLE'", 
                     u"'REPLICATION'", u"'RESET'", u"'RESUME'", u"'RETURNS'", 
                     u"'ROLLBACK'", u"'ROLLUP'", u"'ROTATE'", u"'ROW'", 
                     u"'ROWS'", u"'ROW_FORMAT'", u"'SAVEPOINT'", u"'SCHEDULE'", 
                     u"'SECURITY'", u"'SERVER'", u"'SESSION'", u"'SHARE'", 
                     u"'SHARED'", u"'SIGNED'", u"'SIMPLE'", u"'SLAVE'", 
                     u"'SLOW'", u"'SNAPSHOT'", u"'SOCKET'", u"'SOME'", u"'SONAME'", 
                     u"'SOUNDS'", u"'SOURCE'", u"'SQL_AFTER_GTIDS'", u"'SQL_AFTER_MTS_GAPS'", 
                     u"'SQL_BEFORE_GTIDS'", u"'SQL_BUFFER_RESULT'", u"'SQL_CACHE'", 
                     u"'SQL_NO_CACHE'", u"'SQL_THREAD'", u"'START'", u"'STARTS'", 
                     u"'STATS_AUTO_RECALC'", u"'STATS_PERSISTENT'", u"'STATS_SAMPLE_PAGES'", 
                     u"'STATUS'", u"'STOP'", u"'STORAGE'", u"'STRING'", 
                     u"'SUBJECT'", u"'SUBPARTITION'", u"'SUBPARTITIONS'", 
                     u"'SUSPEND'", u"'SWAPS'", u"'SWITCHES'", u"'TABLESPACE'", 
                     u"'TEMPORARY'", u"'TEMPTABLE'", u"'THAN'", u"'TRADITIONAL'", 
                     u"'TRANSACTION'", u"'TRIGGERS'", u"'TRUNCATE'", u"'UNDEFINED'", 
                     u"'UNDOFILE'", u"'UNDO_BUFFER_SIZE'", u"'UNINSTALL'", 
                     u"'UNKNOWN'", u"'UNTIL'", u"'UPGRADE'", u"'USER'", 
                     u"'USE_FRM'", u"'USER_RESOURCES'", u"'VALIDATION'", 
                     u"'VALUE'", u"'VARIABLES'", u"'VIEW'", u"'WAIT'", u"'WARNINGS'", 
                     u"'WITHOUT'", u"'WORK'", u"'WRAPPER'", u"'X509'", u"'XA'", 
                     u"'XML'", u"'EUR'", u"'USA'", u"'JIS'", u"'ISO'", u"'INTERNAL'", 
                     u"'QUARTER'", u"'MONTH'", u"'DAY'", u"'HOUR'", u"'MINUTE'", 
                     u"'WEEK'", u"'SECOND'", u"'MICROSECOND'", u"'TABLES'", 
                     u"'ROUTINE'", u"'EXECUTE'", u"'FILE'", u"'PROCESS'", 
                     u"'RELOAD'", u"'SHUTDOWN'", u"'SUPER'", u"'PRIVILEGES'", 
                     u"'ARMSCII8'", u"'ASCII'", u"'BIG5'", u"'CP1250'", 
                     u"'CP1251'", u"'CP1256'", u"'CP1257'", u"'CP850'", 
                     u"'CP852'", u"'CP866'", u"'CP932'", u"'DEC8'", u"'EUCJPMS'", 
                     u"'EUCKR'", u"'GB2312'", u"'GBK'", u"'GEOSTD8'", u"'GREEK'", 
                     u"'HEBREW'", u"'HP8'", u"'KEYBCS2'", u"'KOI8R'", u"'KOI8U'", 
                     u"'LATIN1'", u"'LATIN2'", u"'LATIN5'", u"'LATIN7'", 
                     u"'MACCE'", u"'MACROMAN'", u"'SJIS'", u"'SWE7'", u"'TIS620'", 
                     u"'UCS2'", u"'UJIS'", u"'UTF16'", u"'UTF16LE'", u"'UTF32'", 
                     u"'UTF8'", u"'UTF8MB3'", u"'UTF8MB4'", u"'ARCHIVE'", 
                     u"'BLACKHOLE'", u"'CSV'", u"'FEDERATED'", u"'INNODB'", 
                     u"'MEMORY'", u"'MRG_MYISAM'", u"'MYISAM'", u"'NDB'", 
                     u"'NDBCLUSTER'", u"'PERFOMANCE_SCHEMA'", u"'REPEATABLE'", 
                     u"'COMMITTED'", u"'UNCOMMITTED'", u"'SERIALIZABLE'", 
                     u"'GEOMETRYCOLLECTION'", u"'LINESTRING'", u"'MULTILINESTRING'", 
                     u"'MULTIPOINT'", u"'MULTIPOLYGON'", u"'POINT'", u"'POLYGON'", 
                     u"'ABS'", u"'ACOS'", u"'ADDDATE'", u"'ADDTIME'", u"'AES_DECRYPT'", 
                     u"'AES_ENCRYPT'", u"'AREA'", u"'ASBINARY'", u"'ASIN'", 
                     u"'ASTEXT'", u"'ASWKB'", u"'ASWKT'", u"'ASYMMETRIC_DECRYPT'", 
                     u"'ASYMMETRIC_DERIVE'", u"'ASYMMETRIC_ENCRYPT'", u"'ASYMMETRIC_SIGN'", 
                     u"'ASYMMETRIC_VERIFY'", u"'ATAN'", u"'ATAN2'", u"'BENCHMARK'", 
                     u"'BIN'", u"'BIT_COUNT'", u"'BIT_LENGTH'", u"'BUFFER'", 
                     u"'CEIL'", u"'CEILING'", u"'CENTROID'", u"'CHARACTER_LENGTH'", 
                     u"'CHARSET'", u"'CHAR_LENGTH'", u"'COERCIBILITY'", 
                     u"'COLLATION'", u"'COMPRESS'", u"'CONCAT'", u"'CONCAT_WS'", 
                     u"'CONNECTION_ID'", u"'CONV'", u"'CONVERT_TZ'", u"'COS'", 
                     u"'COT'", u"'CRC32'", u"'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     u"'CREATE_ASYMMETRIC_PUB_KEY'", u"'CREATE_DH_PARAMETERS'", 
                     u"'CREATE_DIGEST'", u"'CROSSES'", u"'DATEDIFF'", u"'DATE_FORMAT'", 
                     u"'DAYNAME'", u"'DAYOFMONTH'", u"'DAYOFWEEK'", u"'DAYOFYEAR'", 
                     u"'DECODE'", u"'DEGREES'", u"'DES_DECRYPT'", u"'DES_ENCRYPT'", 
                     u"'DIMENSION'", u"'DISJOINT'", u"'ELT'", u"'ENCODE'", 
                     u"'ENCRYPT'", u"'ENDPOINT'", u"'ENVELOPE'", u"'EQUALS'", 
                     u"'EXP'", u"'EXPORT_SET'", u"'EXTERIORRING'", u"'EXTRACTVALUE'", 
                     u"'FIELD'", u"'FIND_IN_SET'", u"'FLOOR'", u"'FORMAT'", 
                     u"'FOUND_ROWS'", u"'FROM_BASE64'", u"'FROM_DAYS'", 
                     u"'FROM_UNIXTIME'", u"'GEOMCOLLFROMTEXT'", u"'GEOMCOLLFROMWKB'", 
                     u"'GEOMETRYCOLLECTIONFROMTEXT'", u"'GEOMETRYCOLLECTIONFROMWKB'", 
                     u"'GEOMETRYFROMTEXT'", u"'GEOMETRYFROMWKB'", u"'GEOMETRYN'", 
                     u"'GEOMETRYTYPE'", u"'GEOMFROMTEXT'", u"'GEOMFROMWKB'", 
                     u"'GET_FORMAT'", u"'GET_LOCK'", u"'GLENGTH'", u"'GREATEST'", 
                     u"'GTID_SUBSET'", u"'GTID_SUBTRACT'", u"'HEX'", u"'IFNULL'", 
                     u"'INET6_ATON'", u"'INET6_NTOA'", u"'INET_ATON'", u"'INET_NTOA'", 
                     u"'INSTR'", u"'INTERIORRINGN'", u"'INTERSECTS'", u"'ISCLOSED'", 
                     u"'ISEMPTY'", u"'ISNULL'", u"'ISSIMPLE'", u"'IS_FREE_LOCK'", 
                     u"'IS_IPV4'", u"'IS_IPV4_COMPAT'", u"'IS_IPV4_MAPPED'", 
                     u"'IS_IPV6'", u"'IS_USED_LOCK'", u"'LAST_INSERT_ID'", 
                     u"'LCASE'", u"'LEAST'", u"'LENGTH'", u"'LINEFROMTEXT'", 
                     u"'LINEFROMWKB'", u"'LINESTRINGFROMTEXT'", u"'LINESTRINGFROMWKB'", 
                     u"'LN'", u"'LOAD_FILE'", u"'LOCATE'", u"'LOG'", u"'LOG10'", 
                     u"'LOG2'", u"'LOWER'", u"'LPAD'", u"'LTRIM'", u"'MAKEDATE'", 
                     u"'MAKETIME'", u"'MAKE_SET'", u"'MASTER_POS_WAIT'", 
                     u"'MBRCONTAINS'", u"'MBRDISJOINT'", u"'MBREQUAL'", 
                     u"'MBRINTERSECTS'", u"'MBROVERLAPS'", u"'MBRTOUCHES'", 
                     u"'MBRWITHIN'", u"'MD5'", u"'MLINEFROMTEXT'", u"'MLINEFROMWKB'", 
                     u"'MONTHNAME'", u"'MPOINTFROMTEXT'", u"'MPOINTFROMWKB'", 
                     u"'MPOLYFROMTEXT'", u"'MPOLYFROMWKB'", u"'MULTILINESTRINGFROMTEXT'", 
                     u"'MULTILINESTRINGFROMWKB'", u"'MULTIPOINTFROMTEXT'", 
                     u"'MULTIPOINTFROMWKB'", u"'MULTIPOLYGONFROMTEXT'", 
                     u"'MULTIPOLYGONFROMWKB'", u"'NAME_CONST'", u"'NULLIF'", 
                     u"'NUMGEOMETRIES'", u"'NUMINTERIORRINGS'", u"'NUMPOINTS'", 
                     u"'OCT'", u"'OCTET_LENGTH'", u"'ORD'", u"'OVERLAPS'", 
                     u"'PERIOD_ADD'", u"'PERIOD_DIFF'", u"'PI'", u"'POINTFROMTEXT'", 
                     u"'POINTFROMWKB'", u"'POINTN'", u"'POLYFROMTEXT'", 
                     u"'POLYFROMWKB'", u"'POLYGONFROMTEXT'", u"'POLYGONFROMWKB'", 
                     u"'POW'", u"'POWER'", u"'QUOTE'", u"'RADIANS'", u"'RAND'", 
                     u"'RANDOM_BYTES'", u"'RELEASE_LOCK'", u"'REVERSE'", 
                     u"'ROUND'", u"'ROW_COUNT'", u"'RPAD'", u"'RTRIM'", 
                     u"'SEC_TO_TIME'", u"'SESSION_USER'", u"'SHA'", u"'SHA1'", 
                     u"'SHA2'", u"'SIGN'", u"'SIN'", u"'SLEEP'", u"'SOUNDEX'", 
                     u"'SQL_THREAD_WAIT_AFTER_GTIDS'", u"'SQRT'", u"'SRID'", 
                     u"'STARTPOINT'", u"'STRCMP'", u"'STR_TO_DATE'", u"'ST_AREA'", 
                     u"'ST_ASBINARY'", u"'ST_ASTEXT'", u"'ST_ASWKB'", u"'ST_ASWKT'", 
                     u"'ST_BUFFER'", u"'ST_CENTROID'", u"'ST_CONTAINS'", 
                     u"'ST_CROSSES'", u"'ST_DIFFERENCE'", u"'ST_DIMENSION'", 
                     u"'ST_DISJOINT'", u"'ST_DISTANCE'", u"'ST_ENDPOINT'", 
                     u"'ST_ENVELOPE'", u"'ST_EQUALS'", u"'ST_EXTERIORRING'", 
                     u"'ST_GEOMCOLLFROMTEXT'", u"'ST_GEOMCOLLFROMTXT'", 
                     u"'ST_GEOMCOLLFROMWKB'", u"'ST_GEOMETRYCOLLECTIONFROMTEXT'", 
                     u"'ST_GEOMETRYCOLLECTIONFROMWKB'", u"'ST_GEOMETRYFROMTEXT'", 
                     u"'ST_GEOMETRYFROMWKB'", u"'ST_GEOMETRYN'", u"'ST_GEOMETRYTYPE'", 
                     u"'ST_GEOMFROMTEXT'", u"'ST_GEOMFROMWKB'", u"'ST_INTERIORRINGN'", 
                     u"'ST_INTERSECTION'", u"'ST_INTERSECTS'", u"'ST_ISCLOSED'", 
                     u"'ST_ISEMPTY'", u"'ST_ISSIMPLE'", u"'ST_LINEFROMTEXT'", 
                     u"'ST_LINEFROMWKB'", u"'ST_LINESTRINGFROMTEXT'", u"'ST_LINESTRINGFROMWKB'", 
                     u"'ST_NUMGEOMETRIES'", u"'ST_NUMINTERIORRING'", u"'ST_NUMINTERIORRINGS'", 
                     u"'ST_NUMPOINTS'", u"'ST_OVERLAPS'", u"'ST_POINTFROMTEXT'", 
                     u"'ST_POINTFROMWKB'", u"'ST_POINTN'", u"'ST_POLYFROMTEXT'", 
                     u"'ST_POLYFROMWKB'", u"'ST_POLYGONFROMTEXT'", u"'ST_POLYGONFROMWKB'", 
                     u"'ST_SRID'", u"'ST_STARTPOINT'", u"'ST_SYMDIFFERENCE'", 
                     u"'ST_TOUCHES'", u"'ST_UNION'", u"'ST_WITHIN'", u"'ST_X'", 
                     u"'ST_Y'", u"'SUBDATE'", u"'SUBSTRING_INDEX'", u"'SUBTIME'", 
                     u"'SYSTEM_USER'", u"'TAN'", u"'TIMEDIFF'", u"'TIMESTAMPADD'", 
                     u"'TIMESTAMPDIFF'", u"'TIME_FORMAT'", u"'TIME_TO_SEC'", 
                     u"'TOUCHES'", u"'TO_BASE64'", u"'TO_DAYS'", u"'TO_SECONDS'", 
                     u"'UCASE'", u"'UNCOMPRESS'", u"'UNCOMPRESSED_LENGTH'", 
                     u"'UNHEX'", u"'UNIX_TIMESTAMP'", u"'UPDATEXML'", u"'UPPER'", 
                     u"'UUID'", u"'UUID_SHORT'", u"'VALIDATE_PASSWORD_STRENGTH'", 
                     u"'VERSION'", u"'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     u"'WEEKDAY'", u"'WEEKOFYEAR'", u"'WEIGHT_STRING'", 
                     u"'WITHIN'", u"'YEARWEEK'", u"'Y'", u"'X'", u"':='", 
                     u"'+='", u"'-='", u"'*='", u"'/='", u"'%='", u"'&='", 
                     u"'^='", u"'|='", u"'*'", u"'/'", u"'%'", u"'+'", u"'--'", 
                     u"'-'", u"'DIV'", u"'MOD'", u"'='", u"'>'", u"'<'", 
                     u"'!'", u"'~'", u"'|'", u"'&'", u"'^'", u"'.'", u"'('", 
                     u"')'", u"','", u"';'", u"'@'", u"'0'", u"'1'", u"'2'", 
                     u"'''", u"'\"'", u"'`'", u"':'" ]

    symbolicNames = [ u"<INVALID>", u"SPACE", u"SPEC_MYSQL_COMMENT", u"COMMENT_INPUT", 
                      u"LINE_COMMENT", u"ADD", u"ALL", u"ALTER", u"ANALYZE", 
                      u"AND", u"AS", u"ASC", u"BEFORE", u"BETWEEN", u"BOTH", 
                      u"BY", u"CALL", u"CASCADE", u"CASE", u"CAST", u"CHANGE", 
                      u"CHARACTER", u"CHECK", u"COLLATE", u"COLUMN", u"CONDITION", 
                      u"CONSTRAINT", u"CONTINUE", u"CONVERT", u"CREATE", 
                      u"CROSS", u"CURRENT_USER", u"CURSOR", u"DATABASE", 
                      u"DATABASES", u"DECLARE", u"DEFAULT", u"DELAYED", 
                      u"DELETE", u"DESC", u"DESCRIBE", u"DETERMINISTIC", 
                      u"DISTINCT", u"DISTINCTROW", u"DROP", u"EACH", u"ELSE", 
                      u"ELSEIF", u"ENCLOSED", u"ESCAPED", u"EXISTS", u"EXIT", 
                      u"EXPLAIN", u"FALSE", u"FETCH", u"FOR", u"FORCE", 
                      u"FOREIGN", u"FROM", u"FULLTEXT", u"GRANT", u"GROUP", 
                      u"HAVING", u"HIGH_PRIORITY", u"IF", u"IGNORE", u"IN", 
                      u"INDEX", u"INFILE", u"INNER", u"INOUT", u"INSERT", 
                      u"INTERVAL", u"INTO", u"IS", u"ITERATE", u"JOIN", 
                      u"KEY", u"KEYS", u"KILL", u"LEADING", u"LEAVE", u"LEFT", 
                      u"LIKE", u"LIMIT", u"LINEAR", u"LINES", u"LOAD", u"LOCK", 
                      u"LOOP", u"LOW_PRIORITY", u"MASTER_BIND", u"MASTER_SSL_VERIFY_SERVER_CERT", 
                      u"MATCH", u"MAXVALUE", u"MODIFIES", u"NATURAL", u"NOT", 
                      u"NO_WRITE_TO_BINLOG", u"NULL_LITERAL", u"ON", u"OPTIMIZE", 
                      u"OPTION", u"OPTIONALLY", u"OR", u"ORDER", u"OUT", 
                      u"OUTER", u"OUTFILE", u"PARTITION", u"PRIMARY", u"PROCEDURE", 
                      u"PURGE", u"RANGE", u"READ", u"READS", u"REFERENCES", 
                      u"REGEXP", u"RELEASE", u"RENAME", u"REPEAT", u"REPLACE", 
                      u"REQUIRE", u"RESTRICT", u"RETURN", u"REVOKE", u"RIGHT", 
                      u"RLIKE", u"SCHEMA", u"SCHEMAS", u"SELECT", u"SET", 
                      u"SEPARATOR", u"SHOW", u"SPATIAL", u"SQL", u"SQLEXCEPTION", 
                      u"SQLSTATE", u"SQLWARNING", u"SQL_BIG_RESULT", u"SQL_CALC_FOUND_ROWS", 
                      u"SQL_SMALL_RESULT", u"SSL", u"STARTING", u"STRAIGHT_JOIN", 
                      u"TABLE", u"TERMINATED", u"THEN", u"TO", u"TRAILING", 
                      u"TRIGGER", u"TRUE", u"UNDO", u"UNION", u"UNIQUE", 
                      u"UNLOCK", u"UNSIGNED", u"UPDATE", u"USAGE", u"USE", 
                      u"USING", u"VALUES", u"WHEN", u"WHERE", u"WHILE", 
                      u"WITH", u"WRITE", u"XOR", u"ZEROFILL", u"TINYINT", 
                      u"SMALLINT", u"MEDIUMINT", u"INT", u"INTEGER", u"BIGINT", 
                      u"REAL", u"DOUBLE", u"FLOAT", u"DECIMAL", u"NUMERIC", 
                      u"DATE", u"TIME", u"TIMESTAMP", u"DATETIME", u"YEAR", 
                      u"CHAR", u"VARCHAR", u"BINARY", u"VARBINARY", u"TINYBLOB", 
                      u"BLOB", u"MEDIUMBLOB", u"LONGBLOB", u"TINYTEXT", 
                      u"TEXT", u"MEDIUMTEXT", u"LONGTEXT", u"ENUM", u"YEAR_MONTH", 
                      u"DAY_HOUR", u"DAY_MINUTE", u"DAY_SECOND", u"HOUR_MINUTE", 
                      u"HOUR_SECOND", u"MINUTE_SECOND", u"SECOND_MICROSECOND", 
                      u"MINUTE_MICROSECOND", u"HOUR_MICROSECOND", u"DAY_MICROSECOND", 
                      u"AVG", u"BIT_AND", u"BIT_OR", u"BIT_XOR", u"COUNT", 
                      u"GROUP_CONCAT", u"MAX", u"MIN", u"STD", u"STDDEV", 
                      u"STDDEV_POP", u"STDDEV_SAMP", u"SUM", u"VAR_POP", 
                      u"VAR_SAMP", u"VARIANCE", u"CURRENT_DATE", u"CURRENT_TIME", 
                      u"CURRENT_TIMESTAMP", u"LOCALTIME", u"CURDATE", u"CURTIME", 
                      u"DATE_ADD", u"DATE_SUB", u"EXTRACT", u"LOCALTIMESTAMP", 
                      u"NOW", u"POSITION", u"SUBSTR", u"SUBSTRING", u"SYSDATE", 
                      u"TRIM", u"UTC_DATE", u"UTC_TIME", u"UTC_TIMESTAMP", 
                      u"ACCOUNT", u"ACTION", u"AFTER", u"AGGREGATE", u"ALGORITHM", 
                      u"ANY", u"AT", u"AUTHORS", u"AUTOCOMMIT", u"AUTOEXTEND_SIZE", 
                      u"AUTO_INCREMENT", u"AVG_ROW_LENGTH", u"BEGIN", u"BINLOG", 
                      u"BIT", u"BLOCK", u"BOOL", u"BOOLEAN", u"BTREE", u"CACHE", 
                      u"CASCADED", u"CHAIN", u"CHANGED", u"CHANNEL", u"CHECKSUM", 
                      u"CIPHER", u"CLIENT", u"CLOSE", u"COALESCE", u"CODE", 
                      u"COLUMNS", u"COLUMN_FORMAT", u"COMMENT", u"COMMIT", 
                      u"COMPACT", u"COMPLETION", u"COMPRESSED", u"COMPRESSION", 
                      u"CONCURRENT", u"CONNECTION", u"CONSISTENT", u"CONTAINS", 
                      u"CONTEXT", u"CONTRIBUTORS", u"COPY", u"CPU", u"DATA", 
                      u"DATAFILE", u"DEALLOCATE", u"DEFAULT_AUTH", u"DEFINER", 
                      u"DELAY_KEY_WRITE", u"DES_KEY_FILE", u"DIRECTORY", 
                      u"DISABLE", u"DISCARD", u"DISK", u"DO", u"DUMPFILE", 
                      u"DUPLICATE", u"DYNAMIC", u"ENABLE", u"ENCRYPTION", 
                      u"END", u"ENDS", u"ENGINE", u"ENGINES", u"ERROR", 
                      u"ERRORS", u"ESCAPE", u"EVEN", u"EVENT", u"EVENTS", 
                      u"EVERY", u"EXCHANGE", u"EXCLUSIVE", u"EXPIRE", u"EXPORT", 
                      u"EXTENDED", u"EXTENT_SIZE", u"FAST", u"FAULTS", u"FIELDS", 
                      u"FILE_BLOCK_SIZE", u"FILTER", u"FIRST", u"FIXED", 
                      u"FLUSH", u"FOLLOWS", u"FOUND", u"FULL", u"FUNCTION", 
                      u"GENERAL", u"GLOBAL", u"GRANTS", u"GROUP_REPLICATION", 
                      u"HANDLER", u"HASH", u"HELP", u"HOST", u"HOSTS", u"IDENTIFIED", 
                      u"IGNORE_SERVER_IDS", u"IMPORT", u"INDEXES", u"INITIAL_SIZE", 
                      u"INPLACE", u"INSERT_METHOD", u"INSTALL", u"INSTANCE", 
                      u"INVOKER", u"IO", u"IO_THREAD", u"IPC", u"ISOLATION", 
                      u"ISSUER", u"JSON", u"KEY_BLOCK_SIZE", u"LANGUAGE", 
                      u"LAST", u"LEAVES", u"LESS", u"LEVEL", u"LIST", u"LOCAL", 
                      u"LOGFILE", u"LOGS", u"MASTER", u"MASTER_AUTO_POSITION", 
                      u"MASTER_CONNECT_RETRY", u"MASTER_DELAY", u"MASTER_HEARTBEAT_PERIOD", 
                      u"MASTER_HOST", u"MASTER_LOG_FILE", u"MASTER_LOG_POS", 
                      u"MASTER_PASSWORD", u"MASTER_PORT", u"MASTER_RETRY_COUNT", 
                      u"MASTER_SSL", u"MASTER_SSL_CA", u"MASTER_SSL_CAPATH", 
                      u"MASTER_SSL_CERT", u"MASTER_SSL_CIPHER", u"MASTER_SSL_CRL", 
                      u"MASTER_SSL_CRLPATH", u"MASTER_SSL_KEY", u"MASTER_TLS_VERSION", 
                      u"MASTER_USER", u"MAX_CONNECTIONS_PER_HOUR", u"MAX_QUERIES_PER_HOUR", 
                      u"MAX_ROWS", u"MAX_SIZE", u"MAX_UPDATES_PER_HOUR", 
                      u"MAX_USER_CONNECTIONS", u"MEDIUM", u"MERGE", u"MID", 
                      u"MIGRATE", u"MIN_ROWS", u"MODE", u"MODIFY", u"MUTEX", 
                      u"MYSQL", u"NAME", u"NAMES", u"NCHAR", u"NEVER", u"NEXT", 
                      u"NO", u"NODEGROUP", u"NONE", u"OFFLINE", u"OFFSET", 
                      u"OJ", u"OLD_PASSWORD", u"ONE", u"ONLINE", u"ONLY", 
                      u"OPEN", u"OPTIMIZER_COSTS", u"OPTIONS", u"OWNER", 
                      u"PACK_KEYS", u"PAGE", u"PARSER", u"PARTIAL", u"PARTITIONING", 
                      u"PARTITIONS", u"PASSWORD", u"PHASE", u"PLUGIN", u"PLUGIN_DIR", 
                      u"PLUGINS", u"PORT", u"PRECEDES", u"PREPARE", u"PRESERVE", 
                      u"PREV", u"PROCESSLIST", u"PROFILE", u"PROFILES", 
                      u"PROXY", u"QUERY", u"QUICK", u"REBUILD", u"RECOVER", 
                      u"REDO_BUFFER_SIZE", u"REDUNDANT", u"RELAY", u"RELAY_LOG_FILE", 
                      u"RELAY_LOG_POS", u"RELAYLOG", u"REMOVE", u"REORGANIZE", 
                      u"REPAIR", u"REPLICATE_DO_DB", u"REPLICATE_DO_TABLE", 
                      u"REPLICATE_IGNORE_DB", u"REPLICATE_IGNORE_TABLE", 
                      u"REPLICATE_REWRITE_DB", u"REPLICATE_WILD_DO_TABLE", 
                      u"REPLICATE_WILD_IGNORE_TABLE", u"REPLICATION", u"RESET", 
                      u"RESUME", u"RETURNS", u"ROLLBACK", u"ROLLUP", u"ROTATE", 
                      u"ROW", u"ROWS", u"ROW_FORMAT", u"SAVEPOINT", u"SCHEDULE", 
                      u"SECURITY", u"SERVER", u"SESSION", u"SHARE", u"SHARED", 
                      u"SIGNED", u"SIMPLE", u"SLAVE", u"SLOW", u"SNAPSHOT", 
                      u"SOCKET", u"SOME", u"SONAME", u"SOUNDS", u"SOURCE", 
                      u"SQL_AFTER_GTIDS", u"SQL_AFTER_MTS_GAPS", u"SQL_BEFORE_GTIDS", 
                      u"SQL_BUFFER_RESULT", u"SQL_CACHE", u"SQL_NO_CACHE", 
                      u"SQL_THREAD", u"START", u"STARTS", u"STATS_AUTO_RECALC", 
                      u"STATS_PERSISTENT", u"STATS_SAMPLE_PAGES", u"STATUS", 
                      u"STOP", u"STORAGE", u"STRING", u"SUBJECT", u"SUBPARTITION", 
                      u"SUBPARTITIONS", u"SUSPEND", u"SWAPS", u"SWITCHES", 
                      u"TABLESPACE", u"TEMPORARY", u"TEMPTABLE", u"THAN", 
                      u"TRADITIONAL", u"TRANSACTION", u"TRIGGERS", u"TRUNCATE", 
                      u"UNDEFINED", u"UNDOFILE", u"UNDO_BUFFER_SIZE", u"UNINSTALL", 
                      u"UNKNOWN", u"UNTIL", u"UPGRADE", u"USER", u"USE_FRM", 
                      u"USER_RESOURCES", u"VALIDATION", u"VALUE", u"VARIABLES", 
                      u"VIEW", u"WAIT", u"WARNINGS", u"WITHOUT", u"WORK", 
                      u"WRAPPER", u"X509", u"XA", u"XML", u"EUR", u"USA", 
                      u"JIS", u"ISO", u"INTERNAL", u"QUARTER", u"MONTH", 
                      u"DAY", u"HOUR", u"MINUTE", u"WEEK", u"SECOND", u"MICROSECOND", 
                      u"TABLES", u"ROUTINE", u"EXECUTE", u"FILE", u"PROCESS", 
                      u"RELOAD", u"SHUTDOWN", u"SUPER", u"PRIVILEGES", u"ARMSCII8", 
                      u"ASCII", u"BIG5", u"CP1250", u"CP1251", u"CP1256", 
                      u"CP1257", u"CP850", u"CP852", u"CP866", u"CP932", 
                      u"DEC8", u"EUCJPMS", u"EUCKR", u"GB2312", u"GBK", 
                      u"GEOSTD8", u"GREEK", u"HEBREW", u"HP8", u"KEYBCS2", 
                      u"KOI8R", u"KOI8U", u"LATIN1", u"LATIN2", u"LATIN5", 
                      u"LATIN7", u"MACCE", u"MACROMAN", u"SJIS", u"SWE7", 
                      u"TIS620", u"UCS2", u"UJIS", u"UTF16", u"UTF16LE", 
                      u"UTF32", u"UTF8", u"UTF8MB3", u"UTF8MB4", u"ARCHIVE", 
                      u"BLACKHOLE", u"CSV", u"FEDERATED", u"INNODB", u"MEMORY", 
                      u"MRG_MYISAM", u"MYISAM", u"NDB", u"NDBCLUSTER", u"PERFOMANCE_SCHEMA", 
                      u"REPEATABLE", u"COMMITTED", u"UNCOMMITTED", u"SERIALIZABLE", 
                      u"GEOMETRYCOLLECTION", u"LINESTRING", u"MULTILINESTRING", 
                      u"MULTIPOINT", u"MULTIPOLYGON", u"POINT", u"POLYGON", 
                      u"ABS", u"ACOS", u"ADDDATE", u"ADDTIME", u"AES_DECRYPT", 
                      u"AES_ENCRYPT", u"AREA", u"ASBINARY", u"ASIN", u"ASTEXT", 
                      u"ASWKB", u"ASWKT", u"ASYMMETRIC_DECRYPT", u"ASYMMETRIC_DERIVE", 
                      u"ASYMMETRIC_ENCRYPT", u"ASYMMETRIC_SIGN", u"ASYMMETRIC_VERIFY", 
                      u"ATAN", u"ATAN2", u"BENCHMARK", u"BIN", u"BIT_COUNT", 
                      u"BIT_LENGTH", u"BUFFER", u"CEIL", u"CEILING", u"CENTROID", 
                      u"CHARACTER_LENGTH", u"CHARSET", u"CHAR_LENGTH", u"COERCIBILITY", 
                      u"COLLATION", u"COMPRESS", u"CONCAT", u"CONCAT_WS", 
                      u"CONNECTION_ID", u"CONV", u"CONVERT_TZ", u"COS", 
                      u"COT", u"CRC32", u"CREATE_ASYMMETRIC_PRIV_KEY", u"CREATE_ASYMMETRIC_PUB_KEY", 
                      u"CREATE_DH_PARAMETERS", u"CREATE_DIGEST", u"CROSSES", 
                      u"DATEDIFF", u"DATE_FORMAT", u"DAYNAME", u"DAYOFMONTH", 
                      u"DAYOFWEEK", u"DAYOFYEAR", u"DECODE", u"DEGREES", 
                      u"DES_DECRYPT", u"DES_ENCRYPT", u"DIMENSION", u"DISJOINT", 
                      u"ELT", u"ENCODE", u"ENCRYPT", u"ENDPOINT", u"ENVELOPE", 
                      u"EQUALS", u"EXP", u"EXPORT_SET", u"EXTERIORRING", 
                      u"EXTRACTVALUE", u"FIELD", u"FIND_IN_SET", u"FLOOR", 
                      u"FORMAT", u"FOUND_ROWS", u"FROM_BASE64", u"FROM_DAYS", 
                      u"FROM_UNIXTIME", u"GEOMCOLLFROMTEXT", u"GEOMCOLLFROMWKB", 
                      u"GEOMETRYCOLLECTIONFROMTEXT", u"GEOMETRYCOLLECTIONFROMWKB", 
                      u"GEOMETRYFROMTEXT", u"GEOMETRYFROMWKB", u"GEOMETRYN", 
                      u"GEOMETRYTYPE", u"GEOMFROMTEXT", u"GEOMFROMWKB", 
                      u"GET_FORMAT", u"GET_LOCK", u"GLENGTH", u"GREATEST", 
                      u"GTID_SUBSET", u"GTID_SUBTRACT", u"HEX", u"IFNULL", 
                      u"INET6_ATON", u"INET6_NTOA", u"INET_ATON", u"INET_NTOA", 
                      u"INSTR", u"INTERIORRINGN", u"INTERSECTS", u"ISCLOSED", 
                      u"ISEMPTY", u"ISNULL", u"ISSIMPLE", u"IS_FREE_LOCK", 
                      u"IS_IPV4", u"IS_IPV4_COMPAT", u"IS_IPV4_MAPPED", 
                      u"IS_IPV6", u"IS_USED_LOCK", u"LAST_INSERT_ID", u"LCASE", 
                      u"LEAST", u"LENGTH", u"LINEFROMTEXT", u"LINEFROMWKB", 
                      u"LINESTRINGFROMTEXT", u"LINESTRINGFROMWKB", u"LN", 
                      u"LOAD_FILE", u"LOCATE", u"LOG", u"LOG10", u"LOG2", 
                      u"LOWER", u"LPAD", u"LTRIM", u"MAKEDATE", u"MAKETIME", 
                      u"MAKE_SET", u"MASTER_POS_WAIT", u"MBRCONTAINS", u"MBRDISJOINT", 
                      u"MBREQUAL", u"MBRINTERSECTS", u"MBROVERLAPS", u"MBRTOUCHES", 
                      u"MBRWITHIN", u"MD5", u"MLINEFROMTEXT", u"MLINEFROMWKB", 
                      u"MONTHNAME", u"MPOINTFROMTEXT", u"MPOINTFROMWKB", 
                      u"MPOLYFROMTEXT", u"MPOLYFROMWKB", u"MULTILINESTRINGFROMTEXT", 
                      u"MULTILINESTRINGFROMWKB", u"MULTIPOINTFROMTEXT", 
                      u"MULTIPOINTFROMWKB", u"MULTIPOLYGONFROMTEXT", u"MULTIPOLYGONFROMWKB", 
                      u"NAME_CONST", u"NULLIF", u"NUMGEOMETRIES", u"NUMINTERIORRINGS", 
                      u"NUMPOINTS", u"OCT", u"OCTET_LENGTH", u"ORD", u"OVERLAPS", 
                      u"PERIOD_ADD", u"PERIOD_DIFF", u"PI", u"POINTFROMTEXT", 
                      u"POINTFROMWKB", u"POINTN", u"POLYFROMTEXT", u"POLYFROMWKB", 
                      u"POLYGONFROMTEXT", u"POLYGONFROMWKB", u"POW", u"POWER", 
                      u"QUOTE", u"RADIANS", u"RAND", u"RANDOM_BYTES", u"RELEASE_LOCK", 
                      u"REVERSE", u"ROUND", u"ROW_COUNT", u"RPAD", u"RTRIM", 
                      u"SEC_TO_TIME", u"SESSION_USER", u"SHA", u"SHA1", 
                      u"SHA2", u"SIGN", u"SIN", u"SLEEP", u"SOUNDEX", u"SQL_THREAD_WAIT_AFTER_GTIDS", 
                      u"SQRT", u"SRID", u"STARTPOINT", u"STRCMP", u"STR_TO_DATE", 
                      u"ST_AREA", u"ST_ASBINARY", u"ST_ASTEXT", u"ST_ASWKB", 
                      u"ST_ASWKT", u"ST_BUFFER", u"ST_CENTROID", u"ST_CONTAINS", 
                      u"ST_CROSSES", u"ST_DIFFERENCE", u"ST_DIMENSION", 
                      u"ST_DISJOINT", u"ST_DISTANCE", u"ST_ENDPOINT", u"ST_ENVELOPE", 
                      u"ST_EQUALS", u"ST_EXTERIORRING", u"ST_GEOMCOLLFROMTEXT", 
                      u"ST_GEOMCOLLFROMTXT", u"ST_GEOMCOLLFROMWKB", u"ST_GEOMETRYCOLLECTIONFROMTEXT", 
                      u"ST_GEOMETRYCOLLECTIONFROMWKB", u"ST_GEOMETRYFROMTEXT", 
                      u"ST_GEOMETRYFROMWKB", u"ST_GEOMETRYN", u"ST_GEOMETRYTYPE", 
                      u"ST_GEOMFROMTEXT", u"ST_GEOMFROMWKB", u"ST_INTERIORRINGN", 
                      u"ST_INTERSECTION", u"ST_INTERSECTS", u"ST_ISCLOSED", 
                      u"ST_ISEMPTY", u"ST_ISSIMPLE", u"ST_LINEFROMTEXT", 
                      u"ST_LINEFROMWKB", u"ST_LINESTRINGFROMTEXT", u"ST_LINESTRINGFROMWKB", 
                      u"ST_NUMGEOMETRIES", u"ST_NUMINTERIORRING", u"ST_NUMINTERIORRINGS", 
                      u"ST_NUMPOINTS", u"ST_OVERLAPS", u"ST_POINTFROMTEXT", 
                      u"ST_POINTFROMWKB", u"ST_POINTN", u"ST_POLYFROMTEXT", 
                      u"ST_POLYFROMWKB", u"ST_POLYGONFROMTEXT", u"ST_POLYGONFROMWKB", 
                      u"ST_SRID", u"ST_STARTPOINT", u"ST_SYMDIFFERENCE", 
                      u"ST_TOUCHES", u"ST_UNION", u"ST_WITHIN", u"ST_X", 
                      u"ST_Y", u"SUBDATE", u"SUBSTRING_INDEX", u"SUBTIME", 
                      u"SYSTEM_USER", u"TAN", u"TIMEDIFF", u"TIMESTAMPADD", 
                      u"TIMESTAMPDIFF", u"TIME_FORMAT", u"TIME_TO_SEC", 
                      u"TOUCHES", u"TO_BASE64", u"TO_DAYS", u"TO_SECONDS", 
                      u"UCASE", u"UNCOMPRESS", u"UNCOMPRESSED_LENGTH", u"UNHEX", 
                      u"UNIX_TIMESTAMP", u"UPDATEXML", u"UPPER", u"UUID", 
                      u"UUID_SHORT", u"VALIDATE_PASSWORD_STRENGTH", u"VERSION", 
                      u"WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", u"WEEKDAY", 
                      u"WEEKOFYEAR", u"WEIGHT_STRING", u"WITHIN", u"YEARWEEK", 
                      u"Y_FUNCTION", u"X_FUNCTION", u"VAR_ASSIGN", u"PLUS_ASSIGN", 
                      u"MINUS_ASSIGN", u"MULT_ASSIGN", u"DIV_ASSIGN", u"MOD_ASSIGN", 
                      u"AND_ASSIGN", u"XOR_ASSIGN", u"OR_ASSIGN", u"STAR", 
                      u"DIVIDE", u"MODULE", u"PLUS", u"MINUSMINUS", u"MINUS", 
                      u"DIV", u"MOD", u"EQUAL_SYMBOL", u"GREATER_SYMBOL", 
                      u"LESS_SYMBOL", u"EXCLAMATION_SYMBOL", u"BIT_NOT_OP", 
                      u"BIT_OR_OP", u"BIT_AND_OP", u"BIT_XOR_OP", u"DOT", 
                      u"LR_BRACKET", u"RR_BRACKET", u"COMMA", u"SEMI", u"AT_SIGN", 
                      u"ZERO_DECIMAL", u"ONE_DECIMAL", u"TWO_DECIMAL", u"SINGLE_QUOTE_SYMB", 
                      u"DOUBLE_QUOTE_SYMB", u"REVERSE_QUOTE_SYMB", u"COLON_SYMB", 
                      u"CHARSET_REVERSE_QOUTE_STRING", u"FILESIZE_LITERAL", 
                      u"START_NATIONAL_STRING_LITERAL", u"STRING_LITERAL", 
                      u"DECIMAL_LITERAL", u"HEXADECIMAL_LITERAL", u"REAL_LITERAL", 
                      u"NULL_SPEC_LITERAL", u"BIT_STRING", u"STRING_CHARSET_NAME", 
                      u"DOT_ID", u"ID", u"REVERSE_QUOTE_ID", u"STRING_USER_NAME", 
                      u"LOCAL_ID", u"GLOBAL_ID", u"ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createServer = 18
    RULE_createTable = 19
    RULE_createTablespaceInnodb = 20
    RULE_createTablespaceNdb = 21
    RULE_createTrigger = 22
    RULE_createView = 23
    RULE_createDatabaseOption = 24
    RULE_ownerStatement = 25
    RULE_scheduleExpression = 26
    RULE_timestampValue = 27
    RULE_intervalExpr = 28
    RULE_intervalType = 29
    RULE_enableType = 30
    RULE_indexType = 31
    RULE_indexOption = 32
    RULE_procedureParameter = 33
    RULE_functionParameter = 34
    RULE_routineOption = 35
    RULE_serverOption = 36
    RULE_createDefinitions = 37
    RULE_createDefinition = 38
    RULE_columnDefinition = 39
    RULE_columnConstraint = 40
    RULE_tableConstraint = 41
    RULE_referenceDefinition = 42
    RULE_referenceAction = 43
    RULE_referenceControlType = 44
    RULE_indexColumnDefinition = 45
    RULE_tableOption = 46
    RULE_tablespaceStorage = 47
    RULE_partitionDefinitions = 48
    RULE_partitionFunctionDefinition = 49
    RULE_subpartitionFunctionDefinition = 50
    RULE_partitionDefinition = 51
    RULE_partitionDefinerAtom = 52
    RULE_partitionDefinerVector = 53
    RULE_subpartitionDefinition = 54
    RULE_partitionOption = 55
    RULE_alterDatabase = 56
    RULE_alterEvent = 57
    RULE_alterFunction = 58
    RULE_alterInstance = 59
    RULE_alterLogfileGroup = 60
    RULE_alterProcedure = 61
    RULE_alterServer = 62
    RULE_alterTable = 63
    RULE_alterTablespace = 64
    RULE_alterView = 65
    RULE_alterSpecification = 66
    RULE_dropDatabase = 67
    RULE_dropEvent = 68
    RULE_dropIndex = 69
    RULE_dropLogfileGroup = 70
    RULE_dropProcedure = 71
    RULE_dropFunction = 72
    RULE_dropServer = 73
    RULE_dropTable = 74
    RULE_dropTablespace = 75
    RULE_dropTrigger = 76
    RULE_dropView = 77
    RULE_renameTable = 78
    RULE_renameTableClause = 79
    RULE_truncateTable = 80
    RULE_callStatement = 81
    RULE_deleteStatement = 82
    RULE_doStatement = 83
    RULE_handlerStatement = 84
    RULE_insertStatement = 85
    RULE_loadDataStatement = 86
    RULE_loadXmlStatement = 87
    RULE_replaceStatement = 88
    RULE_selectStatement = 89
    RULE_updateStatement = 90
    RULE_insertStatementValue = 91
    RULE_updatedElement = 92
    RULE_assignmentField = 93
    RULE_lockClause = 94
    RULE_singleDeleteStatement = 95
    RULE_multipleDeleteStatement = 96
    RULE_handlerOpenStatement = 97
    RULE_handlerReadIndexStatement = 98
    RULE_handlerReadStatement = 99
    RULE_handlerCloseStatement = 100
    RULE_singleUpdateStatement = 101
    RULE_multipleUpdateStatement = 102
    RULE_orderByClause = 103
    RULE_orderByExpression = 104
    RULE_tableSources = 105
    RULE_tableSource = 106
    RULE_tableSourceItem = 107
    RULE_indexHint = 108
    RULE_indexHintType = 109
    RULE_joinPart = 110
    RULE_queryExpression = 111
    RULE_queryExpressionNointo = 112
    RULE_querySpecification = 113
    RULE_querySpecificationNointo = 114
    RULE_unionParenthesis = 115
    RULE_unionStatement = 116
    RULE_selectSpec = 117
    RULE_selectElements = 118
    RULE_selectElement = 119
    RULE_selectIntoExpression = 120
    RULE_selectFieldsInto = 121
    RULE_selectLinesInto = 122
    RULE_fromClause = 123
    RULE_groupByItem = 124
    RULE_limitClause = 125
    RULE_startTransaction = 126
    RULE_beginWork = 127
    RULE_commitWork = 128
    RULE_rollbackWork = 129
    RULE_savepointStatement = 130
    RULE_rollbackStatement = 131
    RULE_releaseStatement = 132
    RULE_lockTables = 133
    RULE_unlockTables = 134
    RULE_setAutocommitStatement = 135
    RULE_setTransactionStatement = 136
    RULE_transactionMode = 137
    RULE_lockTableElement = 138
    RULE_lockAction = 139
    RULE_transactionOption = 140
    RULE_transactionLevel = 141
    RULE_changeMaster = 142
    RULE_changeReplicationFilter = 143
    RULE_purgeBinaryLogs = 144
    RULE_resetMaster = 145
    RULE_resetSlave = 146
    RULE_startSlave = 147
    RULE_stopSlave = 148
    RULE_startGroupReplication = 149
    RULE_stopGroupReplication = 150
    RULE_masterOption = 151
    RULE_stringMasterOption = 152
    RULE_decimalMasterOption = 153
    RULE_boolMasterOption = 154
    RULE_channelOption = 155
    RULE_replicationFilter = 156
    RULE_tablePair = 157
    RULE_threadType = 158
    RULE_untilOption = 159
    RULE_connectionOption = 160
    RULE_gtuidSet = 161
    RULE_xaStartTransaction = 162
    RULE_xaEndTransaction = 163
    RULE_xaPrepareStatement = 164
    RULE_xaCommitWork = 165
    RULE_xaRollbackWork = 166
    RULE_xaRecoverWork = 167
    RULE_prepareStatement = 168
    RULE_executeStatement = 169
    RULE_deallocatePrepare = 170
    RULE_routineBody = 171
    RULE_blockStatement = 172
    RULE_caseStatement = 173
    RULE_ifStatement = 174
    RULE_iterateStatement = 175
    RULE_leaveStatement = 176
    RULE_loopStatement = 177
    RULE_repeatStatement = 178
    RULE_returnStatement = 179
    RULE_whileStatement = 180
    RULE_cursorStatement = 181
    RULE_declareVariable = 182
    RULE_declareCondition = 183
    RULE_declareCursor = 184
    RULE_declareHandler = 185
    RULE_handlerConditionValue = 186
    RULE_procedureSqlStatement = 187
    RULE_caseAlternative = 188
    RULE_elifAlternative = 189
    RULE_alterUser = 190
    RULE_createUser = 191
    RULE_dropUser = 192
    RULE_grantStatement = 193
    RULE_grantProxy = 194
    RULE_renameUser = 195
    RULE_revokeStatement = 196
    RULE_revokeProxy = 197
    RULE_setPasswordStatement = 198
    RULE_userSpecification = 199
    RULE_userAuthOption = 200
    RULE_tlsOption = 201
    RULE_userResourceOption = 202
    RULE_userPasswordOption = 203
    RULE_userLockOption = 204
    RULE_privelegeClause = 205
    RULE_privilege = 206
    RULE_privilegeLevel = 207
    RULE_renameUserClause = 208
    RULE_analyzeTable = 209
    RULE_checkTable = 210
    RULE_checksumTable = 211
    RULE_optimizeTable = 212
    RULE_repairTable = 213
    RULE_checkTableOption = 214
    RULE_createUdfunction = 215
    RULE_installPlugin = 216
    RULE_uninstallPlugin = 217
    RULE_setStatement = 218
    RULE_showStatement = 219
    RULE_variableClause = 220
    RULE_showCommonEntity = 221
    RULE_showFilter = 222
    RULE_showGlobalInfoClause = 223
    RULE_showSchemaEntity = 224
    RULE_showProfileType = 225
    RULE_binlogStatement = 226
    RULE_cacheIndexStatement = 227
    RULE_flushStatement = 228
    RULE_killStatement = 229
    RULE_loadIndexIntoCache = 230
    RULE_resetStatement = 231
    RULE_shutdownStatement = 232
    RULE_tableIndexes = 233
    RULE_flushOption = 234
    RULE_flushTableOption = 235
    RULE_loadedTableIndexes = 236
    RULE_simpleDescribeStatement = 237
    RULE_fullDescribeStatement = 238
    RULE_helpStatement = 239
    RULE_useStatement = 240
    RULE_describeObjectClause = 241
    RULE_fullId = 242
    RULE_tableName = 243
    RULE_fullColumnName = 244
    RULE_indexColumnName = 245
    RULE_userName = 246
    RULE_mysqlVariable = 247
    RULE_charsetName = 248
    RULE_collationName = 249
    RULE_engineName = 250
    RULE_uuidSet = 251
    RULE_xid = 252
    RULE_xuidStringId = 253
    RULE_authPlugin = 254
    RULE_uid = 255
    RULE_simpleId = 256
    RULE_dottedId = 257
    RULE_decimalLiteral = 258
    RULE_fileSizeLiteral = 259
    RULE_stringLiteral = 260
    RULE_booleanLiteral = 261
    RULE_hexadecimalLiteral = 262
    RULE_nullNotnull = 263
    RULE_constant = 264
    RULE_dataType = 265
    RULE_convertedDataType = 266
    RULE_lengthOneDimension = 267
    RULE_lengthTwoDimension = 268
    RULE_lengthTwoOptionalDimension = 269
    RULE_uidList = 270
    RULE_tables = 271
    RULE_indexColumnNames = 272
    RULE_expressions = 273
    RULE_expressionsWithDefaults = 274
    RULE_constants = 275
    RULE_simpleStrings = 276
    RULE_userVariables = 277
    RULE_defaultValue = 278
    RULE_currentTimestamp = 279
    RULE_expressionOrDefault = 280
    RULE_ifExists = 281
    RULE_ifNotExists = 282
    RULE_functionCall = 283
    RULE_specificFunction = 284
    RULE_caseFuncAlternative = 285
    RULE_levelsInWeightString = 286
    RULE_levelInWeightListElement = 287
    RULE_aggregateWindowedFunction = 288
    RULE_scalarFunctionName = 289
    RULE_passwordFunctionClause = 290
    RULE_functionArgs = 291
    RULE_functionArg = 292
    RULE_expression = 293
    RULE_predicate = 294
    RULE_expressionAtom = 295
    RULE_unaryOperator = 296
    RULE_comparisonOperator = 297
    RULE_logicalOperator = 298
    RULE_bitOperator = 299
    RULE_mathOperator = 300
    RULE_charsetNameBase = 301
    RULE_transactionLevelBase = 302
    RULE_privilegesBase = 303
    RULE_intervalTypeBase = 304
    RULE_dataTypeBase = 305
    RULE_keywordsCanBeId = 306
    RULE_functionNameBase = 307

    ruleNames =  [ u"root", u"sqlStatements", u"sqlStatement", u"emptyStatement", 
                   u"ddlStatement", u"dmlStatement", u"transactionStatement", 
                   u"replicationStatement", u"preparedStatement", u"compoundStatement", 
                   u"administrationStatement", u"utilityStatement", u"createDatabase", 
                   u"createEvent", u"createIndex", u"createLogfileGroup", 
                   u"createProcedure", u"createFunction", u"createServer", 
                   u"createTable", u"createTablespaceInnodb", u"createTablespaceNdb", 
                   u"createTrigger", u"createView", u"createDatabaseOption", 
                   u"ownerStatement", u"scheduleExpression", u"timestampValue", 
                   u"intervalExpr", u"intervalType", u"enableType", u"indexType", 
                   u"indexOption", u"procedureParameter", u"functionParameter", 
                   u"routineOption", u"serverOption", u"createDefinitions", 
                   u"createDefinition", u"columnDefinition", u"columnConstraint", 
                   u"tableConstraint", u"referenceDefinition", u"referenceAction", 
                   u"referenceControlType", u"indexColumnDefinition", u"tableOption", 
                   u"tablespaceStorage", u"partitionDefinitions", u"partitionFunctionDefinition", 
                   u"subpartitionFunctionDefinition", u"partitionDefinition", 
                   u"partitionDefinerAtom", u"partitionDefinerVector", u"subpartitionDefinition", 
                   u"partitionOption", u"alterDatabase", u"alterEvent", 
                   u"alterFunction", u"alterInstance", u"alterLogfileGroup", 
                   u"alterProcedure", u"alterServer", u"alterTable", u"alterTablespace", 
                   u"alterView", u"alterSpecification", u"dropDatabase", 
                   u"dropEvent", u"dropIndex", u"dropLogfileGroup", u"dropProcedure", 
                   u"dropFunction", u"dropServer", u"dropTable", u"dropTablespace", 
                   u"dropTrigger", u"dropView", u"renameTable", u"renameTableClause", 
                   u"truncateTable", u"callStatement", u"deleteStatement", 
                   u"doStatement", u"handlerStatement", u"insertStatement", 
                   u"loadDataStatement", u"loadXmlStatement", u"replaceStatement", 
                   u"selectStatement", u"updateStatement", u"insertStatementValue", 
                   u"updatedElement", u"assignmentField", u"lockClause", 
                   u"singleDeleteStatement", u"multipleDeleteStatement", 
                   u"handlerOpenStatement", u"handlerReadIndexStatement", 
                   u"handlerReadStatement", u"handlerCloseStatement", u"singleUpdateStatement", 
                   u"multipleUpdateStatement", u"orderByClause", u"orderByExpression", 
                   u"tableSources", u"tableSource", u"tableSourceItem", 
                   u"indexHint", u"indexHintType", u"joinPart", u"queryExpression", 
                   u"queryExpressionNointo", u"querySpecification", u"querySpecificationNointo", 
                   u"unionParenthesis", u"unionStatement", u"selectSpec", 
                   u"selectElements", u"selectElement", u"selectIntoExpression", 
                   u"selectFieldsInto", u"selectLinesInto", u"fromClause", 
                   u"groupByItem", u"limitClause", u"startTransaction", 
                   u"beginWork", u"commitWork", u"rollbackWork", u"savepointStatement", 
                   u"rollbackStatement", u"releaseStatement", u"lockTables", 
                   u"unlockTables", u"setAutocommitStatement", u"setTransactionStatement", 
                   u"transactionMode", u"lockTableElement", u"lockAction", 
                   u"transactionOption", u"transactionLevel", u"changeMaster", 
                   u"changeReplicationFilter", u"purgeBinaryLogs", u"resetMaster", 
                   u"resetSlave", u"startSlave", u"stopSlave", u"startGroupReplication", 
                   u"stopGroupReplication", u"masterOption", u"stringMasterOption", 
                   u"decimalMasterOption", u"boolMasterOption", u"channelOption", 
                   u"replicationFilter", u"tablePair", u"threadType", u"untilOption", 
                   u"connectionOption", u"gtuidSet", u"xaStartTransaction", 
                   u"xaEndTransaction", u"xaPrepareStatement", u"xaCommitWork", 
                   u"xaRollbackWork", u"xaRecoverWork", u"prepareStatement", 
                   u"executeStatement", u"deallocatePrepare", u"routineBody", 
                   u"blockStatement", u"caseStatement", u"ifStatement", 
                   u"iterateStatement", u"leaveStatement", u"loopStatement", 
                   u"repeatStatement", u"returnStatement", u"whileStatement", 
                   u"cursorStatement", u"declareVariable", u"declareCondition", 
                   u"declareCursor", u"declareHandler", u"handlerConditionValue", 
                   u"procedureSqlStatement", u"caseAlternative", u"elifAlternative", 
                   u"alterUser", u"createUser", u"dropUser", u"grantStatement", 
                   u"grantProxy", u"renameUser", u"revokeStatement", u"revokeProxy", 
                   u"setPasswordStatement", u"userSpecification", u"userAuthOption", 
                   u"tlsOption", u"userResourceOption", u"userPasswordOption", 
                   u"userLockOption", u"privelegeClause", u"privilege", 
                   u"privilegeLevel", u"renameUserClause", u"analyzeTable", 
                   u"checkTable", u"checksumTable", u"optimizeTable", u"repairTable", 
                   u"checkTableOption", u"createUdfunction", u"installPlugin", 
                   u"uninstallPlugin", u"setStatement", u"showStatement", 
                   u"variableClause", u"showCommonEntity", u"showFilter", 
                   u"showGlobalInfoClause", u"showSchemaEntity", u"showProfileType", 
                   u"binlogStatement", u"cacheIndexStatement", u"flushStatement", 
                   u"killStatement", u"loadIndexIntoCache", u"resetStatement", 
                   u"shutdownStatement", u"tableIndexes", u"flushOption", 
                   u"flushTableOption", u"loadedTableIndexes", u"simpleDescribeStatement", 
                   u"fullDescribeStatement", u"helpStatement", u"useStatement", 
                   u"describeObjectClause", u"fullId", u"tableName", u"fullColumnName", 
                   u"indexColumnName", u"userName", u"mysqlVariable", u"charsetName", 
                   u"collationName", u"engineName", u"uuidSet", u"xid", 
                   u"xuidStringId", u"authPlugin", u"uid", u"simpleId", 
                   u"dottedId", u"decimalLiteral", u"fileSizeLiteral", u"stringLiteral", 
                   u"booleanLiteral", u"hexadecimalLiteral", u"nullNotnull", 
                   u"constant", u"dataType", u"convertedDataType", u"lengthOneDimension", 
                   u"lengthTwoDimension", u"lengthTwoOptionalDimension", 
                   u"uidList", u"tables", u"indexColumnNames", u"expressions", 
                   u"expressionsWithDefaults", u"constants", u"simpleStrings", 
                   u"userVariables", u"defaultValue", u"currentTimestamp", 
                   u"expressionOrDefault", u"ifExists", u"ifNotExists", 
                   u"functionCall", u"specificFunction", u"caseFuncAlternative", 
                   u"levelsInWeightString", u"levelInWeightListElement", 
                   u"aggregateWindowedFunction", u"scalarFunctionName", 
                   u"passwordFunctionClause", u"functionArgs", u"functionArg", 
                   u"expression", u"predicate", u"expressionAtom", u"unaryOperator", 
                   u"comparisonOperator", u"logicalOperator", u"bitOperator", 
                   u"mathOperator", u"charsetNameBase", u"transactionLevelBase", 
                   u"privilegesBase", u"intervalTypeBase", u"dataTypeBase", 
                   u"keywordsCanBeId", u"functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ADD=5
    ALL=6
    ALTER=7
    ANALYZE=8
    AND=9
    AS=10
    ASC=11
    BEFORE=12
    BETWEEN=13
    BOTH=14
    BY=15
    CALL=16
    CASCADE=17
    CASE=18
    CAST=19
    CHANGE=20
    CHARACTER=21
    CHECK=22
    COLLATE=23
    COLUMN=24
    CONDITION=25
    CONSTRAINT=26
    CONTINUE=27
    CONVERT=28
    CREATE=29
    CROSS=30
    CURRENT_USER=31
    CURSOR=32
    DATABASE=33
    DATABASES=34
    DECLARE=35
    DEFAULT=36
    DELAYED=37
    DELETE=38
    DESC=39
    DESCRIBE=40
    DETERMINISTIC=41
    DISTINCT=42
    DISTINCTROW=43
    DROP=44
    EACH=45
    ELSE=46
    ELSEIF=47
    ENCLOSED=48
    ESCAPED=49
    EXISTS=50
    EXIT=51
    EXPLAIN=52
    FALSE=53
    FETCH=54
    FOR=55
    FORCE=56
    FOREIGN=57
    FROM=58
    FULLTEXT=59
    GRANT=60
    GROUP=61
    HAVING=62
    HIGH_PRIORITY=63
    IF=64
    IGNORE=65
    IN=66
    INDEX=67
    INFILE=68
    INNER=69
    INOUT=70
    INSERT=71
    INTERVAL=72
    INTO=73
    IS=74
    ITERATE=75
    JOIN=76
    KEY=77
    KEYS=78
    KILL=79
    LEADING=80
    LEAVE=81
    LEFT=82
    LIKE=83
    LIMIT=84
    LINEAR=85
    LINES=86
    LOAD=87
    LOCK=88
    LOOP=89
    LOW_PRIORITY=90
    MASTER_BIND=91
    MASTER_SSL_VERIFY_SERVER_CERT=92
    MATCH=93
    MAXVALUE=94
    MODIFIES=95
    NATURAL=96
    NOT=97
    NO_WRITE_TO_BINLOG=98
    NULL_LITERAL=99
    ON=100
    OPTIMIZE=101
    OPTION=102
    OPTIONALLY=103
    OR=104
    ORDER=105
    OUT=106
    OUTER=107
    OUTFILE=108
    PARTITION=109
    PRIMARY=110
    PROCEDURE=111
    PURGE=112
    RANGE=113
    READ=114
    READS=115
    REFERENCES=116
    REGEXP=117
    RELEASE=118
    RENAME=119
    REPEAT=120
    REPLACE=121
    REQUIRE=122
    RESTRICT=123
    RETURN=124
    REVOKE=125
    RIGHT=126
    RLIKE=127
    SCHEMA=128
    SCHEMAS=129
    SELECT=130
    SET=131
    SEPARATOR=132
    SHOW=133
    SPATIAL=134
    SQL=135
    SQLEXCEPTION=136
    SQLSTATE=137
    SQLWARNING=138
    SQL_BIG_RESULT=139
    SQL_CALC_FOUND_ROWS=140
    SQL_SMALL_RESULT=141
    SSL=142
    STARTING=143
    STRAIGHT_JOIN=144
    TABLE=145
    TERMINATED=146
    THEN=147
    TO=148
    TRAILING=149
    TRIGGER=150
    TRUE=151
    UNDO=152
    UNION=153
    UNIQUE=154
    UNLOCK=155
    UNSIGNED=156
    UPDATE=157
    USAGE=158
    USE=159
    USING=160
    VALUES=161
    WHEN=162
    WHERE=163
    WHILE=164
    WITH=165
    WRITE=166
    XOR=167
    ZEROFILL=168
    TINYINT=169
    SMALLINT=170
    MEDIUMINT=171
    INT=172
    INTEGER=173
    BIGINT=174
    REAL=175
    DOUBLE=176
    FLOAT=177
    DECIMAL=178
    NUMERIC=179
    DATE=180
    TIME=181
    TIMESTAMP=182
    DATETIME=183
    YEAR=184
    CHAR=185
    VARCHAR=186
    BINARY=187
    VARBINARY=188
    TINYBLOB=189
    BLOB=190
    MEDIUMBLOB=191
    LONGBLOB=192
    TINYTEXT=193
    TEXT=194
    MEDIUMTEXT=195
    LONGTEXT=196
    ENUM=197
    YEAR_MONTH=198
    DAY_HOUR=199
    DAY_MINUTE=200
    DAY_SECOND=201
    HOUR_MINUTE=202
    HOUR_SECOND=203
    MINUTE_SECOND=204
    SECOND_MICROSECOND=205
    MINUTE_MICROSECOND=206
    HOUR_MICROSECOND=207
    DAY_MICROSECOND=208
    AVG=209
    BIT_AND=210
    BIT_OR=211
    BIT_XOR=212
    COUNT=213
    GROUP_CONCAT=214
    MAX=215
    MIN=216
    STD=217
    STDDEV=218
    STDDEV_POP=219
    STDDEV_SAMP=220
    SUM=221
    VAR_POP=222
    VAR_SAMP=223
    VARIANCE=224
    CURRENT_DATE=225
    CURRENT_TIME=226
    CURRENT_TIMESTAMP=227
    LOCALTIME=228
    CURDATE=229
    CURTIME=230
    DATE_ADD=231
    DATE_SUB=232
    EXTRACT=233
    LOCALTIMESTAMP=234
    NOW=235
    POSITION=236
    SUBSTR=237
    SUBSTRING=238
    SYSDATE=239
    TRIM=240
    UTC_DATE=241
    UTC_TIME=242
    UTC_TIMESTAMP=243
    ACCOUNT=244
    ACTION=245
    AFTER=246
    AGGREGATE=247
    ALGORITHM=248
    ANY=249
    AT=250
    AUTHORS=251
    AUTOCOMMIT=252
    AUTOEXTEND_SIZE=253
    AUTO_INCREMENT=254
    AVG_ROW_LENGTH=255
    BEGIN=256
    BINLOG=257
    BIT=258
    BLOCK=259
    BOOL=260
    BOOLEAN=261
    BTREE=262
    CACHE=263
    CASCADED=264
    CHAIN=265
    CHANGED=266
    CHANNEL=267
    CHECKSUM=268
    CIPHER=269
    CLIENT=270
    CLOSE=271
    COALESCE=272
    CODE=273
    COLUMNS=274
    COLUMN_FORMAT=275
    COMMENT=276
    COMMIT=277
    COMPACT=278
    COMPLETION=279
    COMPRESSED=280
    COMPRESSION=281
    CONCURRENT=282
    CONNECTION=283
    CONSISTENT=284
    CONTAINS=285
    CONTEXT=286
    CONTRIBUTORS=287
    COPY=288
    CPU=289
    DATA=290
    DATAFILE=291
    DEALLOCATE=292
    DEFAULT_AUTH=293
    DEFINER=294
    DELAY_KEY_WRITE=295
    DES_KEY_FILE=296
    DIRECTORY=297
    DISABLE=298
    DISCARD=299
    DISK=300
    DO=301
    DUMPFILE=302
    DUPLICATE=303
    DYNAMIC=304
    ENABLE=305
    ENCRYPTION=306
    END=307
    ENDS=308
    ENGINE=309
    ENGINES=310
    ERROR=311
    ERRORS=312
    ESCAPE=313
    EVEN=314
    EVENT=315
    EVENTS=316
    EVERY=317
    EXCHANGE=318
    EXCLUSIVE=319
    EXPIRE=320
    EXPORT=321
    EXTENDED=322
    EXTENT_SIZE=323
    FAST=324
    FAULTS=325
    FIELDS=326
    FILE_BLOCK_SIZE=327
    FILTER=328
    FIRST=329
    FIXED=330
    FLUSH=331
    FOLLOWS=332
    FOUND=333
    FULL=334
    FUNCTION=335
    GENERAL=336
    GLOBAL=337
    GRANTS=338
    GROUP_REPLICATION=339
    HANDLER=340
    HASH=341
    HELP=342
    HOST=343
    HOSTS=344
    IDENTIFIED=345
    IGNORE_SERVER_IDS=346
    IMPORT=347
    INDEXES=348
    INITIAL_SIZE=349
    INPLACE=350
    INSERT_METHOD=351
    INSTALL=352
    INSTANCE=353
    INVOKER=354
    IO=355
    IO_THREAD=356
    IPC=357
    ISOLATION=358
    ISSUER=359
    JSON=360
    KEY_BLOCK_SIZE=361
    LANGUAGE=362
    LAST=363
    LEAVES=364
    LESS=365
    LEVEL=366
    LIST=367
    LOCAL=368
    LOGFILE=369
    LOGS=370
    MASTER=371
    MASTER_AUTO_POSITION=372
    MASTER_CONNECT_RETRY=373
    MASTER_DELAY=374
    MASTER_HEARTBEAT_PERIOD=375
    MASTER_HOST=376
    MASTER_LOG_FILE=377
    MASTER_LOG_POS=378
    MASTER_PASSWORD=379
    MASTER_PORT=380
    MASTER_RETRY_COUNT=381
    MASTER_SSL=382
    MASTER_SSL_CA=383
    MASTER_SSL_CAPATH=384
    MASTER_SSL_CERT=385
    MASTER_SSL_CIPHER=386
    MASTER_SSL_CRL=387
    MASTER_SSL_CRLPATH=388
    MASTER_SSL_KEY=389
    MASTER_TLS_VERSION=390
    MASTER_USER=391
    MAX_CONNECTIONS_PER_HOUR=392
    MAX_QUERIES_PER_HOUR=393
    MAX_ROWS=394
    MAX_SIZE=395
    MAX_UPDATES_PER_HOUR=396
    MAX_USER_CONNECTIONS=397
    MEDIUM=398
    MERGE=399
    MID=400
    MIGRATE=401
    MIN_ROWS=402
    MODE=403
    MODIFY=404
    MUTEX=405
    MYSQL=406
    NAME=407
    NAMES=408
    NCHAR=409
    NEVER=410
    NEXT=411
    NO=412
    NODEGROUP=413
    NONE=414
    OFFLINE=415
    OFFSET=416
    OJ=417
    OLD_PASSWORD=418
    ONE=419
    ONLINE=420
    ONLY=421
    OPEN=422
    OPTIMIZER_COSTS=423
    OPTIONS=424
    OWNER=425
    PACK_KEYS=426
    PAGE=427
    PARSER=428
    PARTIAL=429
    PARTITIONING=430
    PARTITIONS=431
    PASSWORD=432
    PHASE=433
    PLUGIN=434
    PLUGIN_DIR=435
    PLUGINS=436
    PORT=437
    PRECEDES=438
    PREPARE=439
    PRESERVE=440
    PREV=441
    PROCESSLIST=442
    PROFILE=443
    PROFILES=444
    PROXY=445
    QUERY=446
    QUICK=447
    REBUILD=448
    RECOVER=449
    REDO_BUFFER_SIZE=450
    REDUNDANT=451
    RELAY=452
    RELAY_LOG_FILE=453
    RELAY_LOG_POS=454
    RELAYLOG=455
    REMOVE=456
    REORGANIZE=457
    REPAIR=458
    REPLICATE_DO_DB=459
    REPLICATE_DO_TABLE=460
    REPLICATE_IGNORE_DB=461
    REPLICATE_IGNORE_TABLE=462
    REPLICATE_REWRITE_DB=463
    REPLICATE_WILD_DO_TABLE=464
    REPLICATE_WILD_IGNORE_TABLE=465
    REPLICATION=466
    RESET=467
    RESUME=468
    RETURNS=469
    ROLLBACK=470
    ROLLUP=471
    ROTATE=472
    ROW=473
    ROWS=474
    ROW_FORMAT=475
    SAVEPOINT=476
    SCHEDULE=477
    SECURITY=478
    SERVER=479
    SESSION=480
    SHARE=481
    SHARED=482
    SIGNED=483
    SIMPLE=484
    SLAVE=485
    SLOW=486
    SNAPSHOT=487
    SOCKET=488
    SOME=489
    SONAME=490
    SOUNDS=491
    SOURCE=492
    SQL_AFTER_GTIDS=493
    SQL_AFTER_MTS_GAPS=494
    SQL_BEFORE_GTIDS=495
    SQL_BUFFER_RESULT=496
    SQL_CACHE=497
    SQL_NO_CACHE=498
    SQL_THREAD=499
    START=500
    STARTS=501
    STATS_AUTO_RECALC=502
    STATS_PERSISTENT=503
    STATS_SAMPLE_PAGES=504
    STATUS=505
    STOP=506
    STORAGE=507
    STRING=508
    SUBJECT=509
    SUBPARTITION=510
    SUBPARTITIONS=511
    SUSPEND=512
    SWAPS=513
    SWITCHES=514
    TABLESPACE=515
    TEMPORARY=516
    TEMPTABLE=517
    THAN=518
    TRADITIONAL=519
    TRANSACTION=520
    TRIGGERS=521
    TRUNCATE=522
    UNDEFINED=523
    UNDOFILE=524
    UNDO_BUFFER_SIZE=525
    UNINSTALL=526
    UNKNOWN=527
    UNTIL=528
    UPGRADE=529
    USER=530
    USE_FRM=531
    USER_RESOURCES=532
    VALIDATION=533
    VALUE=534
    VARIABLES=535
    VIEW=536
    WAIT=537
    WARNINGS=538
    WITHOUT=539
    WORK=540
    WRAPPER=541
    X509=542
    XA=543
    XML=544
    EUR=545
    USA=546
    JIS=547
    ISO=548
    INTERNAL=549
    QUARTER=550
    MONTH=551
    DAY=552
    HOUR=553
    MINUTE=554
    WEEK=555
    SECOND=556
    MICROSECOND=557
    TABLES=558
    ROUTINE=559
    EXECUTE=560
    FILE=561
    PROCESS=562
    RELOAD=563
    SHUTDOWN=564
    SUPER=565
    PRIVILEGES=566
    ARMSCII8=567
    ASCII=568
    BIG5=569
    CP1250=570
    CP1251=571
    CP1256=572
    CP1257=573
    CP850=574
    CP852=575
    CP866=576
    CP932=577
    DEC8=578
    EUCJPMS=579
    EUCKR=580
    GB2312=581
    GBK=582
    GEOSTD8=583
    GREEK=584
    HEBREW=585
    HP8=586
    KEYBCS2=587
    KOI8R=588
    KOI8U=589
    LATIN1=590
    LATIN2=591
    LATIN5=592
    LATIN7=593
    MACCE=594
    MACROMAN=595
    SJIS=596
    SWE7=597
    TIS620=598
    UCS2=599
    UJIS=600
    UTF16=601
    UTF16LE=602
    UTF32=603
    UTF8=604
    UTF8MB3=605
    UTF8MB4=606
    ARCHIVE=607
    BLACKHOLE=608
    CSV=609
    FEDERATED=610
    INNODB=611
    MEMORY=612
    MRG_MYISAM=613
    MYISAM=614
    NDB=615
    NDBCLUSTER=616
    PERFOMANCE_SCHEMA=617
    REPEATABLE=618
    COMMITTED=619
    UNCOMMITTED=620
    SERIALIZABLE=621
    GEOMETRYCOLLECTION=622
    LINESTRING=623
    MULTILINESTRING=624
    MULTIPOINT=625
    MULTIPOLYGON=626
    POINT=627
    POLYGON=628
    ABS=629
    ACOS=630
    ADDDATE=631
    ADDTIME=632
    AES_DECRYPT=633
    AES_ENCRYPT=634
    AREA=635
    ASBINARY=636
    ASIN=637
    ASTEXT=638
    ASWKB=639
    ASWKT=640
    ASYMMETRIC_DECRYPT=641
    ASYMMETRIC_DERIVE=642
    ASYMMETRIC_ENCRYPT=643
    ASYMMETRIC_SIGN=644
    ASYMMETRIC_VERIFY=645
    ATAN=646
    ATAN2=647
    BENCHMARK=648
    BIN=649
    BIT_COUNT=650
    BIT_LENGTH=651
    BUFFER=652
    CEIL=653
    CEILING=654
    CENTROID=655
    CHARACTER_LENGTH=656
    CHARSET=657
    CHAR_LENGTH=658
    COERCIBILITY=659
    COLLATION=660
    COMPRESS=661
    CONCAT=662
    CONCAT_WS=663
    CONNECTION_ID=664
    CONV=665
    CONVERT_TZ=666
    COS=667
    COT=668
    CRC32=669
    CREATE_ASYMMETRIC_PRIV_KEY=670
    CREATE_ASYMMETRIC_PUB_KEY=671
    CREATE_DH_PARAMETERS=672
    CREATE_DIGEST=673
    CROSSES=674
    DATEDIFF=675
    DATE_FORMAT=676
    DAYNAME=677
    DAYOFMONTH=678
    DAYOFWEEK=679
    DAYOFYEAR=680
    DECODE=681
    DEGREES=682
    DES_DECRYPT=683
    DES_ENCRYPT=684
    DIMENSION=685
    DISJOINT=686
    ELT=687
    ENCODE=688
    ENCRYPT=689
    ENDPOINT=690
    ENVELOPE=691
    EQUALS=692
    EXP=693
    EXPORT_SET=694
    EXTERIORRING=695
    EXTRACTVALUE=696
    FIELD=697
    FIND_IN_SET=698
    FLOOR=699
    FORMAT=700
    FOUND_ROWS=701
    FROM_BASE64=702
    FROM_DAYS=703
    FROM_UNIXTIME=704
    GEOMCOLLFROMTEXT=705
    GEOMCOLLFROMWKB=706
    GEOMETRYCOLLECTIONFROMTEXT=707
    GEOMETRYCOLLECTIONFROMWKB=708
    GEOMETRYFROMTEXT=709
    GEOMETRYFROMWKB=710
    GEOMETRYN=711
    GEOMETRYTYPE=712
    GEOMFROMTEXT=713
    GEOMFROMWKB=714
    GET_FORMAT=715
    GET_LOCK=716
    GLENGTH=717
    GREATEST=718
    GTID_SUBSET=719
    GTID_SUBTRACT=720
    HEX=721
    IFNULL=722
    INET6_ATON=723
    INET6_NTOA=724
    INET_ATON=725
    INET_NTOA=726
    INSTR=727
    INTERIORRINGN=728
    INTERSECTS=729
    ISCLOSED=730
    ISEMPTY=731
    ISNULL=732
    ISSIMPLE=733
    IS_FREE_LOCK=734
    IS_IPV4=735
    IS_IPV4_COMPAT=736
    IS_IPV4_MAPPED=737
    IS_IPV6=738
    IS_USED_LOCK=739
    LAST_INSERT_ID=740
    LCASE=741
    LEAST=742
    LENGTH=743
    LINEFROMTEXT=744
    LINEFROMWKB=745
    LINESTRINGFROMTEXT=746
    LINESTRINGFROMWKB=747
    LN=748
    LOAD_FILE=749
    LOCATE=750
    LOG=751
    LOG10=752
    LOG2=753
    LOWER=754
    LPAD=755
    LTRIM=756
    MAKEDATE=757
    MAKETIME=758
    MAKE_SET=759
    MASTER_POS_WAIT=760
    MBRCONTAINS=761
    MBRDISJOINT=762
    MBREQUAL=763
    MBRINTERSECTS=764
    MBROVERLAPS=765
    MBRTOUCHES=766
    MBRWITHIN=767
    MD5=768
    MLINEFROMTEXT=769
    MLINEFROMWKB=770
    MONTHNAME=771
    MPOINTFROMTEXT=772
    MPOINTFROMWKB=773
    MPOLYFROMTEXT=774
    MPOLYFROMWKB=775
    MULTILINESTRINGFROMTEXT=776
    MULTILINESTRINGFROMWKB=777
    MULTIPOINTFROMTEXT=778
    MULTIPOINTFROMWKB=779
    MULTIPOLYGONFROMTEXT=780
    MULTIPOLYGONFROMWKB=781
    NAME_CONST=782
    NULLIF=783
    NUMGEOMETRIES=784
    NUMINTERIORRINGS=785
    NUMPOINTS=786
    OCT=787
    OCTET_LENGTH=788
    ORD=789
    OVERLAPS=790
    PERIOD_ADD=791
    PERIOD_DIFF=792
    PI=793
    POINTFROMTEXT=794
    POINTFROMWKB=795
    POINTN=796
    POLYFROMTEXT=797
    POLYFROMWKB=798
    POLYGONFROMTEXT=799
    POLYGONFROMWKB=800
    POW=801
    POWER=802
    QUOTE=803
    RADIANS=804
    RAND=805
    RANDOM_BYTES=806
    RELEASE_LOCK=807
    REVERSE=808
    ROUND=809
    ROW_COUNT=810
    RPAD=811
    RTRIM=812
    SEC_TO_TIME=813
    SESSION_USER=814
    SHA=815
    SHA1=816
    SHA2=817
    SIGN=818
    SIN=819
    SLEEP=820
    SOUNDEX=821
    SQL_THREAD_WAIT_AFTER_GTIDS=822
    SQRT=823
    SRID=824
    STARTPOINT=825
    STRCMP=826
    STR_TO_DATE=827
    ST_AREA=828
    ST_ASBINARY=829
    ST_ASTEXT=830
    ST_ASWKB=831
    ST_ASWKT=832
    ST_BUFFER=833
    ST_CENTROID=834
    ST_CONTAINS=835
    ST_CROSSES=836
    ST_DIFFERENCE=837
    ST_DIMENSION=838
    ST_DISJOINT=839
    ST_DISTANCE=840
    ST_ENDPOINT=841
    ST_ENVELOPE=842
    ST_EQUALS=843
    ST_EXTERIORRING=844
    ST_GEOMCOLLFROMTEXT=845
    ST_GEOMCOLLFROMTXT=846
    ST_GEOMCOLLFROMWKB=847
    ST_GEOMETRYCOLLECTIONFROMTEXT=848
    ST_GEOMETRYCOLLECTIONFROMWKB=849
    ST_GEOMETRYFROMTEXT=850
    ST_GEOMETRYFROMWKB=851
    ST_GEOMETRYN=852
    ST_GEOMETRYTYPE=853
    ST_GEOMFROMTEXT=854
    ST_GEOMFROMWKB=855
    ST_INTERIORRINGN=856
    ST_INTERSECTION=857
    ST_INTERSECTS=858
    ST_ISCLOSED=859
    ST_ISEMPTY=860
    ST_ISSIMPLE=861
    ST_LINEFROMTEXT=862
    ST_LINEFROMWKB=863
    ST_LINESTRINGFROMTEXT=864
    ST_LINESTRINGFROMWKB=865
    ST_NUMGEOMETRIES=866
    ST_NUMINTERIORRING=867
    ST_NUMINTERIORRINGS=868
    ST_NUMPOINTS=869
    ST_OVERLAPS=870
    ST_POINTFROMTEXT=871
    ST_POINTFROMWKB=872
    ST_POINTN=873
    ST_POLYFROMTEXT=874
    ST_POLYFROMWKB=875
    ST_POLYGONFROMTEXT=876
    ST_POLYGONFROMWKB=877
    ST_SRID=878
    ST_STARTPOINT=879
    ST_SYMDIFFERENCE=880
    ST_TOUCHES=881
    ST_UNION=882
    ST_WITHIN=883
    ST_X=884
    ST_Y=885
    SUBDATE=886
    SUBSTRING_INDEX=887
    SUBTIME=888
    SYSTEM_USER=889
    TAN=890
    TIMEDIFF=891
    TIMESTAMPADD=892
    TIMESTAMPDIFF=893
    TIME_FORMAT=894
    TIME_TO_SEC=895
    TOUCHES=896
    TO_BASE64=897
    TO_DAYS=898
    TO_SECONDS=899
    UCASE=900
    UNCOMPRESS=901
    UNCOMPRESSED_LENGTH=902
    UNHEX=903
    UNIX_TIMESTAMP=904
    UPDATEXML=905
    UPPER=906
    UUID=907
    UUID_SHORT=908
    VALIDATE_PASSWORD_STRENGTH=909
    VERSION=910
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=911
    WEEKDAY=912
    WEEKOFYEAR=913
    WEIGHT_STRING=914
    WITHIN=915
    YEARWEEK=916
    Y_FUNCTION=917
    X_FUNCTION=918
    VAR_ASSIGN=919
    PLUS_ASSIGN=920
    MINUS_ASSIGN=921
    MULT_ASSIGN=922
    DIV_ASSIGN=923
    MOD_ASSIGN=924
    AND_ASSIGN=925
    XOR_ASSIGN=926
    OR_ASSIGN=927
    STAR=928
    DIVIDE=929
    MODULE=930
    PLUS=931
    MINUSMINUS=932
    MINUS=933
    DIV=934
    MOD=935
    EQUAL_SYMBOL=936
    GREATER_SYMBOL=937
    LESS_SYMBOL=938
    EXCLAMATION_SYMBOL=939
    BIT_NOT_OP=940
    BIT_OR_OP=941
    BIT_AND_OP=942
    BIT_XOR_OP=943
    DOT=944
    LR_BRACKET=945
    RR_BRACKET=946
    COMMA=947
    SEMI=948
    AT_SIGN=949
    ZERO_DECIMAL=950
    ONE_DECIMAL=951
    TWO_DECIMAL=952
    SINGLE_QUOTE_SYMB=953
    DOUBLE_QUOTE_SYMB=954
    REVERSE_QUOTE_SYMB=955
    COLON_SYMB=956
    CHARSET_REVERSE_QOUTE_STRING=957
    FILESIZE_LITERAL=958
    START_NATIONAL_STRING_LITERAL=959
    STRING_LITERAL=960
    DECIMAL_LITERAL=961
    HEXADECIMAL_LITERAL=962
    REAL_LITERAL=963
    NULL_SPEC_LITERAL=964
    BIT_STRING=965
    STRING_CHARSET_NAME=966
    DOT_ID=967
    ID=968
    REVERSE_QUOTE_ID=969
    STRING_USER_NAME=970
    LOCAL_ID=971
    GLOBAL_ID=972
    ERROR_RECONGNIGION=973

    def __init__(self, input, output=sys.stdout):
        super(MySqlParser, self).__init__(input, output=output)
        self.checkVersion("4.7.2")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RootContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySqlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementsContext,0)


        def MINUSMINUS(self):
            return self.getToken(MySqlParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_root

        def enterRule(self, listener):
            if hasattr(listener, "enterRoot"):
                listener.enterRoot(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoot"):
                listener.exitRoot(self)




    def root(self):

        localctx = MySqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALTER) | (1 << MySqlParser.ANALYZE) | (1 << MySqlParser.CALL) | (1 << MySqlParser.CHANGE) | (1 << MySqlParser.CHECK) | (1 << MySqlParser.CREATE) | (1 << MySqlParser.DELETE) | (1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.DROP) | (1 << MySqlParser.EXPLAIN) | (1 << MySqlParser.GRANT))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (MySqlParser.INSERT - 71)) | (1 << (MySqlParser.KILL - 71)) | (1 << (MySqlParser.LOAD - 71)) | (1 << (MySqlParser.LOCK - 71)) | (1 << (MySqlParser.OPTIMIZE - 71)) | (1 << (MySqlParser.PURGE - 71)) | (1 << (MySqlParser.RELEASE - 71)) | (1 << (MySqlParser.RENAME - 71)) | (1 << (MySqlParser.REPLACE - 71)) | (1 << (MySqlParser.REVOKE - 71)) | (1 << (MySqlParser.SELECT - 71)) | (1 << (MySqlParser.SET - 71)) | (1 << (MySqlParser.SHOW - 71)))) != 0) or ((((_la - 155)) & ~0x3f) == 0 and ((1 << (_la - 155)) & ((1 << (MySqlParser.UNLOCK - 155)) | (1 << (MySqlParser.UPDATE - 155)) | (1 << (MySqlParser.USE - 155)))) != 0) or ((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (MySqlParser.BEGIN - 256)) | (1 << (MySqlParser.BINLOG - 256)) | (1 << (MySqlParser.CACHE - 256)) | (1 << (MySqlParser.CHECKSUM - 256)) | (1 << (MySqlParser.COMMIT - 256)) | (1 << (MySqlParser.DEALLOCATE - 256)) | (1 << (MySqlParser.DO - 256)))) != 0) or ((((_la - 331)) & ~0x3f) == 0 and ((1 << (_la - 331)) & ((1 << (MySqlParser.FLUSH - 331)) | (1 << (MySqlParser.HANDLER - 331)) | (1 << (MySqlParser.HELP - 331)) | (1 << (MySqlParser.INSTALL - 331)))) != 0) or ((((_la - 439)) & ~0x3f) == 0 and ((1 << (_la - 439)) & ((1 << (MySqlParser.PREPARE - 439)) | (1 << (MySqlParser.REPAIR - 439)) | (1 << (MySqlParser.RESET - 439)) | (1 << (MySqlParser.ROLLBACK - 439)) | (1 << (MySqlParser.SAVEPOINT - 439)) | (1 << (MySqlParser.START - 439)))) != 0) or ((((_la - 506)) & ~0x3f) == 0 and ((1 << (_la - 506)) & ((1 << (MySqlParser.STOP - 506)) | (1 << (MySqlParser.TRUNCATE - 506)) | (1 << (MySqlParser.UNINSTALL - 506)) | (1 << (MySqlParser.XA - 506)) | (1 << (MySqlParser.EXECUTE - 506)) | (1 << (MySqlParser.SHUTDOWN - 506)))) != 0) or _la==MySqlParser.LR_BRACKET or _la==MySqlParser.SEMI:
                self.state = 616
                self.sqlStatements()


            self.state = 620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MINUSMINUS:
                self.state = 619
                self.match(MySqlParser.MINUSMINUS)


            self.state = 622
            self.match(MySqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SqlStatementsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SqlStatementContext,i)


        def emptyStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.EmptyStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.EmptyStatementContext,i)


        def SEMI(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def MINUSMINUS(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUSMINUS)
            else:
                return self.getToken(MySqlParser.MINUSMINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatements

        def enterRule(self, listener):
            if hasattr(listener, "enterSqlStatements"):
                listener.enterSqlStatements(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSqlStatements"):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = MySqlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 633
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 631
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                        self.state = 624
                        self.sqlStatement()
                        self.state = 626
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.MINUSMINUS:
                            self.state = 625
                            self.match(MySqlParser.MINUSMINUS)


                        self.state = 628
                        self.match(MySqlParser.SEMI)
                        pass
                    elif token in [MySqlParser.SEMI]:
                        self.state = 630
                        self.emptyStatement()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 635
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 644
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALTER, MySqlParser.ANALYZE, MySqlParser.CALL, MySqlParser.CHANGE, MySqlParser.CHECK, MySqlParser.CREATE, MySqlParser.DELETE, MySqlParser.DESC, MySqlParser.DESCRIBE, MySqlParser.DROP, MySqlParser.EXPLAIN, MySqlParser.GRANT, MySqlParser.INSERT, MySqlParser.KILL, MySqlParser.LOAD, MySqlParser.LOCK, MySqlParser.OPTIMIZE, MySqlParser.PURGE, MySqlParser.RELEASE, MySqlParser.RENAME, MySqlParser.REPLACE, MySqlParser.REVOKE, MySqlParser.SELECT, MySqlParser.SET, MySqlParser.SHOW, MySqlParser.UNLOCK, MySqlParser.UPDATE, MySqlParser.USE, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.CACHE, MySqlParser.CHECKSUM, MySqlParser.COMMIT, MySqlParser.DEALLOCATE, MySqlParser.DO, MySqlParser.FLUSH, MySqlParser.HANDLER, MySqlParser.HELP, MySqlParser.INSTALL, MySqlParser.PREPARE, MySqlParser.REPAIR, MySqlParser.RESET, MySqlParser.ROLLBACK, MySqlParser.SAVEPOINT, MySqlParser.START, MySqlParser.STOP, MySqlParser.TRUNCATE, MySqlParser.UNINSTALL, MySqlParser.XA, MySqlParser.EXECUTE, MySqlParser.SHUTDOWN, MySqlParser.LR_BRACKET]:
                self.state = 636
                self.sqlStatement()
                self.state = 641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
                if la_ == 1:
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.MINUSMINUS:
                        self.state = 637
                        self.match(MySqlParser.MINUSMINUS)


                    self.state = 640
                    self.match(MySqlParser.SEMI)


                pass
            elif token in [MySqlParser.SEMI]:
                self.state = 643
                self.emptyStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SqlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySqlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(MySqlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySqlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSqlStatement"):
                listener.enterSqlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSqlStatement"):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = MySqlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 653
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 646
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 648
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 649
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 650
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 651
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 652
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.EmptyStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_emptyStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterEmptyStatement"):
                listener.enterEmptyStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEmptyStatement"):
                listener.exitEmptyStatement(self)




    def emptyStatement(self):

        localctx = MySqlParser.EmptyStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 655
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DdlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(MySqlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySqlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySqlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySqlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySqlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySqlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySqlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySqlParser.CreateViewContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySqlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySqlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(MySqlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(MySqlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(MySqlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySqlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(MySqlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySqlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySqlParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(MySqlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySqlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySqlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySqlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySqlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySqlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySqlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(MySqlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySqlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySqlParser.DropViewContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(MySqlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(MySqlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_ddlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDdlStatement"):
                listener.enterDdlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDdlStatement"):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = MySqlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 692
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 657
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 658
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 660
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 661
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 662
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 663
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 664
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 665
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 666
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 667
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 668
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 669
                self.alterDatabase()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 670
                self.alterEvent()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 671
                self.alterFunction()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 672
                self.alterInstance()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 673
                self.alterLogfileGroup()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 674
                self.alterProcedure()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 675
                self.alterServer()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 676
                self.alterTable()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 677
                self.alterTablespace()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 678
                self.alterView()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 679
                self.dropDatabase()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 680
                self.dropEvent()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 681
                self.dropIndex()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 682
                self.dropLogfileGroup()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 683
                self.dropProcedure()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 684
                self.dropFunction()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 685
                self.dropServer()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 686
                self.dropTable()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 687
                self.dropTablespace()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 688
                self.dropTrigger()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 689
                self.dropView()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 690
                self.renameTable()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 691
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DmlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySqlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySqlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dmlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDmlStatement"):
                listener.enterDmlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDmlStatement"):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = MySqlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 697
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 698
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 699
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 700
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 701
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 702
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 703
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TransactionStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(MySqlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySqlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(MySqlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySqlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(MySqlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(MySqlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(MySqlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_transactionStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterTransactionStatement"):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransactionStatement"):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySqlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 707
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 708
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 709
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 710
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 711
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 712
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 713
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 714
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReplicationStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(MySqlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(MySqlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(MySqlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(MySqlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(MySqlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(MySqlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(MySqlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(MySqlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReplicationStatement"):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReplicationStatement"):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySqlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 717
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 718
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 719
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 720
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 721
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 722
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 723
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 724
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 725
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 726
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 727
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 728
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 729
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 730
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 731
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PreparedStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySqlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(MySqlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_preparedStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPreparedStatement"):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPreparedStatement"):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySqlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.PREPARE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.prepareStatement()
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.executeStatement()
                pass
            elif token in [MySqlParser.DROP, MySqlParser.DEALLOCATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CompoundStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySqlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySqlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySqlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(MySqlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(MySqlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySqlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(MySqlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_compoundStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCompoundStatement"):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCompoundStatement"):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySqlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 749
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 739
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 740
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 742
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 743
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 744
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 745
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 746
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 747
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 748
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AdministrationStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySqlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySqlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySqlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(MySqlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(MySqlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySqlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(MySqlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(MySqlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(MySqlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(MySqlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(MySqlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(MySqlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(MySqlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(MySqlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(MySqlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(MySqlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(MySqlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(MySqlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(MySqlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_administrationStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterAdministrationStatement"):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAdministrationStatement"):
                listener.exitAdministrationStatement(self)




    def administrationStatement(self):

        localctx = MySqlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 776
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 754
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 755
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 756
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 757
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 758
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 759
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 760
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 761
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 762
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 763
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 764
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 765
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 766
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 767
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 768
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 769
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 770
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 771
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 772
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 773
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 774
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 775
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UtilityStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(MySqlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MySqlParser.UseStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_utilityStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUtilityStatement"):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUtilityStatement"):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySqlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 782
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 780
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 781
                self.useStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateDatabaseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabase

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateDatabase"):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateDatabase"):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySqlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 784
            self.match(MySqlParser.CREATE)
            self.state = 785
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 787
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 786
                self.ifNotExists()


            self.state = 789
            self.uid()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHARSET:
                self.state = 790
                self.createDatabaseOption()
                self.state = 795
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateEventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ON(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createEvent

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateEvent"):
                listener.enterCreateEvent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateEvent"):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySqlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(MySqlParser.CREATE)
            self.state = 798
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 797
                self.ownerStatement()


            self.state = 800
            self.match(MySqlParser.EVENT)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 801
                self.ifNotExists()


            self.state = 804
            self.fullId()
            self.state = 805
            self.match(MySqlParser.ON)
            self.state = 806
            self.match(MySqlParser.SCHEDULE)
            self.state = 807
            self.scheduleExpression()
            self.state = 814
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 808
                self.match(MySqlParser.ON)
                self.state = 809
                self.match(MySqlParser.COMPLETION)
                self.state = 811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 810
                    self.match(MySqlParser.NOT)


                self.state = 813
                self.match(MySqlParser.PRESERVE)


            self.state = 817
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 816
                self.enableType()


            self.state = 821
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 819
                self.match(MySqlParser.COMMENT)
                self.state = 820
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 823
            self.match(MySqlParser.DO)
            self.state = 824
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateIndexContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createIndex

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateIndex"):
                listener.enterCreateIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateIndex"):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySqlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(MySqlParser.CREATE)
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 827
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 831
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE:
                self.state = 830
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL or _la==MySqlParser.UNIQUE):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 833
            self.match(MySqlParser.INDEX)
            self.state = 834
            self.uid()
            self.state = 836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 835
                self.indexType()


            self.state = 838
            self.match(MySqlParser.ON)
            self.state = 839
            self.tableName()
            self.state = 840
            self.indexColumnNames()
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                self.state = 841
                self.indexOption()
                self.state = 846
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALGORITHM]:
                self.state = 847
                self.match(MySqlParser.ALGORITHM)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 848
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 851
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.LOCK]:
                self.state = 852
                self.match(MySqlParser.LOCK)
                self.state = 854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 853
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 856
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.EOF, MySqlParser.MINUSMINUS, MySqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateLogfileGroupContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createLogfileGroup

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateLogfileGroup"):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateLogfileGroup"):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySqlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 859
            self.match(MySqlParser.CREATE)
            self.state = 860
            self.match(MySqlParser.LOGFILE)
            self.state = 861
            self.match(MySqlParser.GROUP)
            self.state = 862
            self.uid()
            self.state = 863
            self.match(MySqlParser.ADD)
            self.state = 864
            self.match(MySqlParser.UNDOFILE)
            self.state = 865
            localctx.undoFile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 866
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 867
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 870
                localctx.initSize = self.fileSizeLiteral()


            self.state = 878
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNDO_BUFFER_SIZE:
                self.state = 873
                self.match(MySqlParser.UNDO_BUFFER_SIZE)
                self.state = 875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 874
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 877
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.REDO_BUFFER_SIZE:
                self.state = 880
                self.match(MySqlParser.REDO_BUFFER_SIZE)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 881
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 884
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 887
                self.match(MySqlParser.NODEGROUP)
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 888
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 891
                self.uid()


            self.state = 895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 894
                self.match(MySqlParser.WAIT)


            self.state = 902
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 897
                self.match(MySqlParser.COMMENT)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 898
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 901
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 904
            self.match(MySqlParser.ENGINE)
            self.state = 906
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 905
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 908
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateProcedureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def procedureParameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureParameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createProcedure

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateProcedure"):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateProcedure"):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySqlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 910
            self.match(MySqlParser.CREATE)
            self.state = 912
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 911
                self.ownerStatement()


            self.state = 914
            self.match(MySqlParser.PROCEDURE)
            self.state = 915
            self.fullId()
            self.state = 916
            self.match(MySqlParser.LR_BRACKET)
            self.state = 918
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (MySqlParser.IN - 66)) | (1 << (MySqlParser.INOUT - 66)) | (1 << (MySqlParser.OUT - 66)))) != 0):
                self.state = 917
                self.procedureParameter()


            self.state = 924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 920
                self.match(MySqlParser.COMMA)
                self.state = 921
                self.procedureParameter()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 927
            self.match(MySqlParser.RR_BRACKET)
            self.state = 931
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 928
                    self.routineOption() 
                self.state = 933
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

            self.state = 934
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def functionParameter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionParameterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createFunction

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateFunction"):
                listener.enterCreateFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateFunction"):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySqlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 936
            self.match(MySqlParser.CREATE)
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 937
                self.ownerStatement()


            self.state = 940
            self.match(MySqlParser.FUNCTION)
            self.state = 941
            self.fullId()
            self.state = 942
            self.match(MySqlParser.LR_BRACKET)
            self.state = 944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 943
                self.functionParameter()


            self.state = 950
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 946
                self.match(MySqlParser.COMMA)
                self.state = 947
                self.functionParameter()
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self.match(MySqlParser.RR_BRACKET)
            self.state = 954
            self.match(MySqlParser.RETURNS)
            self.state = 955
            self.dataType()
            self.state = 959
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,51,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 956
                    self.routineOption() 
                self.state = 961
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,51,self._ctx)

            self.state = 962
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateServerContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createServer

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateServer"):
                listener.enterCreateServer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateServer"):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySqlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(MySqlParser.CREATE)
            self.state = 965
            self.match(MySqlParser.SERVER)
            self.state = 966
            self.uid()
            self.state = 967
            self.match(MySqlParser.FOREIGN)
            self.state = 968
            self.match(MySqlParser.DATA)
            self.state = 969
            self.match(MySqlParser.WRAPPER)
            self.state = 970
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MYSQL or _la==MySqlParser.STRING_LITERAL):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 971
            self.match(MySqlParser.OPTIONS)
            self.state = 972
            self.match(MySqlParser.LR_BRACKET)
            self.state = 973
            self.serverOption()
            self.state = 978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 974
                self.match(MySqlParser.COMMA)
                self.state = 975
                self.serverOption()
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 981
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateTableContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createTable

     
        def copyFrom(self, ctx):
            super(MySqlParser.CreateTableContext, self).copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateTableContext)
            super(MySqlParser.CopyCreateTableContext, self).__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCopyCreateTable"):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCopyCreateTable"):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateTableContext)
            super(MySqlParser.ColumnCreateTableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def tableOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterColumnCreateTable"):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumnCreateTable"):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateTableContext)
            super(MySqlParser.QueryCreateTableContext, self).__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def tableOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterQueryCreateTable"):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQueryCreateTable"):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = MySqlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1061
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 983
                self.match(MySqlParser.CREATE)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 984
                    self.match(MySqlParser.TEMPORARY)


                self.state = 987
                self.match(MySqlParser.TABLE)
                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 988
                    self.ifNotExists()


                self.state = 991
                self.tableName()
                self.state = 999
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LIKE]:
                    self.state = 992
                    self.match(MySqlParser.LIKE)
                    self.state = 993
                    self.tableName()
                    pass
                elif token in [MySqlParser.LR_BRACKET]:
                    self.state = 994
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 995
                    self.match(MySqlParser.LIKE)
                    self.state = 996
                    localctx.parenthesisTable = self.tableName()
                    self.state = 997
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1001
                self.match(MySqlParser.CREATE)
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1002
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1005
                self.match(MySqlParser.TABLE)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1006
                    self.ifNotExists()


                self.state = 1009
                self.tableName()
                self.state = 1011
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 1010
                    self.createDefinitions()


                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (MySqlParser.CHARACTER - 21)) | (1 << (MySqlParser.COLLATE - 21)) | (1 << (MySqlParser.DEFAULT - 21)) | (1 << (MySqlParser.INDEX - 21)))) != 0) or _la==MySqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.COMMENT - 254)) | (1 << (MySqlParser.COMPRESSION - 254)) | (1 << (MySqlParser.CONNECTION - 254)) | (1 << (MySqlParser.DATA - 254)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 254)) | (1 << (MySqlParser.ENCRYPTION - 254)) | (1 << (MySqlParser.ENGINE - 254)))) != 0) or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (MySqlParser.INSERT_METHOD - 351)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 351)) | (1 << (MySqlParser.MAX_ROWS - 351)) | (1 << (MySqlParser.MIN_ROWS - 351)))) != 0) or ((((_la - 426)) & ~0x3f) == 0 and ((1 << (_la - 426)) & ((1 << (MySqlParser.PACK_KEYS - 426)) | (1 << (MySqlParser.PASSWORD - 426)) | (1 << (MySqlParser.ROW_FORMAT - 426)))) != 0) or ((((_la - 502)) & ~0x3f) == 0 and ((1 << (_la - 502)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 502)) | (1 << (MySqlParser.STATS_PERSISTENT - 502)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 502)) | (1 << (MySqlParser.TABLESPACE - 502)))) != 0) or _la==MySqlParser.CHARSET:
                    self.state = 1013
                    self.tableOption()
                    self.state = 1020
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (MySqlParser.CHARACTER - 21)) | (1 << (MySqlParser.COLLATE - 21)) | (1 << (MySqlParser.DEFAULT - 21)) | (1 << (MySqlParser.INDEX - 21)))) != 0) or _la==MySqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.COMMENT - 254)) | (1 << (MySqlParser.COMPRESSION - 254)) | (1 << (MySqlParser.CONNECTION - 254)) | (1 << (MySqlParser.DATA - 254)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 254)) | (1 << (MySqlParser.ENCRYPTION - 254)) | (1 << (MySqlParser.ENGINE - 254)))) != 0) or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (MySqlParser.INSERT_METHOD - 351)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 351)) | (1 << (MySqlParser.MAX_ROWS - 351)) | (1 << (MySqlParser.MIN_ROWS - 351)))) != 0) or ((((_la - 426)) & ~0x3f) == 0 and ((1 << (_la - 426)) & ((1 << (MySqlParser.PACK_KEYS - 426)) | (1 << (MySqlParser.PASSWORD - 426)) | (1 << (MySqlParser.ROW_FORMAT - 426)))) != 0) or ((((_la - 502)) & ~0x3f) == 0 and ((1 << (_la - 502)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 502)) | (1 << (MySqlParser.STATS_PERSISTENT - 502)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 502)) | (1 << (MySqlParser.TABLESPACE - 502)))) != 0) or _la==MySqlParser.CHARSET or _la==MySqlParser.COMMA:
                        self.state = 1015
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 1014
                            self.match(MySqlParser.COMMA)


                        self.state = 1017
                        self.tableOption()
                        self.state = 1022
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1025
                    self.partitionDefinitions()


                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                    self.state = 1028
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 1031
                    self.match(MySqlParser.AS)


                self.state = 1034
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1036
                self.match(MySqlParser.CREATE)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.TEMPORARY:
                    self.state = 1037
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1040
                self.match(MySqlParser.TABLE)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 1041
                    self.ifNotExists()


                self.state = 1044
                self.tableName()
                self.state = 1045
                self.createDefinitions()
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (MySqlParser.CHARACTER - 21)) | (1 << (MySqlParser.COLLATE - 21)) | (1 << (MySqlParser.DEFAULT - 21)) | (1 << (MySqlParser.INDEX - 21)))) != 0) or _la==MySqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.COMMENT - 254)) | (1 << (MySqlParser.COMPRESSION - 254)) | (1 << (MySqlParser.CONNECTION - 254)) | (1 << (MySqlParser.DATA - 254)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 254)) | (1 << (MySqlParser.ENCRYPTION - 254)) | (1 << (MySqlParser.ENGINE - 254)))) != 0) or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (MySqlParser.INSERT_METHOD - 351)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 351)) | (1 << (MySqlParser.MAX_ROWS - 351)) | (1 << (MySqlParser.MIN_ROWS - 351)))) != 0) or ((((_la - 426)) & ~0x3f) == 0 and ((1 << (_la - 426)) & ((1 << (MySqlParser.PACK_KEYS - 426)) | (1 << (MySqlParser.PASSWORD - 426)) | (1 << (MySqlParser.ROW_FORMAT - 426)))) != 0) or ((((_la - 502)) & ~0x3f) == 0 and ((1 << (_la - 502)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 502)) | (1 << (MySqlParser.STATS_PERSISTENT - 502)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 502)) | (1 << (MySqlParser.TABLESPACE - 502)))) != 0) or _la==MySqlParser.CHARSET:
                    self.state = 1046
                    self.tableOption()
                    self.state = 1053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while ((((_la - 21)) & ~0x3f) == 0 and ((1 << (_la - 21)) & ((1 << (MySqlParser.CHARACTER - 21)) | (1 << (MySqlParser.COLLATE - 21)) | (1 << (MySqlParser.DEFAULT - 21)) | (1 << (MySqlParser.INDEX - 21)))) != 0) or _la==MySqlParser.UNION or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 254)) | (1 << (MySqlParser.CHECKSUM - 254)) | (1 << (MySqlParser.COMMENT - 254)) | (1 << (MySqlParser.COMPRESSION - 254)) | (1 << (MySqlParser.CONNECTION - 254)) | (1 << (MySqlParser.DATA - 254)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 254)) | (1 << (MySqlParser.ENCRYPTION - 254)) | (1 << (MySqlParser.ENGINE - 254)))) != 0) or ((((_la - 351)) & ~0x3f) == 0 and ((1 << (_la - 351)) & ((1 << (MySqlParser.INSERT_METHOD - 351)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 351)) | (1 << (MySqlParser.MAX_ROWS - 351)) | (1 << (MySqlParser.MIN_ROWS - 351)))) != 0) or ((((_la - 426)) & ~0x3f) == 0 and ((1 << (_la - 426)) & ((1 << (MySqlParser.PACK_KEYS - 426)) | (1 << (MySqlParser.PASSWORD - 426)) | (1 << (MySqlParser.ROW_FORMAT - 426)))) != 0) or ((((_la - 502)) & ~0x3f) == 0 and ((1 << (_la - 502)) & ((1 << (MySqlParser.STATS_AUTO_RECALC - 502)) | (1 << (MySqlParser.STATS_PERSISTENT - 502)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 502)) | (1 << (MySqlParser.TABLESPACE - 502)))) != 0) or _la==MySqlParser.CHARSET or _la==MySqlParser.COMMA:
                        self.state = 1048
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.COMMA:
                            self.state = 1047
                            self.match(MySqlParser.COMMA)


                        self.state = 1050
                        self.tableOption()
                        self.state = 1055
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 1058
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateTablespaceInnodbContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateTablespaceInnodb"):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateTablespaceInnodb"):
                listener.exitCreateTablespaceInnodb(self)




    def createTablespaceInnodb(self):

        localctx = MySqlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1063
            self.match(MySqlParser.CREATE)
            self.state = 1064
            self.match(MySqlParser.TABLESPACE)
            self.state = 1065
            self.uid()
            self.state = 1066
            self.match(MySqlParser.ADD)
            self.state = 1067
            self.match(MySqlParser.DATAFILE)
            self.state = 1068
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FILE_BLOCK_SIZE:
                self.state = 1069
                self.match(MySqlParser.FILE_BLOCK_SIZE)
                self.state = 1070
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1071
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 1074
                self.match(MySqlParser.ENGINE)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1075
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1078
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateTablespaceNdbContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceNdb

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateTablespaceNdb"):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateTablespaceNdb"):
                listener.exitCreateTablespaceNdb(self)




    def createTablespaceNdb(self):

        localctx = MySqlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1081
            self.match(MySqlParser.CREATE)
            self.state = 1082
            self.match(MySqlParser.TABLESPACE)
            self.state = 1083
            self.uid()
            self.state = 1084
            self.match(MySqlParser.ADD)
            self.state = 1085
            self.match(MySqlParser.DATAFILE)
            self.state = 1086
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1087
            self.match(MySqlParser.USE)
            self.state = 1088
            self.match(MySqlParser.LOGFILE)
            self.state = 1089
            self.match(MySqlParser.GROUP)
            self.state = 1090
            self.uid()
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENT_SIZE:
                self.state = 1091
                self.match(MySqlParser.EXTENT_SIZE)
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1092
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1095
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 1098
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1099
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1102
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1110
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AUTOEXTEND_SIZE:
                self.state = 1105
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1107
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1106
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1109
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MAX_SIZE:
                self.state = 1112
                self.match(MySqlParser.MAX_SIZE)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1113
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1116
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NODEGROUP:
                self.state = 1119
                self.match(MySqlParser.NODEGROUP)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1120
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1123
                self.uid()


            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 1126
                self.match(MySqlParser.WAIT)


            self.state = 1134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 1129
                self.match(MySqlParser.COMMENT)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1130
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1133
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1136
            self.match(MySqlParser.ENGINE)
            self.state = 1138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 1137
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1140
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateTriggerContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(MySqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def fullId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createTrigger

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateTrigger"):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateTrigger"):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySqlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1142
            self.match(MySqlParser.CREATE)
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1143
                self.ownerStatement()


            self.state = 1146
            self.match(MySqlParser.TRIGGER)
            self.state = 1147
            localctx.thisTrigger = self.fullId()
            self.state = 1148
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEFORE or _la==MySqlParser.AFTER):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1149
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DELETE or _la==MySqlParser.INSERT or _la==MySqlParser.UPDATE):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1150
            self.match(MySqlParser.ON)
            self.state = 1151
            self.tableName()
            self.state = 1152
            self.match(MySqlParser.FOR)
            self.state = 1153
            self.match(MySqlParser.EACH)
            self.state = 1154
            self.match(MySqlParser.ROW)
            self.state = 1157
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.state = 1155
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FOLLOWS or _la==MySqlParser.PRECEDES):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1156
                localctx.otherTrigger = self.fullId()


            self.state = 1159
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateViewContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createView

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateView"):
                listener.enterCreateView(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateView"):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySqlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1161
            self.match(MySqlParser.CREATE)
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OR:
                self.state = 1162
                self.match(MySqlParser.OR)
                self.state = 1163
                self.match(MySqlParser.REPLACE)


            self.state = 1169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 1166
                self.match(MySqlParser.ALGORITHM)
                self.state = 1167
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1168
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1171
                self.ownerStatement()


            self.state = 1177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 1174
                self.match(MySqlParser.SQL)
                self.state = 1175
                self.match(MySqlParser.SECURITY)
                self.state = 1176
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1179
            self.match(MySqlParser.VIEW)
            self.state = 1180
            self.fullId()
            self.state = 1185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 1181
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1182
                self.uidList()
                self.state = 1183
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1187
            self.match(MySqlParser.AS)
            self.state = 1188
            self.selectStatement()
            self.state = 1195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 1189
                self.match(MySqlParser.WITH)
                self.state = 1191
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 1190
                    localctx.checkOption = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOption = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1193
                self.match(MySqlParser.CHECK)
                self.state = 1194
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateDatabaseOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabaseOption

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateDatabaseOption"):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateDatabaseOption"):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySqlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1197
                    self.match(MySqlParser.DEFAULT)


                self.state = 1203
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 1200
                    self.match(MySqlParser.CHARACTER)
                    self.state = 1201
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 1202
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1205
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1208
                self.charsetName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1209
                    self.match(MySqlParser.DEFAULT)


                self.state = 1212
                self.match(MySqlParser.COLLATE)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1213
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1216
                self.collationName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.OwnerStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ownerStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterOwnerStatement"):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOwnerStatement"):
                listener.exitOwnerStatement(self)




    def ownerStatement(self):

        localctx = MySqlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1219
            self.match(MySqlParser.DEFINER)
            self.state = 1220
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 1227
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ID, MySqlParser.STRING_USER_NAME]:
                self.state = 1221
                self.userName()
                pass
            elif token in [MySqlParser.CURRENT_USER]:
                self.state = 1222
                self.match(MySqlParser.CURRENT_USER)
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 1223
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1224
                    self.match(MySqlParser.RR_BRACKET)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ScheduleExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx):
            super(MySqlParser.ScheduleExpressionContext, self).copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ScheduleExpressionContext)
            super(MySqlParser.PreciseScheduleContext, self).__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(MySqlParser.TimestampValueContext,0)

        def intervalExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterPreciseSchedule"):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPreciseSchedule"):
                listener.exitPreciseSchedule(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ScheduleExpressionContext)
            super(MySqlParser.IntervalScheduleContext, self).__init__(parser)
            self.start = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.end = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)
        def timestampValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TimestampValueContext,i)

        def intervalExpr(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterIntervalSchedule"):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntervalSchedule"):
                listener.exitIntervalSchedule(self)



    def scheduleExpression(self):

        localctx = MySqlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1263
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AT]:
                localctx = MySqlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1229
                self.match(MySqlParser.AT)
                self.state = 1230
                self.timestampValue()
                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.PLUS:
                    self.state = 1231
                    self.intervalExpr()
                    self.state = 1236
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.EVERY]:
                localctx = MySqlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1237
                self.match(MySqlParser.EVERY)
                self.state = 1240
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1238
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1239
                    self.expression(0)
                    pass


                self.state = 1242
                self.intervalType()
                self.state = 1251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STARTS:
                    self.state = 1243
                    self.match(MySqlParser.STARTS)
                    self.state = 1244
                    localctx.start = self.timestampValue()
                    self.state = 1248
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1245
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1250
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ENDS:
                    self.state = 1253
                    self.match(MySqlParser.ENDS)
                    self.state = 1254
                    localctx.end = self.timestampValue()
                    self.state = 1258
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.PLUS:
                        self.state = 1255
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1260
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TimestampValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_timestampValue

        def enterRule(self, listener):
            if hasattr(listener, "enterTimestampValue"):
                listener.enterTimestampValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTimestampValue"):
                listener.exitTimestampValue(self)




    def timestampValue(self):

        localctx = MySqlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_timestampValue)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1265
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1266
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1267
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1268
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IntervalExprContext, self).__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_intervalExpr

        def enterRule(self, listener):
            if hasattr(listener, "enterIntervalExpr"):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntervalExpr"):
                listener.exitIntervalExpr(self)




    def intervalExpr(self):

        localctx = MySqlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            self.match(MySqlParser.PLUS)
            self.state = 1272
            self.match(MySqlParser.INTERVAL)
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 1273
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1274
                self.expression(0)
                pass


            self.state = 1277
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IntervalTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySqlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(MySqlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySqlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(MySqlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySqlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySqlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySqlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySqlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySqlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySqlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySqlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalType

        def enterRule(self, listener):
            if hasattr(listener, "enterIntervalType"):
                listener.enterIntervalType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntervalType"):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = MySqlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_intervalType)
        try:
            self.state = 1292
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1279
                self.intervalTypeBase()
                pass
            elif token in [MySqlParser.YEAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1280
                self.match(MySqlParser.YEAR)
                pass
            elif token in [MySqlParser.YEAR_MONTH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1281
                self.match(MySqlParser.YEAR_MONTH)
                pass
            elif token in [MySqlParser.DAY_HOUR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1282
                self.match(MySqlParser.DAY_HOUR)
                pass
            elif token in [MySqlParser.DAY_MINUTE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1283
                self.match(MySqlParser.DAY_MINUTE)
                pass
            elif token in [MySqlParser.DAY_SECOND]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1284
                self.match(MySqlParser.DAY_SECOND)
                pass
            elif token in [MySqlParser.HOUR_MINUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1285
                self.match(MySqlParser.HOUR_MINUTE)
                pass
            elif token in [MySqlParser.HOUR_SECOND]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1286
                self.match(MySqlParser.HOUR_SECOND)
                pass
            elif token in [MySqlParser.MINUTE_SECOND]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1287
                self.match(MySqlParser.MINUTE_SECOND)
                pass
            elif token in [MySqlParser.SECOND_MICROSECOND]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1288
                self.match(MySqlParser.SECOND_MICROSECOND)
                pass
            elif token in [MySqlParser.MINUTE_MICROSECOND]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1289
                self.match(MySqlParser.MINUTE_MICROSECOND)
                pass
            elif token in [MySqlParser.HOUR_MICROSECOND]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1290
                self.match(MySqlParser.HOUR_MICROSECOND)
                pass
            elif token in [MySqlParser.DAY_MICROSECOND]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1291
                self.match(MySqlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.EnableTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_enableType

        def enterRule(self, listener):
            if hasattr(listener, "enterEnableType"):
                listener.enterEnableType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEnableType"):
                listener.exitEnableType(self)




    def enableType(self):

        localctx = MySqlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_enableType)
        try:
            self.state = 1299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1294
                self.match(MySqlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1295
                self.match(MySqlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1296
                self.match(MySqlParser.DISABLE)
                self.state = 1297
                self.match(MySqlParser.ON)
                self.state = 1298
                self.match(MySqlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexType

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexType"):
                listener.enterIndexType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexType"):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySqlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1301
            self.match(MySqlParser.USING)
            self.state = 1302
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BTREE or _la==MySqlParser.HASH):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexOption

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexOption"):
                listener.enterIndexOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexOption"):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySqlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1315
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.KEY_BLOCK_SIZE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1304
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1306
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1305
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1308
                self.fileSizeLiteral()
                pass
            elif token in [MySqlParser.USING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1309
                self.indexType()
                pass
            elif token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1310
                self.match(MySqlParser.WITH)
                self.state = 1311
                self.match(MySqlParser.PARSER)
                self.state = 1312
                self.uid()
                pass
            elif token in [MySqlParser.COMMENT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1313
                self.match(MySqlParser.COMMENT)
                self.state = 1314
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ProcedureParameterContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def OUT(self):
            return self.getToken(MySqlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(MySqlParser.INOUT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_procedureParameter

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureParameter"):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureParameter"):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySqlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            localctx.direction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (MySqlParser.IN - 66)) | (1 << (MySqlParser.INOUT - 66)) | (1 << (MySqlParser.OUT - 66)))) != 0)):
                localctx.direction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1318
            self.uid()
            self.state = 1319
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FunctionParameterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionParameter

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionParameter"):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionParameter"):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            self.uid()
            self.state = 1322
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RoutineOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_routineOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.RoutineOptionContext, self).copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RoutineOptionContext)
            super(MySqlParser.RoutineBehaviorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(MySqlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineBehavior"):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineBehavior"):
                listener.exitRoutineBehavior(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RoutineOptionContext)
            super(MySqlParser.RoutineLanguageContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineLanguage"):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineLanguage"):
                listener.exitRoutineLanguage(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RoutineOptionContext)
            super(MySqlParser.RoutineCommentContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineComment"):
                listener.enterRoutineComment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineComment"):
                listener.exitRoutineComment(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RoutineOptionContext)
            super(MySqlParser.RoutineSecurityContext, self).__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineSecurity"):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineSecurity"):
                listener.exitRoutineSecurity(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RoutineOptionContext)
            super(MySqlParser.RoutineDataContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def READS(self):
            return self.getToken(MySqlParser.READS, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(MySqlParser.MODIFIES, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineData"):
                listener.enterRoutineData(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineData"):
                listener.exitRoutineData(self)



    def routineOption(self):

        localctx = MySqlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1324
                self.match(MySqlParser.COMMENT)
                self.state = 1325
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LANGUAGE]:
                localctx = MySqlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1326
                self.match(MySqlParser.LANGUAGE)
                self.state = 1327
                self.match(MySqlParser.SQL)
                pass
            elif token in [MySqlParser.DETERMINISTIC, MySqlParser.NOT]:
                localctx = MySqlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 1328
                    self.match(MySqlParser.NOT)


                self.state = 1331
                self.match(MySqlParser.DETERMINISTIC)
                pass
            elif token in [MySqlParser.MODIFIES, MySqlParser.READS, MySqlParser.CONTAINS, MySqlParser.NO]:
                localctx = MySqlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1342
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CONTAINS]:
                    self.state = 1332
                    self.match(MySqlParser.CONTAINS)
                    self.state = 1333
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.NO]:
                    self.state = 1334
                    self.match(MySqlParser.NO)
                    self.state = 1335
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [MySqlParser.READS]:
                    self.state = 1336
                    self.match(MySqlParser.READS)
                    self.state = 1337
                    self.match(MySqlParser.SQL)
                    self.state = 1338
                    self.match(MySqlParser.DATA)
                    pass
                elif token in [MySqlParser.MODIFIES]:
                    self.state = 1339
                    self.match(MySqlParser.MODIFIES)
                    self.state = 1340
                    self.match(MySqlParser.SQL)
                    self.state = 1341
                    self.match(MySqlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.SQL]:
                localctx = MySqlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1344
                self.match(MySqlParser.SQL)
                self.state = 1345
                self.match(MySqlParser.SECURITY)
                self.state = 1346
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ServerOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_serverOption

        def enterRule(self, listener):
            if hasattr(listener, "enterServerOption"):
                listener.enterServerOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitServerOption"):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySqlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_serverOption)
        try:
            self.state = 1363
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.HOST]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.match(MySqlParser.HOST)
                self.state = 1350
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATABASE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1351
                self.match(MySqlParser.DATABASE)
                self.state = 1352
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.USER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.match(MySqlParser.USER)
                self.state = 1354
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1355
                self.match(MySqlParser.PASSWORD)
                self.state = 1356
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SOCKET]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1357
                self.match(MySqlParser.SOCKET)
                self.state = 1358
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.OWNER]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1359
                self.match(MySqlParser.OWNER)
                self.state = 1360
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PORT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1361
                self.match(MySqlParser.PORT)
                self.state = 1362
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateDefinitionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def createDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinitions

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateDefinitions"):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateDefinitions"):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = MySqlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1365
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1366
            self.createDefinition()
            self.state = 1371
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 1367
                self.match(MySqlParser.COMMA)
                self.state = 1368
                self.createDefinition()
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1374
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinition

     
        def copyFrom(self, ctx):
            super(MySqlParser.CreateDefinitionContext, self).copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateDefinitionContext)
            super(MySqlParser.ColumnDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterColumnDeclaration"):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumnDeclaration"):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateDefinitionContext)
            super(MySqlParser.ConstraintDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(MySqlParser.TableConstraintContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterConstraintDeclaration"):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstraintDeclaration"):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateDefinitionContext)
            super(MySqlParser.IndexDeclarationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterIndexDeclaration"):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexDeclaration"):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = MySqlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_createDefinition)
        try:
            self.state = 1381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                localctx = MySqlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1376
                self.uid()
                self.state = 1377
                self.columnDefinition()
                pass
            elif token in [MySqlParser.CHECK, MySqlParser.CONSTRAINT, MySqlParser.FOREIGN, MySqlParser.PRIMARY, MySqlParser.UNIQUE]:
                localctx = MySqlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.tableConstraint()
                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.INDEX, MySqlParser.KEY, MySqlParser.SPATIAL]:
                localctx = MySqlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1380
                self.indexColumnDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ColumnDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def columnConstraint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_columnDefinition

        def enterRule(self, listener):
            if hasattr(listener, "enterColumnDefinition"):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitColumnDefinition"):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySqlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_columnDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.dataType()
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 36)) & ~0x3f) == 0 and ((1 << (_la - 36)) & ((1 << (MySqlParser.DEFAULT - 36)) | (1 << (MySqlParser.KEY - 36)) | (1 << (MySqlParser.NOT - 36)) | (1 << (MySqlParser.NULL_LITERAL - 36)))) != 0) or ((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (MySqlParser.PRIMARY - 110)) | (1 << (MySqlParser.REFERENCES - 110)) | (1 << (MySqlParser.UNIQUE - 110)))) != 0) or ((((_la - 254)) & ~0x3f) == 0 and ((1 << (_la - 254)) & ((1 << (MySqlParser.AUTO_INCREMENT - 254)) | (1 << (MySqlParser.COLUMN_FORMAT - 254)) | (1 << (MySqlParser.COMMENT - 254)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.NULL_SPEC_LITERAL:
                self.state = 1384
                self.columnConstraint()
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ColumnConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx):
            super(MySqlParser.ColumnConstraintContext, self).copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.StorageColumnConstraintContext, self).__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterStorageColumnConstraint"):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStorageColumnConstraint"):
                listener.exitStorageColumnConstraint(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.FormatColumnConstraintContext, self).__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterFormatColumnConstraint"):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFormatColumnConstraint"):
                listener.exitFormatColumnConstraint(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.AutoIncrementColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAutoIncrementColumnConstraint"):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAutoIncrementColumnConstraint"):
                listener.exitAutoIncrementColumnConstraint(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.CommentColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterCommentColumnConstraint"):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommentColumnConstraint"):
                listener.exitCommentColumnConstraint(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.PrimaryKeyColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPrimaryKeyColumnConstraint"):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimaryKeyColumnConstraint"):
                listener.exitPrimaryKeyColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.UniqueKeyColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterUniqueKeyColumnConstraint"):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUniqueKeyColumnConstraint"):
                listener.exitUniqueKeyColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.NullColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterNullColumnConstraint"):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNullColumnConstraint"):
                listener.exitNullColumnConstraint(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.DefaultColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterDefaultColumnConstraint"):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefaultColumnConstraint"):
                listener.exitDefaultColumnConstraint(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ColumnConstraintContext)
            super(MySqlParser.ReferenceColumnConstraintContext, self).__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterReferenceColumnConstraint"):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReferenceColumnConstraint"):
                listener.exitReferenceColumnConstraint(self)



    def columnConstraint(self):

        localctx = MySqlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1409
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.NULL_SPEC_LITERAL]:
                localctx = MySqlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.nullNotnull()
                pass
            elif token in [MySqlParser.DEFAULT]:
                localctx = MySqlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.match(MySqlParser.DEFAULT)
                self.state = 1392
                self.defaultValue()
                pass
            elif token in [MySqlParser.AUTO_INCREMENT]:
                localctx = MySqlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1393
                self.match(MySqlParser.AUTO_INCREMENT)
                pass
            elif token in [MySqlParser.KEY, MySqlParser.PRIMARY]:
                localctx = MySqlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIMARY:
                    self.state = 1394
                    self.match(MySqlParser.PRIMARY)


                self.state = 1397
                self.match(MySqlParser.KEY)
                pass
            elif token in [MySqlParser.UNIQUE]:
                localctx = MySqlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1398
                self.match(MySqlParser.UNIQUE)
                self.state = 1400
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 1399
                    self.match(MySqlParser.KEY)


                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1402
                self.match(MySqlParser.COMMENT)
                self.state = 1403
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.COLUMN_FORMAT]:
                localctx = MySqlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1404
                self.match(MySqlParser.COLUMN_FORMAT)
                self.state = 1405
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DYNAMIC or _la==MySqlParser.FIXED):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.STORAGE]:
                localctx = MySqlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1406
                self.match(MySqlParser.STORAGE)
                self.state = 1407
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.REFERENCES]:
                localctx = MySqlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1408
                self.referenceDefinition()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableConstraintContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx):
            super(MySqlParser.TableConstraintContext, self).copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableConstraintContext)
            super(MySqlParser.UniqueKeyTableConstraintContext, self).__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterUniqueKeyTableConstraint"):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUniqueKeyTableConstraint"):
                listener.exitUniqueKeyTableConstraint(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableConstraintContext)
            super(MySqlParser.CheckTableConstraintContext, self).__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCheckTableConstraint"):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCheckTableConstraint"):
                listener.exitCheckTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableConstraintContext)
            super(MySqlParser.PrimaryKeyTableConstraintContext, self).__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterPrimaryKeyTableConstraint"):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrimaryKeyTableConstraint"):
                listener.exitPrimaryKeyTableConstraint(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableConstraintContext)
            super(MySqlParser.ForeignKeyTableConstraintContext, self).__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterForeignKeyTableConstraint"):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitForeignKeyTableConstraint"):
                listener.exitForeignKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = MySqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1411
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 1412
                        localctx.name = self.uid()




                self.state = 1417
                self.match(MySqlParser.PRIMARY)
                self.state = 1418
                self.match(MySqlParser.KEY)
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1419
                    self.indexType()


                self.state = 1422
                self.indexColumnNames()
                self.state = 1426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 1423
                    self.indexOption()
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1429
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 1430
                        localctx.name = self.uid()




                self.state = 1435
                self.match(MySqlParser.UNIQUE)
                self.state = 1437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1436
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 1439
                    localctx.index = self.uid()


                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1442
                    self.indexType()


                self.state = 1445
                self.indexColumnNames()
                self.state = 1449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 1446
                    self.indexOption()
                    self.state = 1451
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1452
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 1453
                        localctx.name = self.uid()




                self.state = 1458
                self.match(MySqlParser.FOREIGN)
                self.state = 1459
                self.match(MySqlParser.KEY)
                self.state = 1461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 1460
                    localctx.index = self.uid()


                self.state = 1463
                self.indexColumnNames()
                self.state = 1464
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = MySqlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 1466
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 1467
                        localctx.name = self.uid()




                self.state = 1472
                self.match(MySqlParser.CHECK)
                self.state = 1473
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1474
                self.expression(0)
                self.state = 1475
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReferenceDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(MySqlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceDefinition

        def enterRule(self, listener):
            if hasattr(listener, "enterReferenceDefinition"):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReferenceDefinition"):
                listener.exitReferenceDefinition(self)




    def referenceDefinition(self):

        localctx = MySqlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1479
            self.match(MySqlParser.REFERENCES)
            self.state = 1480
            self.tableName()
            self.state = 1481
            self.indexColumnNames()
            self.state = 1484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.MATCH:
                self.state = 1482
                self.match(MySqlParser.MATCH)
                self.state = 1483
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULL or _la==MySqlParser.PARTIAL or _la==MySqlParser.SIMPLE):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 1486
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReferenceActionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def referenceControlType(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceAction

        def enterRule(self, listener):
            if hasattr(listener, "enterReferenceAction"):
                listener.enterReferenceAction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReferenceAction"):
                listener.exitReferenceAction(self)




    def referenceAction(self):

        localctx = MySqlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_referenceAction)
        self._la = 0 # Token type
        try:
            self.state = 1505
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1489
                self.match(MySqlParser.ON)
                self.state = 1490
                self.match(MySqlParser.DELETE)
                self.state = 1491
                localctx.onDelete = self.referenceControlType()
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ON:
                    self.state = 1492
                    self.match(MySqlParser.ON)
                    self.state = 1493
                    self.match(MySqlParser.UPDATE)
                    self.state = 1494
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1497
                self.match(MySqlParser.ON)
                self.state = 1498
                self.match(MySqlParser.UPDATE)
                self.state = 1499
                localctx.onUpdate = self.referenceControlType()
                self.state = 1503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ON:
                    self.state = 1500
                    self.match(MySqlParser.ON)
                    self.state = 1501
                    self.match(MySqlParser.DELETE)
                    self.state = 1502
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReferenceControlTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceControlType

        def enterRule(self, listener):
            if hasattr(listener, "enterReferenceControlType"):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReferenceControlType"):
                listener.exitReferenceControlType(self)




    def referenceControlType(self):

        localctx = MySqlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_referenceControlType)
        try:
            self.state = 1513
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.RESTRICT]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1507
                self.match(MySqlParser.RESTRICT)
                pass
            elif token in [MySqlParser.CASCADE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1508
                self.match(MySqlParser.CASCADE)
                pass
            elif token in [MySqlParser.SET]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1509
                self.match(MySqlParser.SET)
                self.state = 1510
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [MySqlParser.NO]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1511
                self.match(MySqlParser.NO)
                self.state = 1512
                self.match(MySqlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexColumnDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx):
            super(MySqlParser.IndexColumnDefinitionContext, self).copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.IndexColumnDefinitionContext)
            super(MySqlParser.SpecialIndexDeclarationContext, self).__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSpecialIndexDeclaration"):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecialIndexDeclaration"):
                listener.exitSpecialIndexDeclaration(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.IndexColumnDefinitionContext)
            super(MySqlParser.SimpleIndexDeclarationContext, self).__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleIndexDeclaration"):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleIndexDeclaration"):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = MySqlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1543
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.INDEX, MySqlParser.KEY]:
                localctx = MySqlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1515
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 1516
                    self.uid()


                self.state = 1520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 1519
                    self.indexType()


                self.state = 1522
                self.indexColumnNames()
                self.state = 1526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 1523
                    self.indexOption()
                    self.state = 1528
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.FULLTEXT, MySqlParser.SPATIAL]:
                localctx = MySqlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1529
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 1530
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 1533
                    self.uid()


                self.state = 1536
                self.indexColumnNames()
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 1537
                    self.indexOption()
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.TableOptionContext, self).copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionEngineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionEngine"):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionEngine"):
                listener.exitTableOptionEngine(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionMaxRowsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionMaxRows"):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionMaxRows"):
                listener.exitTableOptionMaxRows(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionCollateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionCollate"):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionCollate"):
                listener.exitTableOptionCollate(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionPersistentContext, self).__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionPersistent"):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionPersistent"):
                listener.exitTableOptionPersistent(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionTablespaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(MySqlParser.TablespaceStorageContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionTablespace"):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionTablespace"):
                listener.exitTableOptionTablespace(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionPackKeysContext, self).__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionPackKeys"):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionPackKeys"):
                listener.exitTableOptionPackKeys(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionPasswordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionPassword"):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionPassword"):
                listener.exitTableOptionPassword(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionUnionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionUnion"):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionUnion"):
                listener.exitTableOptionUnion(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionSamplePageContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionSamplePage"):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionSamplePage"):
                listener.exitTableOptionSamplePage(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionCharset"):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionCharset"):
                listener.exitTableOptionCharset(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionIndexDirectoryContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionIndexDirectory"):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionIndexDirectory"):
                listener.exitTableOptionIndexDirectory(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionKeyBlockSizeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionKeyBlockSize"):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionKeyBlockSize"):
                listener.exitTableOptionKeyBlockSize(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionEncryptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionEncryption"):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionEncryption"):
                listener.exitTableOptionEncryption(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionDataDirectoryContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionDataDirectory"):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionDataDirectory"):
                listener.exitTableOptionDataDirectory(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionRecalculationContext, self).__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionRecalculation"):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionRecalculation"):
                listener.exitTableOptionRecalculation(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionAutoIncrementContext, self).__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionAutoIncrement"):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionAutoIncrement"):
                listener.exitTableOptionAutoIncrement(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionChecksumContext, self).__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionChecksum"):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionChecksum"):
                listener.exitTableOptionChecksum(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionDelayContext, self).__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionDelay"):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionDelay"):
                listener.exitTableOptionDelay(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionConnectionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionConnection"):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionConnection"):
                listener.exitTableOptionConnection(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionCommentContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionComment"):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionComment"):
                listener.exitTableOptionComment(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionAverageContext, self).__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionAverage"):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionAverage"):
                listener.exitTableOptionAverage(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionRowFormatContext, self).__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionRowFormat"):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionRowFormat"):
                listener.exitTableOptionRowFormat(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionCompressionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionCompression"):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionCompression"):
                listener.exitTableOptionCompression(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionInsertMethodContext, self).__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionInsertMethod"):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionInsertMethod"):
                listener.exitTableOptionInsertMethod(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableOptionContext)
            super(MySqlParser.TableOptionMinRowsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableOptionMinRows"):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableOptionMinRows"):
                listener.exitTableOptionMinRows(self)



    def tableOption(self):

        localctx = MySqlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1685
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1545
                self.match(MySqlParser.ENGINE)
                self.state = 1547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1546
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1549
                self.engineName()
                pass

            elif la_ == 2:
                localctx = MySqlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1550
                self.match(MySqlParser.AUTO_INCREMENT)
                self.state = 1552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1551
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1554
                self.decimalLiteral()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1555
                self.match(MySqlParser.AVG_ROW_LENGTH)
                self.state = 1557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1556
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1559
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = MySqlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1560
                    self.match(MySqlParser.DEFAULT)


                self.state = 1566
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 1563
                    self.match(MySqlParser.CHARACTER)
                    self.state = 1564
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 1565
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1568
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1571
                self.charsetName()
                pass

            elif la_ == 5:
                localctx = MySqlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1572
                self.match(MySqlParser.CHECKSUM)
                self.state = 1574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1573
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1576
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 6:
                localctx = MySqlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 1577
                    self.match(MySqlParser.DEFAULT)


                self.state = 1580
                self.match(MySqlParser.COLLATE)
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1581
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1584
                self.collationName()
                pass

            elif la_ == 7:
                localctx = MySqlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1585
                self.match(MySqlParser.COMMENT)
                self.state = 1587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1586
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1589
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 8:
                localctx = MySqlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1590
                self.match(MySqlParser.COMPRESSION)
                self.state = 1592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1591
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1594
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 9:
                localctx = MySqlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1595
                self.match(MySqlParser.CONNECTION)
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1596
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1599
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = MySqlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1600
                self.match(MySqlParser.DATA)
                self.state = 1601
                self.match(MySqlParser.DIRECTORY)
                self.state = 1603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1602
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1605
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1606
                self.match(MySqlParser.DELAY_KEY_WRITE)
                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1607
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1610
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1611
                self.match(MySqlParser.ENCRYPTION)
                self.state = 1613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1612
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1615
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = MySqlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1616
                self.match(MySqlParser.INDEX)
                self.state = 1617
                self.match(MySqlParser.DIRECTORY)
                self.state = 1619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1618
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1621
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 14:
                localctx = MySqlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1622
                self.match(MySqlParser.INSERT_METHOD)
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1623
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1626
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NO):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1627
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1628
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1631
                self.fileSizeLiteral()
                pass

            elif la_ == 16:
                localctx = MySqlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1632
                self.match(MySqlParser.MAX_ROWS)
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1633
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1636
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = MySqlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1637
                self.match(MySqlParser.MIN_ROWS)
                self.state = 1639
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1638
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1641
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1642
                self.match(MySqlParser.PACK_KEYS)
                self.state = 1644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1643
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1646
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 19:
                localctx = MySqlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1647
                self.match(MySqlParser.PASSWORD)
                self.state = 1649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1648
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1651
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 20:
                localctx = MySqlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1652
                self.match(MySqlParser.ROW_FORMAT)
                self.state = 1654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1653
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1656
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or ((((_la - 278)) & ~0x3f) == 0 and ((1 << (_la - 278)) & ((1 << (MySqlParser.COMPACT - 278)) | (1 << (MySqlParser.COMPRESSED - 278)) | (1 << (MySqlParser.DYNAMIC - 278)) | (1 << (MySqlParser.FIXED - 278)))) != 0) or _la==MySqlParser.REDUNDANT):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 21:
                localctx = MySqlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1657
                self.match(MySqlParser.STATS_AUTO_RECALC)
                self.state = 1659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1658
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1661
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = MySqlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1662
                self.match(MySqlParser.STATS_PERSISTENT)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1663
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1666
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 23:
                localctx = MySqlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1667
                self.match(MySqlParser.STATS_SAMPLE_PAGES)
                self.state = 1669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1668
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1671
                self.decimalLiteral()
                pass

            elif la_ == 24:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1672
                self.match(MySqlParser.TABLESPACE)
                self.state = 1673
                self.uid()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 1674
                    self.tablespaceStorage()


                pass

            elif la_ == 25:
                localctx = MySqlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1677
                self.match(MySqlParser.UNION)
                self.state = 1679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1678
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1681
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1682
                self.tables()
                self.state = 1683
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TablespaceStorageContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tablespaceStorage

        def enterRule(self, listener):
            if hasattr(listener, "enterTablespaceStorage"):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTablespaceStorage"):
                listener.exitTablespaceStorage(self)




    def tablespaceStorage(self):

        localctx = MySqlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1687
            self.match(MySqlParser.STORAGE)
            self.state = 1688
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.DISK or _la==MySqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionDefinitionsContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.BY)
            else:
                return self.getToken(MySqlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.SubpartitionFunctionDefinitionContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinitions

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionDefinitions"):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionDefinitions"):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySqlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(MySqlParser.PARTITION)
            self.state = 1691
            self.match(MySqlParser.BY)
            self.state = 1692
            self.partitionFunctionDefinition()
            self.state = 1695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITIONS:
                self.state = 1693
                self.match(MySqlParser.PARTITIONS)
                self.state = 1694
                localctx.count = self.decimalLiteral()


            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUBPARTITION:
                self.state = 1697
                self.match(MySqlParser.SUBPARTITION)
                self.state = 1698
                self.match(MySqlParser.BY)
                self.state = 1699
                self.subpartitionFunctionDefinition()
                self.state = 1702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITIONS:
                    self.state = 1700
                    self.match(MySqlParser.SUBPARTITIONS)
                    self.state = 1701
                    localctx.subCount = self.decimalLiteral()




            self.state = 1717
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1706
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1707
                self.partitionDefinition()
                self.state = 1712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1708
                    self.match(MySqlParser.COMMA)
                    self.state = 1709
                    self.partitionDefinition()
                    self.state = 1714
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1715
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionFunctionDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx):
            super(MySqlParser.PartitionFunctionDefinitionContext, self).copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionFunctionDefinitionContext)
            super(MySqlParser.PartitionFunctionKeyContext, self).__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionFunctionKey"):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionFunctionKey"):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionFunctionDefinitionContext)
            super(MySqlParser.PartitionFunctionHashContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionFunctionHash"):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionFunctionHash"):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionFunctionDefinitionContext)
            super(MySqlParser.PartitionFunctionListContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionFunctionList"):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionFunctionList"):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionFunctionDefinitionContext)
            super(MySqlParser.PartitionFunctionRangeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionFunctionRange"):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionFunctionRange"):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = MySqlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1764
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1719
                    self.match(MySqlParser.LINEAR)


                self.state = 1722
                self.match(MySqlParser.HASH)
                self.state = 1723
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1724
                self.expression(0)
                self.state = 1725
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1727
                    self.match(MySqlParser.LINEAR)


                self.state = 1730
                self.match(MySqlParser.KEY)
                self.state = 1734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 1731
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 1732
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 1733
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1736
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1737
                self.uidList()
                self.state = 1738
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1740
                self.match(MySqlParser.RANGE)
                self.state = 1750
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 1741
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1742
                    self.expression(0)
                    self.state = 1743
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 1745
                    self.match(MySqlParser.COLUMNS)
                    self.state = 1746
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1747
                    self.uidList()
                    self.state = 1748
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1752
                self.match(MySqlParser.LIST)
                self.state = 1762
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.LR_BRACKET]:
                    self.state = 1753
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1754
                    self.expression(0)
                    self.state = 1755
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [MySqlParser.COLUMNS]:
                    self.state = 1757
                    self.match(MySqlParser.COLUMNS)
                    self.state = 1758
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1759
                    self.uidList()
                    self.state = 1760
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SubpartitionFunctionDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx):
            super(MySqlParser.SubpartitionFunctionDefinitionContext, self).copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SubpartitionFunctionDefinitionContext)
            super(MySqlParser.SubPartitionFunctionHashContext, self).__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubPartitionFunctionHash"):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubPartitionFunctionHash"):
                listener.exitSubPartitionFunctionHash(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SubpartitionFunctionDefinitionContext)
            super(MySqlParser.SubPartitionFunctionKeyContext, self).__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubPartitionFunctionKey"):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubPartitionFunctionKey"):
                listener.exitSubPartitionFunctionKey(self)



    def subpartitionFunctionDefinition(self):

        localctx = MySqlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1787
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1766
                    self.match(MySqlParser.LINEAR)


                self.state = 1769
                self.match(MySqlParser.HASH)
                self.state = 1770
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1771
                self.expression(0)
                self.state = 1772
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINEAR:
                    self.state = 1774
                    self.match(MySqlParser.LINEAR)


                self.state = 1777
                self.match(MySqlParser.KEY)
                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALGORITHM:
                    self.state = 1778
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 1779
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 1780
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ONE_DECIMAL or _la==MySqlParser.TWO_DECIMAL):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1783
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1784
                self.uidList()
                self.state = 1785
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx):
            super(MySqlParser.PartitionDefinitionContext, self).copyFrom(ctx)



    class PartitionComparisionContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionDefinitionContext)
            super(MySqlParser.PartitionComparisionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)
        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinerAtom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionComparision"):
                listener.enterPartitionComparision(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionComparision"):
                listener.exitPartitionComparision(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionDefinitionContext)
            super(MySqlParser.PartitionListAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinerAtom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionListAtom"):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionListAtom"):
                listener.exitPartitionListAtom(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionDefinitionContext)
            super(MySqlParser.PartitionListVectorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinerVector(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerVectorContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionListVector"):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionListVector"):
                listener.exitPartitionListVector(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionDefinitionContext)
            super(MySqlParser.PartitionSimpleContext, self).__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def partitionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionSimple"):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionSimple"):
                listener.exitPartitionSimple(self)



    def partitionDefinition(self):

        localctx = MySqlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,217,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionComparisionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1789
                self.match(MySqlParser.PARTITION)
                self.state = 1790
                self.uid()
                self.state = 1791
                self.match(MySqlParser.VALUES)
                self.state = 1792
                self.match(MySqlParser.LESS)
                self.state = 1793
                self.match(MySqlParser.THAN)
                self.state = 1794
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1795
                self.partitionDefinerAtom()
                self.state = 1800
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1796
                    self.match(MySqlParser.COMMA)
                    self.state = 1797
                    self.partitionDefinerAtom()
                    self.state = 1802
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1803
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.INDEX or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (MySqlParser.COMMENT - 276)) | (1 << (MySqlParser.DATA - 276)) | (1 << (MySqlParser.ENGINE - 276)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.MAX_ROWS - 394)) | (1 << (MySqlParser.MIN_ROWS - 394)) | (1 << (MySqlParser.NODEGROUP - 394)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1804
                    self.partitionOption()
                    self.state = 1809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITION:
                    self.state = 1810
                    self.subpartitionDefinition()
                    self.state = 1815
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,204,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1811
                            self.match(MySqlParser.COMMA)
                            self.state = 1812
                            self.subpartitionDefinition() 
                        self.state = 1817
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,204,self._ctx)



                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.match(MySqlParser.PARTITION)
                self.state = 1821
                self.uid()
                self.state = 1822
                self.match(MySqlParser.VALUES)
                self.state = 1823
                self.match(MySqlParser.IN)
                self.state = 1824
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1825
                self.partitionDefinerAtom()
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1826
                    self.match(MySqlParser.COMMA)
                    self.state = 1827
                    self.partitionDefinerAtom()
                    self.state = 1832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1833
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.INDEX or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (MySqlParser.COMMENT - 276)) | (1 << (MySqlParser.DATA - 276)) | (1 << (MySqlParser.ENGINE - 276)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.MAX_ROWS - 394)) | (1 << (MySqlParser.MIN_ROWS - 394)) | (1 << (MySqlParser.NODEGROUP - 394)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1834
                    self.partitionOption()
                    self.state = 1839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITION:
                    self.state = 1840
                    self.subpartitionDefinition()
                    self.state = 1845
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,208,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1841
                            self.match(MySqlParser.COMMA)
                            self.state = 1842
                            self.subpartitionDefinition() 
                        self.state = 1847
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,208,self._ctx)



                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1850
                self.match(MySqlParser.PARTITION)
                self.state = 1851
                self.uid()
                self.state = 1852
                self.match(MySqlParser.VALUES)
                self.state = 1853
                self.match(MySqlParser.IN)
                self.state = 1854
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1855
                self.partitionDefinerVector()
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 1856
                    self.match(MySqlParser.COMMA)
                    self.state = 1857
                    self.partitionDefinerVector()
                    self.state = 1862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1863
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.INDEX or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (MySqlParser.COMMENT - 276)) | (1 << (MySqlParser.DATA - 276)) | (1 << (MySqlParser.ENGINE - 276)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.MAX_ROWS - 394)) | (1 << (MySqlParser.MIN_ROWS - 394)) | (1 << (MySqlParser.NODEGROUP - 394)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1864
                    self.partitionOption()
                    self.state = 1869
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITION:
                    self.state = 1870
                    self.subpartitionDefinition()
                    self.state = 1875
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,212,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1871
                            self.match(MySqlParser.COMMA)
                            self.state = 1872
                            self.subpartitionDefinition() 
                        self.state = 1877
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,212,self._ctx)



                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1880
                self.match(MySqlParser.PARTITION)
                self.state = 1881
                self.uid()
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.INDEX or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (MySqlParser.COMMENT - 276)) | (1 << (MySqlParser.DATA - 276)) | (1 << (MySqlParser.ENGINE - 276)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.MAX_ROWS - 394)) | (1 << (MySqlParser.MIN_ROWS - 394)) | (1 << (MySqlParser.NODEGROUP - 394)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                    self.state = 1882
                    self.partitionOption()
                    self.state = 1887
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SUBPARTITION:
                    self.state = 1888
                    self.subpartitionDefinition()
                    self.state = 1893
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1889
                            self.match(MySqlParser.COMMA)
                            self.state = 1890
                            self.subpartitionDefinition() 
                        self.state = 1895
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,215,self._ctx)



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionDefinerAtomContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerAtom

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionDefinerAtom"):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionDefinerAtom"):
                listener.exitPartitionDefinerAtom(self)




    def partitionDefinerAtom(self):

        localctx = MySqlParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_partitionDefinerAtom)
        try:
            self.state = 1903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,218,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1900
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1901
                self.match(MySqlParser.MAXVALUE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1902
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionDefinerVectorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinerAtom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerVector

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionDefinerVector"):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionDefinerVector"):
                listener.exitPartitionDefinerVector(self)




    def partitionDefinerVector(self):

        localctx = MySqlParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1905
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1906
            self.partitionDefinerAtom()
            self.state = 1909 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1907
                self.match(MySqlParser.COMMA)
                self.state = 1908
                self.partitionDefinerAtom()
                self.state = 1911 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COMMA):
                    break

            self.state = 1913
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SubpartitionDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def partitionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionDefinition

        def enterRule(self, listener):
            if hasattr(listener, "enterSubpartitionDefinition"):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubpartitionDefinition"):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySqlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1915
            self.match(MySqlParser.SUBPARTITION)
            self.state = 1916
            self.uid()
            self.state = 1920
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.INDEX or ((((_la - 276)) & ~0x3f) == 0 and ((1 << (_la - 276)) & ((1 << (MySqlParser.COMMENT - 276)) | (1 << (MySqlParser.DATA - 276)) | (1 << (MySqlParser.ENGINE - 276)))) != 0) or ((((_la - 394)) & ~0x3f) == 0 and ((1 << (_la - 394)) & ((1 << (MySqlParser.MAX_ROWS - 394)) | (1 << (MySqlParser.MIN_ROWS - 394)) | (1 << (MySqlParser.NODEGROUP - 394)))) != 0) or _la==MySqlParser.STORAGE or _la==MySqlParser.TABLESPACE:
                self.state = 1917
                self.partitionOption()
                self.state = 1922
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PartitionOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.PartitionOptionContext, self).copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionCommentContext, self).__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionComment"):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionComment"):
                listener.exitPartitionOptionComment(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionNodeGroupContext, self).__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionNodeGroup"):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionNodeGroup"):
                listener.exitPartitionOptionNodeGroup(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionIndexDirectoryContext, self).__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionIndexDirectory"):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionIndexDirectory"):
                listener.exitPartitionOptionIndexDirectory(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionMaxRowsContext, self).__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionMaxRows"):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionMaxRows"):
                listener.exitPartitionOptionMaxRows(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionTablespaceContext, self).__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionTablespace"):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionTablespace"):
                listener.exitPartitionOptionTablespace(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionEngineContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionEngine"):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionEngine"):
                listener.exitPartitionOptionEngine(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionMinRowsContext, self).__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionMinRows"):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionMinRows"):
                listener.exitPartitionOptionMinRows(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PartitionOptionContext)
            super(MySqlParser.PartitionOptionDataDirectoryContext, self).__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPartitionOptionDataDirectory"):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPartitionOptionDataDirectory"):
                listener.exitPartitionOptionDataDirectory(self)



    def partitionOption(self):

        localctx = MySqlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 1968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ENGINE, MySqlParser.STORAGE]:
                localctx = MySqlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 1923
                    self.match(MySqlParser.STORAGE)


                self.state = 1926
                self.match(MySqlParser.ENGINE)
                self.state = 1928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1927
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1930
                self.engineName()
                pass
            elif token in [MySqlParser.COMMENT]:
                localctx = MySqlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1931
                self.match(MySqlParser.COMMENT)
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1932
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1935
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATA]:
                localctx = MySqlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1936
                self.match(MySqlParser.DATA)
                self.state = 1937
                self.match(MySqlParser.DIRECTORY)
                self.state = 1939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1938
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1941
                localctx.dataDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.INDEX]:
                localctx = MySqlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1942
                self.match(MySqlParser.INDEX)
                self.state = 1943
                self.match(MySqlParser.DIRECTORY)
                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1944
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1947
                localctx.indexDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MAX_ROWS]:
                localctx = MySqlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1948
                self.match(MySqlParser.MAX_ROWS)
                self.state = 1950
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1949
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1952
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.MIN_ROWS]:
                localctx = MySqlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1953
                self.match(MySqlParser.MIN_ROWS)
                self.state = 1955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1954
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1957
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [MySqlParser.TABLESPACE]:
                localctx = MySqlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1958
                self.match(MySqlParser.TABLESPACE)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1959
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1962
                localctx.tablespace = self.uid()
                pass
            elif token in [MySqlParser.NODEGROUP]:
                localctx = MySqlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1963
                self.match(MySqlParser.NODEGROUP)
                self.state = 1965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 1964
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1967
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterDatabaseContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx):
            super(MySqlParser.AlterDatabaseContext, self).copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterDatabaseContext)
            super(MySqlParser.AlterUpgradeNameContext, self).__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterUpgradeName"):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterUpgradeName"):
                listener.exitAlterUpgradeName(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterDatabaseContext)
            super(MySqlParser.AlterSimpleDatabaseContext, self).__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def createDatabaseOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterSimpleDatabase"):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterSimpleDatabase"):
                listener.exitAlterSimpleDatabase(self)



    def alterDatabase(self):

        localctx = MySqlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 1988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,233,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1970
                self.match(MySqlParser.ALTER)
                self.state = 1971
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1973
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
                if la_ == 1:
                    self.state = 1972
                    self.uid()


                self.state = 1976 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 1975
                    self.createDatabaseOption()
                    self.state = 1978 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CHARACTER) | (1 << MySqlParser.COLLATE) | (1 << MySqlParser.DEFAULT))) != 0) or _la==MySqlParser.CHARSET):
                        break

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1980
                self.match(MySqlParser.ALTER)
                self.state = 1981
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1982
                self.uid()
                self.state = 1983
                self.match(MySqlParser.UPGRADE)
                self.state = 1984
                self.match(MySqlParser.DATA)
                self.state = 1985
                self.match(MySqlParser.DIRECTORY)
                self.state = 1986
                self.match(MySqlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterEventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ON(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterEvent

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterEvent"):
                listener.enterAlterEvent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterEvent"):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySqlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1990
            self.match(MySqlParser.ALTER)
            self.state = 1992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 1991
                self.ownerStatement()


            self.state = 1994
            self.match(MySqlParser.EVENT)
            self.state = 1995
            self.fullId()
            self.state = 1999
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.state = 1996
                self.match(MySqlParser.ON)
                self.state = 1997
                self.match(MySqlParser.SCHEDULE)
                self.state = 1998
                self.scheduleExpression()


            self.state = 2007
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 2001
                self.match(MySqlParser.ON)
                self.state = 2002
                self.match(MySqlParser.COMPLETION)
                self.state = 2004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 2003
                    self.match(MySqlParser.NOT)


                self.state = 2006
                self.match(MySqlParser.PRESERVE)


            self.state = 2012
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.RENAME:
                self.state = 2009
                self.match(MySqlParser.RENAME)
                self.state = 2010
                self.match(MySqlParser.TO)
                self.state = 2011
                self.fullId()


            self.state = 2015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DISABLE or _la==MySqlParser.ENABLE:
                self.state = 2014
                self.enableType()


            self.state = 2019
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMENT:
                self.state = 2017
                self.match(MySqlParser.COMMENT)
                self.state = 2018
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 2023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DO:
                self.state = 2021
                self.match(MySqlParser.DO)
                self.state = 2022
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterFunction

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterFunction"):
                listener.enterAlterFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterFunction"):
                listener.exitAlterFunction(self)




    def alterFunction(self):

        localctx = MySqlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2025
            self.match(MySqlParser.ALTER)
            self.state = 2026
            self.match(MySqlParser.FUNCTION)
            self.state = 2027
            self.fullId()
            self.state = 2031
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (MySqlParser.MODIFIES - 95)) | (1 << (MySqlParser.NOT - 95)) | (1 << (MySqlParser.READS - 95)) | (1 << (MySqlParser.SQL - 95)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2028
                self.routineOption()
                self.state = 2033
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterInstanceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterInstance

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterInstance"):
                listener.enterAlterInstance(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterInstance"):
                listener.exitAlterInstance(self)




    def alterInstance(self):

        localctx = MySqlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(MySqlParser.ALTER)
            self.state = 2035
            self.match(MySqlParser.INSTANCE)
            self.state = 2036
            self.match(MySqlParser.ROTATE)
            self.state = 2037
            self.match(MySqlParser.INNODB)
            self.state = 2038
            self.match(MySqlParser.MASTER)
            self.state = 2039
            self.match(MySqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterLogfileGroupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterLogfileGroup

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterLogfileGroup"):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterLogfileGroup"):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySqlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(MySqlParser.ALTER)
            self.state = 2042
            self.match(MySqlParser.LOGFILE)
            self.state = 2043
            self.match(MySqlParser.GROUP)
            self.state = 2044
            self.uid()
            self.state = 2045
            self.match(MySqlParser.ADD)
            self.state = 2046
            self.match(MySqlParser.UNDOFILE)
            self.state = 2047
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2048
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2050
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2049
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2052
                self.fileSizeLiteral()


            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2055
                self.match(MySqlParser.WAIT)


            self.state = 2058
            self.match(MySqlParser.ENGINE)
            self.state = 2060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2059
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2062
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterProcedureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterProcedure

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterProcedure"):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterProcedure"):
                listener.exitAlterProcedure(self)




    def alterProcedure(self):

        localctx = MySqlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2064
            self.match(MySqlParser.ALTER)
            self.state = 2065
            self.match(MySqlParser.PROCEDURE)
            self.state = 2066
            self.fullId()
            self.state = 2070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DETERMINISTIC or ((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & ((1 << (MySqlParser.MODIFIES - 95)) | (1 << (MySqlParser.NOT - 95)) | (1 << (MySqlParser.READS - 95)) | (1 << (MySqlParser.SQL - 95)))) != 0) or _la==MySqlParser.COMMENT or _la==MySqlParser.CONTAINS or _la==MySqlParser.LANGUAGE or _la==MySqlParser.NO:
                self.state = 2067
                self.routineOption()
                self.state = 2072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterServerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterServer

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterServer"):
                listener.enterAlterServer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterServer"):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySqlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2073
            self.match(MySqlParser.ALTER)
            self.state = 2074
            self.match(MySqlParser.SERVER)
            self.state = 2075
            self.uid()
            self.state = 2076
            self.match(MySqlParser.OPTIONS)
            self.state = 2077
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2078
            self.serverOption()
            self.state = 2083
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2079
                self.match(MySqlParser.COMMA)
                self.state = 2080
                self.serverOption()
                self.state = 2085
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2086
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def alterSpecification(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AlterSpecificationContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTable

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterTable"):
                listener.enterAlterTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterTable"):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySqlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2088
            self.match(MySqlParser.ALTER)
            self.state = 2090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE:
                self.state = 2089
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2092
                self.match(MySqlParser.IGNORE)


            self.state = 2095
            self.match(MySqlParser.TABLE)
            self.state = 2096
            self.tableName()
            self.state = 2097
            self.alterSpecification()
            self.state = 2102
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2098
                self.match(MySqlParser.COMMA)
                self.state = 2099
                self.alterSpecification()
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2105
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterTablespaceContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTablespace

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterTablespace"):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterTablespace"):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySqlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2108
            self.match(MySqlParser.ALTER)
            self.state = 2109
            self.match(MySqlParser.TABLESPACE)
            self.state = 2110
            self.uid()
            self.state = 2111
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ADD or _la==MySqlParser.DROP):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2112
            self.match(MySqlParser.DATAFILE)
            self.state = 2113
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INITIAL_SIZE:
                self.state = 2114
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2115
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2116
                self.fileSizeLiteral()


            self.state = 2120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WAIT:
                self.state = 2119
                self.match(MySqlParser.WAIT)


            self.state = 2122
            self.match(MySqlParser.ENGINE)
            self.state = 2124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EQUAL_SYMBOL:
                self.state = 2123
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2126
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterViewContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterView

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterView"):
                listener.enterAlterView(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterView"):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySqlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2128
            self.match(MySqlParser.ALTER)
            self.state = 2132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 2129
                self.match(MySqlParser.ALGORITHM)
                self.state = 2130
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2131
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MERGE or _la==MySqlParser.TEMPTABLE or _la==MySqlParser.UNDEFINED):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFINER:
                self.state = 2134
                self.ownerStatement()


            self.state = 2140
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SQL:
                self.state = 2137
                self.match(MySqlParser.SQL)
                self.state = 2138
                self.match(MySqlParser.SECURITY)
                self.state = 2139
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFINER or _la==MySqlParser.INVOKER):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2142
            self.match(MySqlParser.VIEW)
            self.state = 2143
            self.fullId()
            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2144
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2145
                self.uidList()
                self.state = 2146
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2150
            self.match(MySqlParser.AS)
            self.state = 2151
            self.selectStatement()
            self.state = 2158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 2152
                self.match(MySqlParser.WITH)
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL:
                    self.state = 2153
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CASCADED or _la==MySqlParser.LOCAL):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2156
                self.match(MySqlParser.CHECK)
                self.state = 2157
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterSpecificationContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx):
            super(MySqlParser.AlterSpecificationContext, self).copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDisableKeysContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDisableKeys"):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDisableKeys"):
                listener.exitAlterByDisableKeys(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDefaultCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDefaultCharset"):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDefaultCharset"):
                listener.exitAlterByDefaultCharset(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByRenameColumnContext, self).__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByRenameColumn"):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByRenameColumn"):
                listener.exitAlterByRenameColumn(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByConvertCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByConvertCharset"):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByConvertCharset"):
                listener.exitAlterByConvertCharset(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddPartition"):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddPartition"):
                listener.exitAlterByAddPartition(self)


    class AlterByAnalyzePartitiionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAnalyzePartitiionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAnalyzePartitiion"):
                listener.enterAlterByAnalyzePartitiion(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAnalyzePartitiion"):
                listener.exitAlterByAnalyzePartitiion(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddForeignKeyContext, self).__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddForeignKey"):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddForeignKey"):
                listener.exitAlterByAddForeignKey(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByRemovePartitioningContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByRemovePartitioning"):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByRemovePartitioning"):
                listener.exitAlterByRemovePartitioning(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByRenameContext, self).__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByRename"):
                listener.enterAlterByRename(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByRename"):
                listener.exitAlterByRename(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByOptimizePartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByOptimizePartition"):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByOptimizePartition"):
                listener.exitAlterByOptimizePartition(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByImportTablespaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByImportTablespace"):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByImportTablespace"):
                listener.exitAlterByImportTablespace(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByCoalescePartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByCoalescePartition"):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByCoalescePartition"):
                listener.exitAlterByCoalescePartition(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddColumnsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddColumns"):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddColumns"):
                listener.exitAlterByAddColumns(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDropForeignKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDropForeignKey"):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDropForeignKey"):
                listener.exitAlterByDropForeignKey(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddCheckTableConstraintContext, self).__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddCheckTableConstraint"):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddCheckTableConstraint"):
                listener.exitAlterByAddCheckTableConstraint(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByRebuildPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByRebuildPartition"):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByRebuildPartition"):
                listener.exitAlterByRebuildPartition(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByUpgradePartitioningContext, self).__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByUpgradePartitioning"):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByUpgradePartitioning"):
                listener.exitAlterByUpgradePartitioning(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByRepairPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByRepairPartition"):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByRepairPartition"):
                listener.exitAlterByRepairPartition(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByExchangePartitionContext, self).__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WITH(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByExchangePartition"):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByExchangePartition"):
                listener.exitAlterByExchangePartition(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddIndexContext, self).__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddIndex"):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddIndex"):
                listener.exitAlterByAddIndex(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDropColumnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDropColumn"):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDropColumn"):
                listener.exitAlterByDropColumn(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByImportPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByImportPartition"):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByImportPartition"):
                listener.exitAlterByImportPartition(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByChangeDefaultContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByChangeDefault"):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByChangeDefault"):
                listener.exitAlterByChangeDefault(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByForceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByForce"):
                listener.enterAlterByForce(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByForce"):
                listener.exitAlterByForce(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDropPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDropPartition"):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDropPartition"):
                listener.exitAlterByDropPartition(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddSpecialIndexContext, self).__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddSpecialIndex"):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddSpecialIndex"):
                listener.exitAlterByAddSpecialIndex(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByModifyColumnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByModifyColumn"):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByModifyColumn"):
                listener.exitAlterByModifyColumn(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByTableOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self):
            return self.getTypedRuleContext(MySqlParser.TableOptionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByTableOption"):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByTableOption"):
                listener.exitAlterByTableOption(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDropPrimaryKeyContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDropPrimaryKey"):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDropPrimaryKey"):
                listener.exitAlterByDropPrimaryKey(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByLockContext, self).__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByLock"):
                listener.enterAlterByLock(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByLock"):
                listener.exitAlterByLock(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDiscardPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDiscardPartition"):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDiscardPartition"):
                listener.exitAlterByDiscardPartition(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDiscardTablespaceContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDiscardTablespace"):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDiscardTablespace"):
                listener.exitAlterByDiscardTablespace(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByValidateContext, self).__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByValidate"):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByValidate"):
                listener.exitAlterByValidate(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddPrimaryKeyContext, self).__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddPrimaryKey"):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddPrimaryKey"):
                listener.exitAlterByAddPrimaryKey(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByCheckPartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByCheckPartition"):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByCheckPartition"):
                listener.exitAlterByCheckPartition(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByEnableKeysContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByEnableKeys"):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByEnableKeys"):
                listener.exitAlterByEnableKeys(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByReorganizePartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByReorganizePartition"):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByReorganizePartition"):
                listener.exitAlterByReorganizePartition(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterBySetAlgorithmContext, self).__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterBySetAlgorithm"):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterBySetAlgorithm"):
                listener.exitAlterBySetAlgorithm(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByChangeColumnContext, self).__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByChangeColumn"):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByChangeColumn"):
                listener.exitAlterByChangeColumn(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddUniqueKeyContext, self).__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddUniqueKey"):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddUniqueKey"):
                listener.exitAlterByAddUniqueKey(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByTruncatePartitionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByTruncatePartition"):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByTruncatePartition"):
                listener.exitAlterByTruncatePartition(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByDropIndexContext, self).__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByDropIndex"):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByDropIndex"):
                listener.exitAlterByDropIndex(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByAddColumnContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByAddColumn"):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByAddColumn"):
                listener.exitAlterByAddColumn(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterSpecificationContext)
            super(MySqlParser.AlterByOrderContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAlterByOrder"):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterByOrder"):
                listener.exitAlterByOrder(self)



    def alterSpecification(self):

        localctx = MySqlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2490
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,311,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2160
                self.tableOption()
                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2161
                self.match(MySqlParser.ADD)
                self.state = 2163
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2162
                    self.match(MySqlParser.COLUMN)


                self.state = 2165
                self.uid()
                self.state = 2166
                self.columnDefinition()
                self.state = 2170
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2167
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2168
                    self.match(MySqlParser.AFTER)
                    self.state = 2169
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.PARTITION, MySqlParser.MINUSMINUS, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = MySqlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2172
                self.match(MySqlParser.ADD)
                self.state = 2174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2173
                    self.match(MySqlParser.COLUMN)


                self.state = 2176
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2177
                self.uid()
                self.state = 2178
                self.columnDefinition()
                self.state = 2185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2179
                    self.match(MySqlParser.COMMA)
                    self.state = 2180
                    self.uid()
                    self.state = 2181
                    self.columnDefinition()
                    self.state = 2187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2188
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2190
                self.match(MySqlParser.ADD)
                self.state = 2191
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 2192
                    self.uid()


                self.state = 2196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2195
                    self.indexType()


                self.state = 2198
                self.indexColumnNames()
                self.state = 2202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 2199
                    self.indexOption()
                    self.state = 2204
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = MySqlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2205
                self.match(MySqlParser.ADD)
                self.state = 2210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2206
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 2207
                        localctx.name = self.uid()




                self.state = 2212
                self.match(MySqlParser.PRIMARY)
                self.state = 2213
                self.match(MySqlParser.KEY)
                self.state = 2215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2214
                    self.indexType()


                self.state = 2217
                self.indexColumnNames()
                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 2218
                    self.indexOption()
                    self.state = 2223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = MySqlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2224
                self.match(MySqlParser.ADD)
                self.state = 2229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2225
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2227
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 2226
                        localctx.name = self.uid()




                self.state = 2231
                self.match(MySqlParser.UNIQUE)
                self.state = 2233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2232
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 2235
                    localctx.indexName = self.uid()


                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 2238
                    self.indexType()


                self.state = 2241
                self.indexColumnNames()
                self.state = 2245
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 2242
                    self.indexOption()
                    self.state = 2247
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = MySqlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2248
                self.match(MySqlParser.ADD)
                self.state = 2249
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FULLTEXT or _la==MySqlParser.SPATIAL):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 2250
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 2253
                    self.uid()


                self.state = 2256
                self.indexColumnNames()
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.USING or _la==MySqlParser.WITH or _la==MySqlParser.COMMENT or _la==MySqlParser.KEY_BLOCK_SIZE:
                    self.state = 2257
                    self.indexOption()
                    self.state = 2262
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = MySqlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2263
                self.match(MySqlParser.ADD)
                self.state = 2268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2264
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2266
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 2265
                        localctx.name = self.uid()




                self.state = 2270
                self.match(MySqlParser.FOREIGN)
                self.state = 2271
                self.match(MySqlParser.KEY)
                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 2272
                    localctx.indexName = self.uid()


                self.state = 2275
                self.indexColumnNames()
                self.state = 2276
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = MySqlParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2278
                self.match(MySqlParser.ADD)
                self.state = 2283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CONSTRAINT:
                    self.state = 2279
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                        self.state = 2280
                        localctx.name = self.uid()




                self.state = 2285
                self.match(MySqlParser.CHECK)
                self.state = 2286
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2287
                self.expression(0)
                self.state = 2288
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2290
                self.match(MySqlParser.ALGORITHM)
                self.state = 2292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2291
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2294
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2295
                self.match(MySqlParser.ALTER)
                self.state = 2297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2296
                    self.match(MySqlParser.COLUMN)


                self.state = 2299
                self.uid()
                self.state = 2305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SET]:
                    self.state = 2300
                    self.match(MySqlParser.SET)
                    self.state = 2301
                    self.match(MySqlParser.DEFAULT)
                    self.state = 2302
                    self.defaultValue()
                    pass
                elif token in [MySqlParser.DROP]:
                    self.state = 2303
                    self.match(MySqlParser.DROP)
                    self.state = 2304
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = MySqlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2307
                self.match(MySqlParser.CHANGE)
                self.state = 2309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2308
                    self.match(MySqlParser.COLUMN)


                self.state = 2311
                localctx.oldColumn = self.uid()
                self.state = 2312
                localctx.newColumn = self.uid()
                self.state = 2313
                self.columnDefinition()
                self.state = 2317
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2314
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2315
                    self.match(MySqlParser.AFTER)
                    self.state = 2316
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.PARTITION, MySqlParser.MINUSMINUS, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = MySqlParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2319
                self.match(MySqlParser.RENAME)
                self.state = 2320
                self.match(MySqlParser.COLUMN)
                self.state = 2321
                localctx.oldColumn = self.uid()
                self.state = 2322
                self.match(MySqlParser.TO)
                self.state = 2323
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = MySqlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2325
                self.match(MySqlParser.LOCK)
                self.state = 2327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2326
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2329
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2330
                self.match(MySqlParser.MODIFY)
                self.state = 2332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2331
                    self.match(MySqlParser.COLUMN)


                self.state = 2334
                self.uid()
                self.state = 2335
                self.columnDefinition()
                self.state = 2339
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.FIRST]:
                    self.state = 2336
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [MySqlParser.AFTER]:
                    self.state = 2337
                    self.match(MySqlParser.AFTER)
                    self.state = 2338
                    self.uid()
                    pass
                elif token in [MySqlParser.EOF, MySqlParser.PARTITION, MySqlParser.MINUSMINUS, MySqlParser.COMMA, MySqlParser.SEMI]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = MySqlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2341
                self.match(MySqlParser.DROP)
                self.state = 2343
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLUMN:
                    self.state = 2342
                    self.match(MySqlParser.COLUMN)


                self.state = 2345
                self.uid()
                pass

            elif la_ == 17:
                localctx = MySqlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2346
                self.match(MySqlParser.DROP)
                self.state = 2347
                self.match(MySqlParser.PRIMARY)
                self.state = 2348
                self.match(MySqlParser.KEY)
                pass

            elif la_ == 18:
                localctx = MySqlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2349
                self.match(MySqlParser.DROP)
                self.state = 2350
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2351
                self.uid()
                pass

            elif la_ == 19:
                localctx = MySqlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2352
                self.match(MySqlParser.DROP)
                self.state = 2353
                self.match(MySqlParser.FOREIGN)
                self.state = 2354
                self.match(MySqlParser.KEY)
                self.state = 2355
                self.uid()
                pass

            elif la_ == 20:
                localctx = MySqlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2356
                self.match(MySqlParser.DISABLE)
                self.state = 2357
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 21:
                localctx = MySqlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2358
                self.match(MySqlParser.ENABLE)
                self.state = 2359
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 22:
                localctx = MySqlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2360
                self.match(MySqlParser.RENAME)
                self.state = 2362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS or _la==MySqlParser.TO:
                    self.state = 2361
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.AS or _la==MySqlParser.TO):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2366
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                if la_ == 1:
                    self.state = 2364
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2365
                    self.fullId()
                    pass


                pass

            elif la_ == 23:
                localctx = MySqlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2368
                self.match(MySqlParser.ORDER)
                self.state = 2369
                self.match(MySqlParser.BY)
                self.state = 2370
                self.uidList()
                pass

            elif la_ == 24:
                localctx = MySqlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2371
                self.match(MySqlParser.CONVERT)
                self.state = 2372
                self.match(MySqlParser.TO)
                self.state = 2373
                self.match(MySqlParser.CHARACTER)
                self.state = 2374
                self.match(MySqlParser.SET)
                self.state = 2375
                self.charsetName()
                self.state = 2378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2376
                    self.match(MySqlParser.COLLATE)
                    self.state = 2377
                    self.collationName()


                pass

            elif la_ == 25:
                localctx = MySqlParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DEFAULT:
                    self.state = 2380
                    self.match(MySqlParser.DEFAULT)


                self.state = 2383
                self.match(MySqlParser.CHARACTER)
                self.state = 2384
                self.match(MySqlParser.SET)
                self.state = 2385
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2386
                self.charsetName()
                self.state = 2390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 2387
                    self.match(MySqlParser.COLLATE)
                    self.state = 2388
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2389
                    self.collationName()


                pass

            elif la_ == 26:
                localctx = MySqlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2392
                self.match(MySqlParser.DISCARD)
                self.state = 2393
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 27:
                localctx = MySqlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2394
                self.match(MySqlParser.IMPORT)
                self.state = 2395
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 28:
                localctx = MySqlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2396
                self.match(MySqlParser.FORCE)
                pass

            elif la_ == 29:
                localctx = MySqlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2397
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2398
                self.match(MySqlParser.VALIDATION)
                pass

            elif la_ == 30:
                localctx = MySqlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2399
                self.match(MySqlParser.ADD)
                self.state = 2400
                self.match(MySqlParser.PARTITION)
                self.state = 2401
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2402
                self.partitionDefinition()
                self.state = 2403
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 31:
                localctx = MySqlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2405
                self.match(MySqlParser.DROP)
                self.state = 2406
                self.match(MySqlParser.PARTITION)
                self.state = 2407
                self.uidList()
                pass

            elif la_ == 32:
                localctx = MySqlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2408
                self.match(MySqlParser.DISCARD)
                self.state = 2409
                self.match(MySqlParser.PARTITION)
                self.state = 2412
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2410
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2411
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2414
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 33:
                localctx = MySqlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2415
                self.match(MySqlParser.IMPORT)
                self.state = 2416
                self.match(MySqlParser.PARTITION)
                self.state = 2419
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2417
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2418
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2421
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 34:
                localctx = MySqlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2422
                self.match(MySqlParser.TRUNCATE)
                self.state = 2423
                self.match(MySqlParser.PARTITION)
                self.state = 2426
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2424
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2425
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 35:
                localctx = MySqlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2428
                self.match(MySqlParser.COALESCE)
                self.state = 2429
                self.match(MySqlParser.PARTITION)
                self.state = 2430
                self.decimalLiteral()
                pass

            elif la_ == 36:
                localctx = MySqlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2431
                self.match(MySqlParser.REORGANIZE)
                self.state = 2432
                self.match(MySqlParser.PARTITION)
                self.state = 2433
                self.uidList()
                self.state = 2434
                self.match(MySqlParser.INTO)
                self.state = 2435
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2436
                self.partitionDefinition()
                self.state = 2441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2437
                    self.match(MySqlParser.COMMA)
                    self.state = 2438
                    self.partitionDefinition()
                    self.state = 2443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2444
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 37:
                localctx = MySqlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2446
                self.match(MySqlParser.EXCHANGE)
                self.state = 2447
                self.match(MySqlParser.PARTITION)
                self.state = 2448
                self.uid()
                self.state = 2449
                self.match(MySqlParser.WITH)
                self.state = 2450
                self.match(MySqlParser.TABLE)
                self.state = 2451
                self.tableName()
                self.state = 2454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH or _la==MySqlParser.WITHOUT:
                    self.state = 2452
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.WITH or _la==MySqlParser.WITHOUT):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2453
                    self.match(MySqlParser.VALIDATION)


                pass

            elif la_ == 38:
                localctx = MySqlParser.AlterByAnalyzePartitiionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2456
                self.match(MySqlParser.ANALYZE)
                self.state = 2457
                self.match(MySqlParser.PARTITION)
                self.state = 2460
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2458
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2459
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 39:
                localctx = MySqlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2462
                self.match(MySqlParser.CHECK)
                self.state = 2463
                self.match(MySqlParser.PARTITION)
                self.state = 2466
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2464
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2465
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 40:
                localctx = MySqlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2468
                self.match(MySqlParser.OPTIMIZE)
                self.state = 2469
                self.match(MySqlParser.PARTITION)
                self.state = 2472
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2470
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2471
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 41:
                localctx = MySqlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2474
                self.match(MySqlParser.REBUILD)
                self.state = 2475
                self.match(MySqlParser.PARTITION)
                self.state = 2478
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2476
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2477
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = MySqlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2480
                self.match(MySqlParser.REPAIR)
                self.state = 2481
                self.match(MySqlParser.PARTITION)
                self.state = 2484
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 2482
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 2483
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = MySqlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2486
                self.match(MySqlParser.REMOVE)
                self.state = 2487
                self.match(MySqlParser.PARTITIONING)
                pass

            elif la_ == 44:
                localctx = MySqlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2488
                self.match(MySqlParser.UPGRADE)
                self.state = 2489
                self.match(MySqlParser.PARTITIONING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropDatabaseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropDatabase

        def enterRule(self, listener):
            if hasattr(listener, "enterDropDatabase"):
                listener.enterDropDatabase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropDatabase"):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySqlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2492
            self.match(MySqlParser.DROP)
            self.state = 2493
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2494
                self.ifExists()


            self.state = 2497
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropEventContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropEvent

        def enterRule(self, listener):
            if hasattr(listener, "enterDropEvent"):
                listener.enterDropEvent(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropEvent"):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySqlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dropEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2499
            self.match(MySqlParser.DROP)
            self.state = 2500
            self.match(MySqlParser.EVENT)
            self.state = 2502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2501
                self.ifExists()


            self.state = 2504
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropIndexContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def DEFAULT(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropIndex

        def enterRule(self, listener):
            if hasattr(listener, "enterDropIndex"):
                listener.enterDropIndex(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropIndex"):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySqlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2506
            self.match(MySqlParser.DROP)
            self.state = 2507
            self.match(MySqlParser.INDEX)
            self.state = 2509
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
            if la_ == 1:
                self.state = 2508
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.OFFLINE or _la==MySqlParser.ONLINE):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2511
            self.uid()
            self.state = 2512
            self.match(MySqlParser.ON)
            self.state = 2513
            self.tableName()
            self.state = 2519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALGORITHM:
                self.state = 2514
                self.match(MySqlParser.ALGORITHM)
                self.state = 2516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2515
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2518
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.COPY or _la==MySqlParser.INPLACE):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2526
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCK:
                self.state = 2521
                self.match(MySqlParser.LOCK)
                self.state = 2523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2522
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2525
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DEFAULT or _la==MySqlParser.EXCLUSIVE or _la==MySqlParser.NONE or _la==MySqlParser.SHARED):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropLogfileGroupContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropLogfileGroup

        def enterRule(self, listener):
            if hasattr(listener, "enterDropLogfileGroup"):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropLogfileGroup"):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySqlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2528
            self.match(MySqlParser.DROP)
            self.state = 2529
            self.match(MySqlParser.LOGFILE)
            self.state = 2530
            self.match(MySqlParser.GROUP)
            self.state = 2531
            self.uid()
            self.state = 2532
            self.match(MySqlParser.ENGINE)
            self.state = 2533
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 2534
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropProcedureContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropProcedure

        def enterRule(self, listener):
            if hasattr(listener, "enterDropProcedure"):
                listener.enterDropProcedure(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropProcedure"):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySqlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_dropProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            self.match(MySqlParser.DROP)
            self.state = 2537
            self.match(MySqlParser.PROCEDURE)
            self.state = 2539
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2538
                self.ifExists()


            self.state = 2541
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropFunction

        def enterRule(self, listener):
            if hasattr(listener, "enterDropFunction"):
                listener.enterDropFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropFunction"):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySqlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_dropFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2543
            self.match(MySqlParser.DROP)
            self.state = 2544
            self.match(MySqlParser.FUNCTION)
            self.state = 2546
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2545
                self.ifExists()


            self.state = 2548
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropServerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropServer

        def enterRule(self, listener):
            if hasattr(listener, "enterDropServer"):
                listener.enterDropServer(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropServer"):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySqlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dropServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2550
            self.match(MySqlParser.DROP)
            self.state = 2551
            self.match(MySqlParser.SERVER)
            self.state = 2553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2552
                self.ifExists()


            self.state = 2555
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTable

        def enterRule(self, listener):
            if hasattr(listener, "enterDropTable"):
                listener.enterDropTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropTable"):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySqlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2557
            self.match(MySqlParser.DROP)
            self.state = 2559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TEMPORARY:
                self.state = 2558
                self.match(MySqlParser.TEMPORARY)


            self.state = 2561
            self.match(MySqlParser.TABLE)
            self.state = 2563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2562
                self.ifExists()


            self.state = 2565
            self.tables()
            self.state = 2567
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 2566
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropTablespaceContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTablespace

        def enterRule(self, listener):
            if hasattr(listener, "enterDropTablespace"):
                listener.enterDropTablespace(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropTablespace"):
                listener.exitDropTablespace(self)




    def dropTablespace(self):

        localctx = MySqlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2569
            self.match(MySqlParser.DROP)
            self.state = 2570
            self.match(MySqlParser.TABLESPACE)
            self.state = 2571
            self.uid()
            self.state = 2577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ENGINE:
                self.state = 2572
                self.match(MySqlParser.ENGINE)
                self.state = 2574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.EQUAL_SYMBOL:
                    self.state = 2573
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2576
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropTriggerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropTrigger

        def enterRule(self, listener):
            if hasattr(listener, "enterDropTrigger"):
                listener.enterDropTrigger(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropTrigger"):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySqlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2579
            self.match(MySqlParser.DROP)
            self.state = 2580
            self.match(MySqlParser.TRIGGER)
            self.state = 2582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2581
                self.ifExists()


            self.state = 2584
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropViewContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropView

        def enterRule(self, listener):
            if hasattr(listener, "enterDropView"):
                listener.enterDropView(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropView"):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySqlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2586
            self.match(MySqlParser.DROP)
            self.state = 2587
            self.match(MySqlParser.VIEW)
            self.state = 2589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 2588
                self.ifExists()


            self.state = 2591
            self.fullId()
            self.state = 2596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2592
                self.match(MySqlParser.COMMA)
                self.state = 2593
                self.fullId()
                self.state = 2598
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2600
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT:
                self.state = 2599
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CASCADE or _la==MySqlParser.RESTRICT):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RenameTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def renameTableClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameTableClauseContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTable

        def enterRule(self, listener):
            if hasattr(listener, "enterRenameTable"):
                listener.enterRenameTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRenameTable"):
                listener.exitRenameTable(self)




    def renameTable(self):

        localctx = MySqlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2602
            self.match(MySqlParser.RENAME)
            self.state = 2603
            self.match(MySqlParser.TABLE)
            self.state = 2604
            self.renameTableClause()
            self.state = 2609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 2605
                self.match(MySqlParser.COMMA)
                self.state = 2606
                self.renameTableClause()
                self.state = 2611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RenameTableClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTableClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRenameTableClause"):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRenameTableClause"):
                listener.exitRenameTableClause(self)




    def renameTableClause(self):

        localctx = MySqlParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_renameTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2612
            self.tableName()
            self.state = 2613
            self.match(MySqlParser.TO)
            self.state = 2614
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TruncateTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_truncateTable

        def enterRule(self, listener):
            if hasattr(listener, "enterTruncateTable"):
                listener.enterTruncateTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTruncateTable"):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = MySqlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2616
            self.match(MySqlParser.TRUNCATE)
            self.state = 2618
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.TABLE:
                self.state = 2617
                self.match(MySqlParser.TABLE)


            self.state = 2620
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CallStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(MySqlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_callStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCallStatement"):
                listener.enterCallStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCallStatement"):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySqlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_callStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2622
            self.match(MySqlParser.CALL)
            self.state = 2623
            self.fullId()
            self.state = 2630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2624
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2627
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,333,self._ctx)
                if la_ == 1:
                    self.state = 2625
                    self.constants()

                elif la_ == 2:
                    self.state = 2626
                    self.expressions()


                self.state = 2629
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeleteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_deleteStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDeleteStatement"):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeleteStatement"):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_deleteStatement)
        try:
            self.state = 2634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,335,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2632
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2633
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DoStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_doStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterDoStatement"):
                listener.enterDoStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDoStatement"):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySqlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(MySqlParser.DO)
            self.state = 2637
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerStatement"):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerStatement"):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySqlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_handlerStatement)
        try:
            self.state = 2643
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,336,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2639
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2640
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2641
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2642
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.InsertStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def uidList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterInsertStatement"):
                listener.enterInsertStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsertStatement"):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2645
            self.match(MySqlParser.INSERT)
            self.state = 2647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (MySqlParser.DELAYED - 37)) | (1 << (MySqlParser.HIGH_PRIORITY - 37)) | (1 << (MySqlParser.LOW_PRIORITY - 37)))) != 0):
                self.state = 2646
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 37)) & ~0x3f) == 0 and ((1 << (_la - 37)) & ((1 << (MySqlParser.DELAYED - 37)) | (1 << (MySqlParser.HIGH_PRIORITY - 37)) | (1 << (MySqlParser.LOW_PRIORITY - 37)))) != 0)):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2650
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2649
                self.match(MySqlParser.IGNORE)


            self.state = 2653
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 2652
                self.match(MySqlParser.INTO)


            self.state = 2655
            self.tableName()
            self.state = 2661
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2656
                self.match(MySqlParser.PARTITION)
                self.state = 2657
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2658
                localctx.partitions = self.uidList()
                self.state = 2659
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2679
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 2667
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,341,self._ctx)
                if la_ == 1:
                    self.state = 2663
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2664
                    localctx.columns = self.uidList()
                    self.state = 2665
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 2669
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 2670
                self.match(MySqlParser.SET)
                self.state = 2671
                localctx.setFirst = self.updatedElement()
                self.state = 2676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2672
                    self.match(MySqlParser.COMMA)
                    self.state = 2673
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 2693
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ON:
                self.state = 2681
                self.match(MySqlParser.ON)
                self.state = 2682
                self.match(MySqlParser.DUPLICATE)
                self.state = 2683
                self.match(MySqlParser.KEY)
                self.state = 2684
                self.match(MySqlParser.UPDATE)
                self.state = 2685
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 2690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2686
                    self.match(MySqlParser.COMMA)
                    self.state = 2687
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 2692
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LoadDataStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def LINES(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LINES)
            else:
                return self.getToken(MySqlParser.LINES, i)

        def IGNORE(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def selectFieldsInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadDataStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterLoadDataStatement"):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLoadDataStatement"):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = MySqlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2695
            self.match(MySqlParser.LOAD)
            self.state = 2696
            self.match(MySqlParser.DATA)
            self.state = 2698
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 2697
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 2700
                self.match(MySqlParser.LOCAL)


            self.state = 2703
            self.match(MySqlParser.INFILE)
            self.state = 2704
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 2706
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 2705
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2708
            self.match(MySqlParser.INTO)
            self.state = 2709
            self.match(MySqlParser.TABLE)
            self.state = 2710
            self.tableName()
            self.state = 2716
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2711
                self.match(MySqlParser.PARTITION)
                self.state = 2712
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2713
                self.uidList()
                self.state = 2714
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 2718
                self.match(MySqlParser.CHARACTER)
                self.state = 2719
                self.match(MySqlParser.SET)
                self.state = 2720
                localctx.charset = self.charsetName()


            self.state = 2729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS:
                self.state = 2723
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2725 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2724
                    self.selectFieldsInto()
                    self.state = 2727 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                        break



            self.state = 2737
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LINES:
                self.state = 2731
                self.match(MySqlParser.LINES)
                self.state = 2733 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2732
                    self.selectLinesInto()
                    self.state = 2735 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                        break



            self.state = 2743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2739
                self.match(MySqlParser.IGNORE)
                self.state = 2740
                self.decimalLiteral()
                self.state = 2741
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2745
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2746
                self.assignmentField()
                self.state = 2751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2747
                    self.match(MySqlParser.COMMA)
                    self.state = 2748
                    self.assignmentField()
                    self.state = 2753
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2754
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2767
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SET:
                self.state = 2758
                self.match(MySqlParser.SET)
                self.state = 2759
                self.updatedElement()
                self.state = 2764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2760
                    self.match(MySqlParser.COMMA)
                    self.state = 2761
                    self.updatedElement()
                    self.state = 2766
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LoadXmlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def ROWS(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.ROWS)
            else:
                return self.getToken(MySqlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def assignmentField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadXmlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterLoadXmlStatement"):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLoadXmlStatement"):
                listener.exitLoadXmlStatement(self)




    def loadXmlStatement(self):

        localctx = MySqlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2769
            self.match(MySqlParser.LOAD)
            self.state = 2770
            self.match(MySqlParser.XML)
            self.state = 2772
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT:
                self.state = 2771
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LOW_PRIORITY or _la==MySqlParser.CONCURRENT):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2775
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOCAL:
                self.state = 2774
                self.match(MySqlParser.LOCAL)


            self.state = 2777
            self.match(MySqlParser.INFILE)
            self.state = 2778
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 2780
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE:
                self.state = 2779
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.IGNORE or _la==MySqlParser.REPLACE):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2782
            self.match(MySqlParser.INTO)
            self.state = 2783
            self.match(MySqlParser.TABLE)
            self.state = 2784
            self.tableName()
            self.state = 2788
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CHARACTER:
                self.state = 2785
                self.match(MySqlParser.CHARACTER)
                self.state = 2786
                self.match(MySqlParser.SET)
                self.state = 2787
                localctx.charset = self.charsetName()


            self.state = 2796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ROWS:
                self.state = 2790
                self.match(MySqlParser.ROWS)
                self.state = 2791
                self.match(MySqlParser.IDENTIFIED)
                self.state = 2792
                self.match(MySqlParser.BY)
                self.state = 2793
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 2794
                localctx.tag = self.match(MySqlParser.STRING_LITERAL)
                self.state = 2795
                self.match(MySqlParser.GREATER_SYMBOL)


            self.state = 2802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2798
                self.match(MySqlParser.IGNORE)
                self.state = 2799
                self.decimalLiteral()
                self.state = 2800
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LINES or _la==MySqlParser.ROWS):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2815
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 2804
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2805
                self.assignmentField()
                self.state = 2810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2806
                    self.match(MySqlParser.COMMA)
                    self.state = 2807
                    self.assignmentField()
                    self.state = 2812
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2813
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SET:
                self.state = 2817
                self.match(MySqlParser.SET)
                self.state = 2818
                self.updatedElement()
                self.state = 2823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2819
                    self.match(MySqlParser.COMMA)
                    self.state = 2820
                    self.updatedElement()
                    self.state = 2825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReplaceStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def uidList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_replaceStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReplaceStatement"):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReplaceStatement"):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2828
            self.match(MySqlParser.REPLACE)
            self.state = 2830
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY:
                self.state = 2829
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DELAYED or _la==MySqlParser.LOW_PRIORITY):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INTO:
                self.state = 2832
                self.match(MySqlParser.INTO)


            self.state = 2835
            self.tableName()
            self.state = 2841
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2836
                self.match(MySqlParser.PARTITION)
                self.state = 2837
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2838
                localctx.partitions = self.uidList()
                self.state = 2839
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.VALUES, MySqlParser.VALUE, MySqlParser.LR_BRACKET]:
                self.state = 2847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
                if la_ == 1:
                    self.state = 2843
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2844
                    localctx.columns = self.uidList()
                    self.state = 2845
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 2849
                self.insertStatementValue()
                pass
            elif token in [MySqlParser.SET]:
                self.state = 2850
                self.match(MySqlParser.SET)
                self.state = 2851
                localctx.setFirst = self.updatedElement()
                self.state = 2856
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2852
                    self.match(MySqlParser.COMMA)
                    self.state = 2853
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 2858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectStatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectStatement

     
        def copyFrom(self, ctx):
            super(MySqlParser.SelectStatementContext, self).copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectStatementContext)
            super(MySqlParser.UnionSelectContext, self).__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterUnionSelect"):
                listener.enterUnionSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnionSelect"):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectStatementContext)
            super(MySqlParser.UnionParenthesisSelectContext, self).__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterUnionParenthesisSelect"):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnionParenthesisSelect"):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectStatementContext)
            super(MySqlParser.SimpleSelectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleSelect"):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleSelect"):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectStatementContext)
            super(MySqlParser.ParenthesisSelectContext, self).__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterParenthesisSelect"):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitParenthesisSelect"):
                listener.exitParenthesisSelect(self)



    def selectStatement(self):

        localctx = MySqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 2916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2861
                self.querySpecification()
                self.state = 2863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.LOCK:
                    self.state = 2862
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = MySqlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2865
                self.queryExpression()
                self.state = 2867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.LOCK:
                    self.state = 2866
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = MySqlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2869
                self.querySpecificationNointo()
                self.state = 2871 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2870
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2873 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,378,self._ctx)

                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 2875
                    self.match(MySqlParser.UNION)
                    self.state = 2877
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 2876
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2881
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.SELECT]:
                        self.state = 2879
                        self.querySpecification()
                        pass
                    elif token in [MySqlParser.LR_BRACKET]:
                        self.state = 2880
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 2886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ORDER:
                    self.state = 2885
                    self.orderByClause()


                self.state = 2889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 2888
                    self.limitClause()


                self.state = 2892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.LOCK:
                    self.state = 2891
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = MySqlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2894
                self.queryExpressionNointo()
                self.state = 2896 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 2895
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 2898 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,385,self._ctx)

                self.state = 2905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNION:
                    self.state = 2900
                    self.match(MySqlParser.UNION)
                    self.state = 2902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                        self.state = 2901
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 2904
                    self.queryExpression()


                self.state = 2908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ORDER:
                    self.state = 2907
                    self.orderByClause()


                self.state = 2911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 2910
                    self.limitClause()


                self.state = 2914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.LOCK:
                    self.state = 2913
                    self.lockClause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UpdateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_updateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdateStatement"):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdateStatement"):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySqlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_updateStatement)
        try:
            self.state = 2920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2918
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2919
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.InsertStatementValueContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def expressionsWithDefaults(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionsWithDefaultsContext,i)


        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatementValue

        def enterRule(self, listener):
            if hasattr(listener, "enterInsertStatementValue"):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInsertStatementValue"):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = MySqlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 2937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2922
                self.selectStatement()
                pass
            elif token in [MySqlParser.VALUES, MySqlParser.VALUE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2923
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.VALUES or _la==MySqlParser.VALUE):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2924
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2925
                self.expressionsWithDefaults()
                self.state = 2926
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 2927
                    self.match(MySqlParser.COMMA)
                    self.state = 2928
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2929
                    self.expressionsWithDefaults()
                    self.state = 2930
                    self.match(MySqlParser.RR_BRACKET)
                    self.state = 2936
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UpdatedElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_updatedElement

        def enterRule(self, listener):
            if hasattr(listener, "enterUpdatedElement"):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUpdatedElement"):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = MySqlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2939
            self.fullColumnName()
            self.state = 2940
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 2943
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CASE, MySqlParser.CAST, MySqlParser.CONVERT, MySqlParser.CURRENT_USER, MySqlParser.DATABASE, MySqlParser.EXISTS, MySqlParser.FALSE, MySqlParser.IF, MySqlParser.INSERT, MySqlParser.INTERVAL, MySqlParser.LEFT, MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.REPLACE, MySqlParser.RIGHT, MySqlParser.TRUE, MySqlParser.VALUES, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.CHAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.CURRENT_DATE, MySqlParser.CURRENT_TIME, MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.CURDATE, MySqlParser.CURTIME, MySqlParser.DATE_ADD, MySqlParser.DATE_SUB, MySqlParser.EXTRACT, MySqlParser.LOCALTIMESTAMP, MySqlParser.NOW, MySqlParser.POSITION, MySqlParser.SUBSTR, MySqlParser.SUBSTRING, MySqlParser.SYSDATE, MySqlParser.TRIM, MySqlParser.UTC_DATE, MySqlParser.UTC_TIME, MySqlParser.UTC_TIMESTAMP, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.PLUS, MySqlParser.MINUS, MySqlParser.EXCLAMATION_SYMBOL, MySqlParser.BIT_NOT_OP, MySqlParser.LR_BRACKET, MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.START_NATIONAL_STRING_LITERAL, MySqlParser.STRING_LITERAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.HEXADECIMAL_LITERAL, MySqlParser.REAL_LITERAL, MySqlParser.NULL_SPEC_LITERAL, MySqlParser.BIT_STRING, MySqlParser.STRING_CHARSET_NAME, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.state = 2941
                self.expression(0)
                pass
            elif token in [MySqlParser.DEFAULT]:
                self.state = 2942
                self.match(MySqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AssignmentFieldContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_assignmentField

        def enterRule(self, listener):
            if hasattr(listener, "enterAssignmentField"):
                listener.enterAssignmentField(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAssignmentField"):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = MySqlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_assignmentField)
        try:
            self.state = 2947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2945
                self.uid()
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2946
                self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LockClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLockClause"):
                listener.enterLockClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLockClause"):
                listener.exitLockClause(self)




    def lockClause(self):

        localctx = MySqlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_lockClause)
        try:
            self.state = 2955
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2949
                self.match(MySqlParser.FOR)
                self.state = 2950
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.LOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2951
                self.match(MySqlParser.LOCK)
                self.state = 2952
                self.match(MySqlParser.IN)
                self.state = 2953
                self.match(MySqlParser.SHARE)
                self.state = 2954
                self.match(MySqlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SingleDeleteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleDeleteStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleDeleteStatement"):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleDeleteStatement"):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = MySqlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2957
            self.match(MySqlParser.DELETE)
            self.state = 2959
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 2958
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 2962
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 2961
                self.match(MySqlParser.QUICK)


            self.state = 2965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2964
                self.match(MySqlParser.IGNORE)


            self.state = 2967
            self.match(MySqlParser.FROM)
            self.state = 2968
            self.tableName()
            self.state = 2974
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 2969
                self.match(MySqlParser.PARTITION)
                self.state = 2970
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2971
                self.uidList()
                self.state = 2972
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2978
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 2976
                self.match(MySqlParser.WHERE)
                self.state = 2977
                self.expression(0)


            self.state = 2981
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 2980
                self.orderByClause()


            self.state = 2985
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 2983
                self.match(MySqlParser.LIMIT)
                self.state = 2984
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.MultipleDeleteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def tableName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DOT(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.DOT)
            else:
                return self.getToken(MySqlParser.DOT, i)

        def STAR(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleDeleteStatement"):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleDeleteStatement"):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = MySqlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2987
            self.match(MySqlParser.DELETE)
            self.state = 2989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 2988
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 2992
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,406,self._ctx)
            if la_ == 1:
                self.state = 2991
                self.match(MySqlParser.QUICK)


            self.state = 2995
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 2994
                self.match(MySqlParser.IGNORE)


            self.state = 3036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                self.state = 2997
                self.tableName()
                self.state = 3000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 2998
                    self.match(MySqlParser.DOT)
                    self.state = 2999
                    self.match(MySqlParser.STAR)


                self.state = 3010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3002
                    self.match(MySqlParser.COMMA)
                    self.state = 3003
                    self.tableName()
                    self.state = 3006
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3004
                        self.match(MySqlParser.DOT)
                        self.state = 3005
                        self.match(MySqlParser.STAR)


                    self.state = 3012
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3013
                self.match(MySqlParser.FROM)
                self.state = 3014
                self.tableSources()
                pass
            elif token in [MySqlParser.FROM]:
                self.state = 3016
                self.match(MySqlParser.FROM)
                self.state = 3017
                self.tableName()
                self.state = 3020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DOT:
                    self.state = 3018
                    self.match(MySqlParser.DOT)
                    self.state = 3019
                    self.match(MySqlParser.STAR)


                self.state = 3030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3022
                    self.match(MySqlParser.COMMA)
                    self.state = 3023
                    self.tableName()
                    self.state = 3026
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.DOT:
                        self.state = 3024
                        self.match(MySqlParser.DOT)
                        self.state = 3025
                        self.match(MySqlParser.STAR)


                    self.state = 3032
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3033
                self.match(MySqlParser.USING)
                self.state = 3034
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3038
                self.match(MySqlParser.WHERE)
                self.state = 3039
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerOpenStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerOpenStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerOpenStatement"):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerOpenStatement"):
                listener.exitHandlerOpenStatement(self)




    def handlerOpenStatement(self):

        localctx = MySqlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3042
            self.match(MySqlParser.HANDLER)
            self.state = 3043
            self.tableName()
            self.state = 3044
            self.match(MySqlParser.OPEN)
            self.state = 3049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AS or _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 3046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3045
                    self.match(MySqlParser.AS)


                self.state = 3048
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerReadIndexStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerReadIndexStatement"):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerReadIndexStatement"):
                listener.exitHandlerReadIndexStatement(self)




    def handlerReadIndexStatement(self):

        localctx = MySqlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3051
            self.match(MySqlParser.HANDLER)
            self.state = 3052
            self.tableName()
            self.state = 3053
            self.match(MySqlParser.READ)
            self.state = 3054
            localctx.index = self.uid()
            self.state = 3061
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EQUAL_SYMBOL, MySqlParser.GREATER_SYMBOL, MySqlParser.LESS_SYMBOL, MySqlParser.EXCLAMATION_SYMBOL]:
                self.state = 3055
                self.comparisonOperator()
                self.state = 3056
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3057
                self.constants()
                self.state = 3058
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.FIRST, MySqlParser.LAST, MySqlParser.NEXT, MySqlParser.PREV]:
                self.state = 3060
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FIRST or _la==MySqlParser.LAST or _la==MySqlParser.NEXT or _la==MySqlParser.PREV):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3065
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3063
                self.match(MySqlParser.WHERE)
                self.state = 3064
                self.expression(0)


            self.state = 3069
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3067
                self.match(MySqlParser.LIMIT)
                self.state = 3068
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerReadStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerReadStatement"):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerReadStatement"):
                listener.exitHandlerReadStatement(self)




    def handlerReadStatement(self):

        localctx = MySqlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3071
            self.match(MySqlParser.HANDLER)
            self.state = 3072
            self.tableName()
            self.state = 3073
            self.match(MySqlParser.READ)
            self.state = 3074
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FIRST or _la==MySqlParser.NEXT):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3077
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3075
                self.match(MySqlParser.WHERE)
                self.state = 3076
                self.expression(0)


            self.state = 3081
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3079
                self.match(MySqlParser.LIMIT)
                self.state = 3080
                self.decimalLiteral()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerCloseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerCloseStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerCloseStatement"):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerCloseStatement"):
                listener.exitHandlerCloseStatement(self)




    def handlerCloseStatement(self):

        localctx = MySqlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3083
            self.match(MySqlParser.HANDLER)
            self.state = 3084
            self.tableName()
            self.state = 3085
            self.match(MySqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SingleUpdateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleUpdateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSingleUpdateStatement"):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSingleUpdateStatement"):
                listener.exitSingleUpdateStatement(self)




    def singleUpdateStatement(self):

        localctx = MySqlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3087
            self.match(MySqlParser.UPDATE)
            self.state = 3089
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3088
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3092
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3091
                self.match(MySqlParser.IGNORE)


            self.state = 3094
            self.tableName()
            self.state = 3099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AS or _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 3096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3095
                    self.match(MySqlParser.AS)


                self.state = 3098
                self.uid()


            self.state = 3101
            self.match(MySqlParser.SET)
            self.state = 3102
            self.updatedElement()
            self.state = 3107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3103
                self.match(MySqlParser.COMMA)
                self.state = 3104
                self.updatedElement()
                self.state = 3109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3112
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3110
                self.match(MySqlParser.WHERE)
                self.state = 3111
                self.expression(0)


            self.state = 3115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ORDER:
                self.state = 3114
                self.orderByClause()


            self.state = 3118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LIMIT:
                self.state = 3117
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.MultipleUpdateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterMultipleUpdateStatement"):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMultipleUpdateStatement"):
                listener.exitMultipleUpdateStatement(self)




    def multipleUpdateStatement(self):

        localctx = MySqlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3120
            self.match(MySqlParser.UPDATE)
            self.state = 3122
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LOW_PRIORITY:
                self.state = 3121
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 3124
                self.match(MySqlParser.IGNORE)


            self.state = 3127
            self.tableSources()
            self.state = 3128
            self.match(MySqlParser.SET)
            self.state = 3129
            self.updatedElement()
            self.state = 3134
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3130
                self.match(MySqlParser.COMMA)
                self.state = 3131
                self.updatedElement()
                self.state = 3136
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3137
                self.match(MySqlParser.WHERE)
                self.state = 3138
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.OrderByClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByClause

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderByClause"):
                listener.enterOrderByClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderByClause"):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = MySqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_orderByClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3141
            self.match(MySqlParser.ORDER)
            self.state = 3142
            self.match(MySqlParser.BY)
            self.state = 3143
            self.orderByExpression()
            self.state = 3148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3144
                self.match(MySqlParser.COMMA)
                self.state = 3145
                self.orderByExpression()
                self.state = 3150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.OrderByExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByExpression

        def enterRule(self, listener):
            if hasattr(listener, "enterOrderByExpression"):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOrderByExpression"):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = MySqlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3151
            self.expression(0)
            self.state = 3153
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC:
                self.state = 3152
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableSourcesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableSourceContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableSources

        def enterRule(self, listener):
            if hasattr(listener, "enterTableSources"):
                listener.enterTableSources(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableSources"):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = MySqlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_tableSources)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3155
            self.tableSource()
            self.state = 3160
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3156
                self.match(MySqlParser.COMMA)
                self.state = 3157
                self.tableSource()
                self.state = 3162
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableSourceContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSource

     
        def copyFrom(self, ctx):
            super(MySqlParser.TableSourceContext, self).copyFrom(ctx)



    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableSourceContext)
            super(MySqlParser.TableSourceNestedContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def joinPart(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterTableSourceNested"):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableSourceNested"):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableSourceContext)
            super(MySqlParser.TableSourceBaseContext, self).__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def joinPart(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterTableSourceBase"):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableSourceBase"):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = MySqlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,440,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3163
                self.tableSourceItem()
                self.state = 3167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,438,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3164
                        self.joinPart() 
                    self.state = 3169
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,438,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3170
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3171
                self.tableSourceItem()
                self.state = 3175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 30)) & ~0x3f) == 0 and ((1 << (_la - 30)) & ((1 << (MySqlParser.CROSS - 30)) | (1 << (MySqlParser.INNER - 30)) | (1 << (MySqlParser.JOIN - 30)) | (1 << (MySqlParser.LEFT - 30)))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (MySqlParser.NATURAL - 96)) | (1 << (MySqlParser.RIGHT - 96)) | (1 << (MySqlParser.STRAIGHT_JOIN - 96)))) != 0):
                    self.state = 3172
                    self.joinPart()
                    self.state = 3177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3178
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableSourceItemContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx):
            super(MySqlParser.TableSourceItemContext, self).copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableSourceItemContext)
            super(MySqlParser.SubqueryTableItemContext, self).__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubqueryTableItem"):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubqueryTableItem"):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableSourceItemContext)
            super(MySqlParser.AtomTableItemContext, self).__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def indexHint(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterAtomTableItem"):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAtomTableItem"):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.TableSourceItemContext)
            super(MySqlParser.TableSourcesItemContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterTableSourcesItem"):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableSourcesItem"):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = MySqlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3222
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,448,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3182
                self.tableName()
                self.state = 3188
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PARTITION:
                    self.state = 3183
                    self.match(MySqlParser.PARTITION)
                    self.state = 3184
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3185
                    self.uidList()
                    self.state = 3186
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3194
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                if la_ == 1:
                    self.state = 3191
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3190
                        self.match(MySqlParser.AS)


                    self.state = 3193
                    localctx.alias = self.uid()


                self.state = 3204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FORCE or _la==MySqlParser.IGNORE or _la==MySqlParser.USE:
                    self.state = 3196
                    self.indexHint()
                    self.state = 3201
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,444,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3197
                            self.match(MySqlParser.COMMA)
                            self.state = 3198
                            self.indexHint() 
                        self.state = 3203
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,444,self._ctx)



                pass

            elif la_ == 2:
                localctx = MySqlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3211
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,446,self._ctx)
                if la_ == 1:
                    self.state = 3206
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3207
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3208
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3209
                    self.match(MySqlParser.RR_BRACKET)
                    pass


                self.state = 3214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3213
                    self.match(MySqlParser.AS)


                self.state = 3216
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3218
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3219
                self.tableSources()
                self.state = 3220
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexHintContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(MySqlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_indexHint

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexHint"):
                listener.enterIndexHint(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexHint"):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySqlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3224
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FORCE or _la==MySqlParser.IGNORE or _la==MySqlParser.USE):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3225
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3226
                self.match(MySqlParser.FOR)
                self.state = 3227
                self.indexHintType()


            self.state = 3230
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3231
            self.uidList()
            self.state = 3232
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexHintTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexHintType

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexHintType"):
                listener.enterIndexHintType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexHintType"):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySqlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_indexHintType)
        try:
            self.state = 3239
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.JOIN]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3234
                self.match(MySqlParser.JOIN)
                pass
            elif token in [MySqlParser.ORDER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3235
                self.match(MySqlParser.ORDER)
                self.state = 3236
                self.match(MySqlParser.BY)
                pass
            elif token in [MySqlParser.GROUP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3237
                self.match(MySqlParser.GROUP)
                self.state = 3238
                self.match(MySqlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.JoinPartContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_joinPart

     
        def copyFrom(self, ctx):
            super(MySqlParser.JoinPartContext, self).copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.JoinPartContext)
            super(MySqlParser.InnerJoinContext, self).__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def INNER(self):
            return self.getToken(MySqlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(MySqlParser.CROSS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterInnerJoin"):
                listener.enterInnerJoin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInnerJoin"):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.JoinPartContext)
            super(MySqlParser.NaturalJoinContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(MySqlParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterNaturalJoin"):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNaturalJoin"):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.JoinPartContext)
            super(MySqlParser.OuterJoinContext, self).__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterOuterJoin"):
                listener.enterOuterJoin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOuterJoin"):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.JoinPartContext)
            super(MySqlParser.StraightJoinContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterStraightJoin"):
                listener.enterStraightJoin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStraightJoin"):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = MySqlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CROSS, MySqlParser.INNER, MySqlParser.JOIN]:
                localctx = MySqlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3242
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CROSS or _la==MySqlParser.INNER:
                    self.state = 3241
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CROSS or _la==MySqlParser.INNER):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3244
                self.match(MySqlParser.JOIN)
                self.state = 3245
                self.tableSourceItem()
                self.state = 3253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
                if la_ == 1:
                    self.state = 3246
                    self.match(MySqlParser.ON)
                    self.state = 3247
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3248
                    self.match(MySqlParser.USING)
                    self.state = 3249
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3250
                    self.uidList()
                    self.state = 3251
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                localctx = MySqlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3255
                self.match(MySqlParser.STRAIGHT_JOIN)
                self.state = 3256
                self.tableSourceItem()
                self.state = 3259
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3257
                    self.match(MySqlParser.ON)
                    self.state = 3258
                    self.expression(0)


                pass
            elif token in [MySqlParser.LEFT, MySqlParser.RIGHT]:
                localctx = MySqlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3261
                _la = self._input.LA(1)
                if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3263
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OUTER:
                    self.state = 3262
                    self.match(MySqlParser.OUTER)


                self.state = 3265
                self.match(MySqlParser.JOIN)
                self.state = 3266
                self.tableSourceItem()
                self.state = 3274
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.ON]:
                    self.state = 3267
                    self.match(MySqlParser.ON)
                    self.state = 3268
                    self.expression(0)
                    pass
                elif token in [MySqlParser.USING]:
                    self.state = 3269
                    self.match(MySqlParser.USING)
                    self.state = 3270
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3271
                    self.uidList()
                    self.state = 3272
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.NATURAL]:
                localctx = MySqlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3276
                self.match(MySqlParser.NATURAL)
                self.state = 3281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT:
                    self.state = 3277
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.LEFT or _la==MySqlParser.RIGHT):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.OUTER:
                        self.state = 3278
                        self.match(MySqlParser.OUTER)




                self.state = 3283
                self.match(MySqlParser.JOIN)
                self.state = 3284
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.QueryExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpression

        def enterRule(self, listener):
            if hasattr(listener, "enterQueryExpression"):
                listener.enterQueryExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQueryExpression"):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySqlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_queryExpression)
        try:
            self.state = 3295
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,459,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3287
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3288
                self.querySpecification()
                self.state = 3289
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3291
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3292
                self.queryExpression()
                self.state = 3293
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.QueryExpressionNointoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpressionNointo

        def enterRule(self, listener):
            if hasattr(listener, "enterQueryExpressionNointo"):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQueryExpressionNointo"):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = MySqlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_queryExpressionNointo)
        try:
            self.state = 3305
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,460,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3297
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3298
                self.querySpecificationNointo()
                self.state = 3299
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3301
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3302
                self.queryExpressionNointo()
                self.state = 3303
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.QuerySpecificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(MySqlParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecification

        def enterRule(self, listener):
            if hasattr(listener, "enterQuerySpecification"):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuerySpecification"):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 3347
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,471,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3307
                self.match(MySqlParser.SELECT)
                self.state = 3311
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,461,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3308
                        self.selectSpec() 
                    self.state = 3313
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,461,self._ctx)

                self.state = 3314
                self.selectElements()
                self.state = 3316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3315
                    self.selectIntoExpression()


                self.state = 3319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 3318
                    self.fromClause()


                self.state = 3322
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,464,self._ctx)
                if la_ == 1:
                    self.state = 3321
                    self.orderByClause()


                self.state = 3325
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,465,self._ctx)
                if la_ == 1:
                    self.state = 3324
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3327
                self.match(MySqlParser.SELECT)
                self.state = 3331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,466,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3328
                        self.selectSpec() 
                    self.state = 3333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,466,self._ctx)

                self.state = 3334
                self.selectElements()
                self.state = 3336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 3335
                    self.fromClause()


                self.state = 3339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
                if la_ == 1:
                    self.state = 3338
                    self.orderByClause()


                self.state = 3342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,469,self._ctx)
                if la_ == 1:
                    self.state = 3341
                    self.limitClause()


                self.state = 3345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTO:
                    self.state = 3344
                    self.selectIntoExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.QuerySpecificationNointoContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecificationNointo

        def enterRule(self, listener):
            if hasattr(listener, "enterQuerySpecificationNointo"):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitQuerySpecificationNointo"):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = MySqlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3349
            self.match(MySqlParser.SELECT)
            self.state = 3353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,472,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3350
                    self.selectSpec() 
                self.state = 3355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,472,self._ctx)

            self.state = 3356
            self.selectElements()
            self.state = 3358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FROM:
                self.state = 3357
                self.fromClause()


            self.state = 3361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,474,self._ctx)
            if la_ == 1:
                self.state = 3360
                self.orderByClause()


            self.state = 3364
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,475,self._ctx)
            if la_ == 1:
                self.state = 3363
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UnionParenthesisContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionParenthesis

        def enterRule(self, listener):
            if hasattr(listener, "enterUnionParenthesis"):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnionParenthesis"):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = MySqlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3366
            self.match(MySqlParser.UNION)
            self.state = 3368
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3367
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3370
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UnionStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUnionStatement"):
                listener.enterUnionStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnionStatement"):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = MySqlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3372
            self.match(MySqlParser.UNION)
            self.state = 3374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                self.state = 3373
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3378
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SELECT]:
                self.state = 3376
                self.querySpecificationNointo()
                pass
            elif token in [MySqlParser.LR_BRACKET]:
                self.state = 3377
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectSpecContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySqlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySqlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySqlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectSpec

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectSpec"):
                listener.enterSelectSpec(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectSpec"):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = MySqlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL, MySqlParser.DISTINCT, MySqlParser.DISTINCTROW]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3380
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.ALL) | (1 << MySqlParser.DISTINCT) | (1 << MySqlParser.DISTINCTROW))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.HIGH_PRIORITY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3381
                self.match(MySqlParser.HIGH_PRIORITY)
                pass
            elif token in [MySqlParser.STRAIGHT_JOIN]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3382
                self.match(MySqlParser.STRAIGHT_JOIN)
                pass
            elif token in [MySqlParser.SQL_SMALL_RESULT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3383
                self.match(MySqlParser.SQL_SMALL_RESULT)
                pass
            elif token in [MySqlParser.SQL_BIG_RESULT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3384
                self.match(MySqlParser.SQL_BIG_RESULT)
                pass
            elif token in [MySqlParser.SQL_BUFFER_RESULT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3385
                self.match(MySqlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3386
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_CACHE or _la==MySqlParser.SQL_NO_CACHE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SQL_CALC_FOUND_ROWS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3387
                self.match(MySqlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectElementsContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectElements

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectElements"):
                listener.enterSelectElements(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectElements"):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = MySqlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_selectElements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STAR]:
                self.state = 3390
                localctx.star = self.match(MySqlParser.STAR)
                pass
            elif token in [MySqlParser.CASE, MySqlParser.CAST, MySqlParser.CONVERT, MySqlParser.CURRENT_USER, MySqlParser.DATABASE, MySqlParser.EXISTS, MySqlParser.FALSE, MySqlParser.IF, MySqlParser.INSERT, MySqlParser.INTERVAL, MySqlParser.LEFT, MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.REPLACE, MySqlParser.RIGHT, MySqlParser.TRUE, MySqlParser.VALUES, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.CHAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.CURRENT_DATE, MySqlParser.CURRENT_TIME, MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.CURDATE, MySqlParser.CURTIME, MySqlParser.DATE_ADD, MySqlParser.DATE_SUB, MySqlParser.EXTRACT, MySqlParser.LOCALTIMESTAMP, MySqlParser.NOW, MySqlParser.POSITION, MySqlParser.SUBSTR, MySqlParser.SUBSTRING, MySqlParser.SYSDATE, MySqlParser.TRIM, MySqlParser.UTC_DATE, MySqlParser.UTC_TIME, MySqlParser.UTC_TIMESTAMP, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.PLUS, MySqlParser.MINUS, MySqlParser.EXCLAMATION_SYMBOL, MySqlParser.BIT_NOT_OP, MySqlParser.LR_BRACKET, MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.START_NATIONAL_STRING_LITERAL, MySqlParser.STRING_LITERAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.HEXADECIMAL_LITERAL, MySqlParser.REAL_LITERAL, MySqlParser.NULL_SPEC_LITERAL, MySqlParser.BIT_STRING, MySqlParser.STRING_CHARSET_NAME, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.state = 3391
                self.selectElement()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3394
                self.match(MySqlParser.COMMA)
                self.state = 3395
                self.selectElement()
                self.state = 3400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectElementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectElement

     
        def copyFrom(self, ctx):
            super(MySqlParser.SelectElementContext, self).copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectElementContext)
            super(MySqlParser.SelectExpressionElementContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectExpressionElement"):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectExpressionElement"):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectElementContext)
            super(MySqlParser.SelectFunctionElementContext, self).__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectFunctionElement"):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectFunctionElement"):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectElementContext)
            super(MySqlParser.SelectStarElementContext, self).__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectStarElement"):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectStarElement"):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectElementContext)
            super(MySqlParser.SelectColumnElementContext, self).__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectColumnElement"):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectColumnElement"):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = MySqlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,489,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3401
                self.fullId()
                self.state = 3402
                self.match(MySqlParser.DOT)
                self.state = 3403
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3405
                self.fullColumnName()
                self.state = 3410
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,483,self._ctx)
                if la_ == 1:
                    self.state = 3407
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3406
                        self.match(MySqlParser.AS)


                    self.state = 3409
                    self.uid()


                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3412
                self.functionCall()
                self.state = 3417
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,485,self._ctx)
                if la_ == 1:
                    self.state = 3414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3413
                        self.match(MySqlParser.AS)


                    self.state = 3416
                    self.uid()


                pass

            elif la_ == 4:
                localctx = MySqlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,486,self._ctx)
                if la_ == 1:
                    self.state = 3419
                    self.match(MySqlParser.LOCAL_ID)
                    self.state = 3420
                    self.match(MySqlParser.VAR_ASSIGN)


                self.state = 3423
                self.expression(0)
                self.state = 3428
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,488,self._ctx)
                if la_ == 1:
                    self.state = 3425
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AS:
                        self.state = 3424
                        self.match(MySqlParser.AS)


                    self.state = 3427
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectIntoExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx):
            super(MySqlParser.SelectIntoExpressionContext, self).copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectIntoExpressionContext)
            super(MySqlParser.SelectIntoVariablesContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def assignmentField(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectIntoVariables"):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectIntoVariables"):
                listener.exitSelectIntoVariables(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectIntoExpressionContext)
            super(MySqlParser.SelectIntoTextFileContext, self).__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(MySqlParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def selectFieldsInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterSelectIntoTextFile"):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectIntoTextFile"):
                listener.exitSelectIntoTextFile(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SelectIntoExpressionContext)
            super(MySqlParser.SelectIntoDumpFileContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectIntoDumpFile"):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectIntoDumpFile"):
                listener.exitSelectIntoDumpFile(self)



    def selectIntoExpression(self):

        localctx = MySqlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 3468
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,496,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3432
                self.match(MySqlParser.INTO)
                self.state = 3433
                self.assignmentField()
                self.state = 3438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3434
                    self.match(MySqlParser.COMMA)
                    self.state = 3435
                    self.assignmentField()
                    self.state = 3440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3441
                self.match(MySqlParser.INTO)
                self.state = 3442
                self.match(MySqlParser.DUMPFILE)
                self.state = 3443
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3444
                self.match(MySqlParser.INTO)
                self.state = 3445
                self.match(MySqlParser.OUTFILE)
                self.state = 3446
                localctx.filename = self.match(MySqlParser.STRING_LITERAL)
                self.state = 3450
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 3447
                    self.match(MySqlParser.CHARACTER)
                    self.state = 3448
                    self.match(MySqlParser.SET)
                    self.state = 3449
                    localctx.charset = self.charsetName()


                self.state = 3458
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,493,self._ctx)
                if la_ == 1:
                    self.state = 3452
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3454 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3453
                        self.selectFieldsInto()
                        self.state = 3456 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.ENCLOSED or _la==MySqlParser.ESCAPED or _la==MySqlParser.OPTIONALLY or _la==MySqlParser.TERMINATED):
                            break



                self.state = 3466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LINES:
                    self.state = 3460
                    self.match(MySqlParser.LINES)
                    self.state = 3462 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 3461
                        self.selectLinesInto()
                        self.state = 3464 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==MySqlParser.STARTING or _la==MySqlParser.TERMINATED):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectFieldsIntoContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(MySqlParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(MySqlParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(MySqlParser.ESCAPED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectFieldsInto

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectFieldsInto"):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectFieldsInto"):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = MySqlParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 3482
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3470
                self.match(MySqlParser.TERMINATED)
                self.state = 3471
                self.match(MySqlParser.BY)
                self.state = 3472
                localctx.terminationField = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ENCLOSED, MySqlParser.OPTIONALLY]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.OPTIONALLY:
                    self.state = 3473
                    self.match(MySqlParser.OPTIONALLY)


                self.state = 3476
                self.match(MySqlParser.ENCLOSED)
                self.state = 3477
                self.match(MySqlParser.BY)
                self.state = 3478
                localctx.enclosion = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ESCAPED]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3479
                self.match(MySqlParser.ESCAPED)
                self.state = 3480
                self.match(MySqlParser.BY)
                self.state = 3481
                localctx.escaping = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SelectLinesIntoContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(MySqlParser.STARTING, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectLinesInto

        def enterRule(self, listener):
            if hasattr(listener, "enterSelectLinesInto"):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSelectLinesInto"):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = MySqlParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_selectLinesInto)
        try:
            self.state = 3490
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STARTING]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3484
                self.match(MySqlParser.STARTING)
                self.state = 3485
                self.match(MySqlParser.BY)
                self.state = 3486
                localctx.starting = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.TERMINATED]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3487
                self.match(MySqlParser.TERMINATED)
                self.state = 3488
                self.match(MySqlParser.BY)
                self.state = 3489
                localctx.terminationLine = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FromClauseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext
            self.havingExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def groupByItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(MySqlParser.GroupByItemContext,i)


        def HAVING(self):
            return self.getToken(MySqlParser.HAVING, 0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fromClause

        def enterRule(self, listener):
            if hasattr(listener, "enterFromClause"):
                listener.enterFromClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFromClause"):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3492
            self.match(MySqlParser.FROM)
            self.state = 3493
            self.tableSources()
            self.state = 3496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WHERE:
                self.state = 3494
                self.match(MySqlParser.WHERE)
                self.state = 3495
                localctx.whereExpr = self.expression(0)


            self.state = 3512
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.GROUP:
                self.state = 3498
                self.match(MySqlParser.GROUP)
                self.state = 3499
                self.match(MySqlParser.BY)
                self.state = 3500
                self.groupByItem()
                self.state = 3505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3501
                    self.match(MySqlParser.COMMA)
                    self.state = 3502
                    self.groupByItem()
                    self.state = 3507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3510
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
                if la_ == 1:
                    self.state = 3508
                    self.match(MySqlParser.WITH)
                    self.state = 3509
                    self.match(MySqlParser.ROLLUP)




            self.state = 3516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.HAVING:
                self.state = 3514
                self.match(MySqlParser.HAVING)
                self.state = 3515
                localctx.havingExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.GroupByItemContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByItem

        def enterRule(self, listener):
            if hasattr(listener, "enterGroupByItem"):
                listener.enterGroupByItem(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGroupByItem"):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = MySqlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3518
            self.expression(0)
            self.state = 3520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC:
                self.state = 3519
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LimitClauseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # DecimalLiteralContext
            self.limit = None # DecimalLiteralContext

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_limitClause

        def enterRule(self, listener):
            if hasattr(listener, "enterLimitClause"):
                listener.enterLimitClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLimitClause"):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3522
            self.match(MySqlParser.LIMIT)
            self.state = 3533
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
            if la_ == 1:
                self.state = 3526
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,506,self._ctx)
                if la_ == 1:
                    self.state = 3523
                    localctx.offset = self.decimalLiteral()
                    self.state = 3524
                    self.match(MySqlParser.COMMA)


                self.state = 3528
                localctx.limit = self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 3529
                localctx.limit = self.decimalLiteral()
                self.state = 3530
                self.match(MySqlParser.OFFSET)
                self.state = 3531
                localctx.offset = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StartTransactionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionMode(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionModeContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startTransaction

        def enterRule(self, listener):
            if hasattr(listener, "enterStartTransaction"):
                listener.enterStartTransaction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartTransaction"):
                listener.exitStartTransaction(self)




    def startTransaction(self):

        localctx = MySqlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3535
            self.match(MySqlParser.START)
            self.state = 3536
            self.match(MySqlParser.TRANSACTION)
            self.state = 3545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.READ or _la==MySqlParser.WITH:
                self.state = 3537
                self.transactionMode()
                self.state = 3542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3538
                    self.match(MySqlParser.COMMA)
                    self.state = 3539
                    self.transactionMode()
                    self.state = 3544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BeginWorkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_beginWork

        def enterRule(self, listener):
            if hasattr(listener, "enterBeginWork"):
                listener.enterBeginWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBeginWork"):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySqlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3547
            self.match(MySqlParser.BEGIN)
            self.state = 3549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3548
                self.match(MySqlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CommitWorkContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_commitWork

        def enterRule(self, listener):
            if hasattr(listener, "enterCommitWork"):
                listener.enterCommitWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCommitWork"):
                listener.exitCommitWork(self)




    def commitWork(self):

        localctx = MySqlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3551
            self.match(MySqlParser.COMMIT)
            self.state = 3553
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3552
                self.match(MySqlParser.WORK)


            self.state = 3560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 3555
                self.match(MySqlParser.AND)
                self.state = 3557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3556
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 3559
                self.match(MySqlParser.CHAIN)


            self.state = 3566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.RELEASE or _la==MySqlParser.NO:
                self.state = 3563
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3562
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 3565
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RollbackWorkContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackWork

        def enterRule(self, listener):
            if hasattr(listener, "enterRollbackWork"):
                listener.enterRollbackWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollbackWork"):
                listener.exitRollbackWork(self)




    def rollbackWork(self):

        localctx = MySqlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3568
            self.match(MySqlParser.ROLLBACK)
            self.state = 3570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3569
                self.match(MySqlParser.WORK)


            self.state = 3577
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AND:
                self.state = 3572
                self.match(MySqlParser.AND)
                self.state = 3574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3573
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 3576
                self.match(MySqlParser.CHAIN)


            self.state = 3583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.RELEASE or _la==MySqlParser.NO:
                self.state = 3580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NO:
                    self.state = 3579
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 3582
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SavepointStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_savepointStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSavepointStatement"):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSavepointStatement"):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySqlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3585
            self.match(MySqlParser.SAVEPOINT)
            self.state = 3586
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RollbackStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterRollbackStatement"):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRollbackStatement"):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = MySqlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3588
            self.match(MySqlParser.ROLLBACK)
            self.state = 3590
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WORK:
                self.state = 3589
                self.match(MySqlParser.WORK)


            self.state = 3592
            self.match(MySqlParser.TO)
            self.state = 3594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,522,self._ctx)
            if la_ == 1:
                self.state = 3593
                self.match(MySqlParser.SAVEPOINT)


            self.state = 3596
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReleaseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_releaseStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReleaseStatement"):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReleaseStatement"):
                listener.exitReleaseStatement(self)




    def releaseStatement(self):

        localctx = MySqlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3598
            self.match(MySqlParser.RELEASE)
            self.state = 3599
            self.match(MySqlParser.SAVEPOINT)
            self.state = 3600
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LockTablesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def lockTableElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LockTableElementContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTables

        def enterRule(self, listener):
            if hasattr(listener, "enterLockTables"):
                listener.enterLockTables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLockTables"):
                listener.exitLockTables(self)




    def lockTables(self):

        localctx = MySqlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3602
            self.match(MySqlParser.LOCK)
            self.state = 3603
            self.match(MySqlParser.TABLES)
            self.state = 3604
            self.lockTableElement()
            self.state = 3609
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3605
                self.match(MySqlParser.COMMA)
                self.state = 3606
                self.lockTableElement()
                self.state = 3611
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UnlockTablesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unlockTables

        def enterRule(self, listener):
            if hasattr(listener, "enterUnlockTables"):
                listener.enterUnlockTables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnlockTables"):
                listener.exitUnlockTables(self)




    def unlockTables(self):

        localctx = MySqlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3612
            self.match(MySqlParser.UNLOCK)
            self.state = 3613
            self.match(MySqlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SetAutocommitStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setAutocommitStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetAutocommitStatement"):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetAutocommitStatement"):
                listener.exitSetAutocommitStatement(self)




    def setAutocommitStatement(self):

        localctx = MySqlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3615
            self.match(MySqlParser.SET)
            self.state = 3616
            self.match(MySqlParser.AUTOCOMMIT)
            self.state = 3617
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 3618
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SetTransactionStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionOptionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setTransactionStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetTransactionStatement"):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetTransactionStatement"):
                listener.exitSetTransactionStatement(self)




    def setTransactionStatement(self):

        localctx = MySqlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3620
            self.match(MySqlParser.SET)
            self.state = 3622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                self.state = 3621
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3624
            self.match(MySqlParser.TRANSACTION)
            self.state = 3625
            self.transactionOption()
            self.state = 3630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3626
                self.match(MySqlParser.COMMA)
                self.state = 3627
                self.transactionOption()
                self.state = 3632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TransactionModeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionMode

        def enterRule(self, listener):
            if hasattr(listener, "enterTransactionMode"):
                listener.enterTransactionMode(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransactionMode"):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = MySqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_transactionMode)
        try:
            self.state = 3640
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,526,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3633
                self.match(MySqlParser.WITH)
                self.state = 3634
                self.match(MySqlParser.CONSISTENT)
                self.state = 3635
                self.match(MySqlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3636
                self.match(MySqlParser.READ)
                self.state = 3637
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3638
                self.match(MySqlParser.READ)
                self.state = 3639
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LockTableElementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(MySqlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTableElement

        def enterRule(self, listener):
            if hasattr(listener, "enterLockTableElement"):
                listener.enterLockTableElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLockTableElement"):
                listener.exitLockTableElement(self)




    def lockTableElement(self):

        localctx = MySqlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3642
            self.tableName()
            self.state = 3647
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AS or _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 3644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 3643
                    self.match(MySqlParser.AS)


                self.state = 3646
                self.uid()


            self.state = 3649
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LockActionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockAction

        def enterRule(self, listener):
            if hasattr(listener, "enterLockAction"):
                listener.enterLockAction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLockAction"):
                listener.exitLockAction(self)




    def lockAction(self):

        localctx = MySqlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 3659
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.READ]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3651
                self.match(MySqlParser.READ)
                self.state = 3653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOCAL:
                    self.state = 3652
                    self.match(MySqlParser.LOCAL)


                pass
            elif token in [MySqlParser.LOW_PRIORITY, MySqlParser.WRITE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LOW_PRIORITY:
                    self.state = 3655
                    self.match(MySqlParser.LOW_PRIORITY)


                self.state = 3658
                self.match(MySqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TransactionOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionOption

        def enterRule(self, listener):
            if hasattr(listener, "enterTransactionOption"):
                listener.enterTransactionOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransactionOption"):
                listener.exitTransactionOption(self)




    def transactionOption(self):

        localctx = MySqlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_transactionOption)
        try:
            self.state = 3668
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3661
                self.match(MySqlParser.ISOLATION)
                self.state = 3662
                self.match(MySqlParser.LEVEL)
                self.state = 3663
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3664
                self.match(MySqlParser.READ)
                self.state = 3665
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3666
                self.match(MySqlParser.READ)
                self.state = 3667
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TransactionLevelContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevel

        def enterRule(self, listener):
            if hasattr(listener, "enterTransactionLevel"):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransactionLevel"):
                listener.exitTransactionLevel(self)




    def transactionLevel(self):

        localctx = MySqlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_transactionLevel)
        try:
            self.state = 3677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,533,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3670
                self.match(MySqlParser.REPEATABLE)
                self.state = 3671
                self.match(MySqlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3672
                self.match(MySqlParser.READ)
                self.state = 3673
                self.match(MySqlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3674
                self.match(MySqlParser.READ)
                self.state = 3675
                self.match(MySqlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3676
                self.match(MySqlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ChangeMasterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def masterOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.MasterOptionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_changeMaster

        def enterRule(self, listener):
            if hasattr(listener, "enterChangeMaster"):
                listener.enterChangeMaster(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChangeMaster"):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySqlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3679
            self.match(MySqlParser.CHANGE)
            self.state = 3680
            self.match(MySqlParser.MASTER)
            self.state = 3681
            self.match(MySqlParser.TO)
            self.state = 3682
            self.masterOption()
            self.state = 3687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3683
                self.match(MySqlParser.COMMA)
                self.state = 3684
                self.masterOption()
                self.state = 3689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3690
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ChangeReplicationFilterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def replicationFilter(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReplicationFilterContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_changeReplicationFilter

        def enterRule(self, listener):
            if hasattr(listener, "enterChangeReplicationFilter"):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChangeReplicationFilter"):
                listener.exitChangeReplicationFilter(self)




    def changeReplicationFilter(self):

        localctx = MySqlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3693
            self.match(MySqlParser.CHANGE)
            self.state = 3694
            self.match(MySqlParser.REPLICATION)
            self.state = 3695
            self.match(MySqlParser.FILTER)
            self.state = 3696
            self.replicationFilter()
            self.state = 3701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 3697
                self.match(MySqlParser.COMMA)
                self.state = 3698
                self.replicationFilter()
                self.state = 3703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PurgeBinaryLogsContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(MySqlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener):
            if hasattr(listener, "enterPurgeBinaryLogs"):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPurgeBinaryLogs"):
                listener.exitPurgeBinaryLogs(self)




    def purgeBinaryLogs(self):

        localctx = MySqlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3704
            self.match(MySqlParser.PURGE)
            self.state = 3705
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3706
            self.match(MySqlParser.LOGS)
            self.state = 3711
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.TO]:
                self.state = 3707
                self.match(MySqlParser.TO)
                self.state = 3708
                localctx.fileName = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BEFORE]:
                self.state = 3709
                self.match(MySqlParser.BEFORE)
                self.state = 3710
                localctx.timeValue = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ResetMasterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetMaster

        def enterRule(self, listener):
            if hasattr(listener, "enterResetMaster"):
                listener.enterResetMaster(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResetMaster"):
                listener.exitResetMaster(self)




    def resetMaster(self):

        localctx = MySqlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3713
            self.match(MySqlParser.RESET)
            self.state = 3714
            self.match(MySqlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ResetSlaveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_resetSlave

        def enterRule(self, listener):
            if hasattr(listener, "enterResetSlave"):
                listener.enterResetSlave(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResetSlave"):
                listener.exitResetSlave(self)




    def resetSlave(self):

        localctx = MySqlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3716
            self.match(MySqlParser.RESET)
            self.state = 3717
            self.match(MySqlParser.SLAVE)
            self.state = 3719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ALL:
                self.state = 3718
                self.match(MySqlParser.ALL)


            self.state = 3722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3721
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StartSlaveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(MySqlParser.UntilOptionContext,0)


        def connectionOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startSlave

        def enterRule(self, listener):
            if hasattr(listener, "enterStartSlave"):
                listener.enterStartSlave(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartSlave"):
                listener.exitStartSlave(self)




    def startSlave(self):

        localctx = MySqlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3724
            self.match(MySqlParser.START)
            self.state = 3725
            self.match(MySqlParser.SLAVE)
            self.state = 3734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 3726
                self.threadType()
                self.state = 3731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3727
                    self.match(MySqlParser.COMMA)
                    self.state = 3728
                    self.threadType()
                    self.state = 3733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 3738
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.UNTIL:
                self.state = 3736
                self.match(MySqlParser.UNTIL)
                self.state = 3737
                self.untilOption()


            self.state = 3743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.DEFAULT_AUTH or _la==MySqlParser.PASSWORD or _la==MySqlParser.PLUGIN_DIR or _la==MySqlParser.USER:
                self.state = 3740
                self.connectionOption()
                self.state = 3745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 3746
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StopSlaveContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopSlave

        def enterRule(self, listener):
            if hasattr(listener, "enterStopSlave"):
                listener.enterStopSlave(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStopSlave"):
                listener.exitStopSlave(self)




    def stopSlave(self):

        localctx = MySqlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3749
            self.match(MySqlParser.STOP)
            self.state = 3750
            self.match(MySqlParser.SLAVE)
            self.state = 3759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD:
                self.state = 3751
                self.threadType()
                self.state = 3756
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3752
                    self.match(MySqlParser.COMMA)
                    self.state = 3753
                    self.threadType()
                    self.state = 3758
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StartGroupReplicationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_startGroupReplication

        def enterRule(self, listener):
            if hasattr(listener, "enterStartGroupReplication"):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStartGroupReplication"):
                listener.exitStartGroupReplication(self)




    def startGroupReplication(self):

        localctx = MySqlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3761
            self.match(MySqlParser.START)
            self.state = 3762
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StopGroupReplicationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopGroupReplication

        def enterRule(self, listener):
            if hasattr(listener, "enterStopGroupReplication"):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStopGroupReplication"):
                listener.exitStopGroupReplication(self)




    def stopGroupReplication(self):

        localctx = MySqlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3764
            self.match(MySqlParser.STOP)
            self.state = 3765
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.MasterOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_masterOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.MasterOptionContext, self).copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.MasterOptionContext)
            super(MySqlParser.MasterStringOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterMasterStringOption"):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterStringOption"):
                listener.exitMasterStringOption(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.MasterOptionContext)
            super(MySqlParser.MasterRealOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterMasterRealOption"):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterRealOption"):
                listener.exitMasterRealOption(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.MasterOptionContext)
            super(MySqlParser.MasterBoolOptionContext, self).__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterMasterBoolOption"):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterBoolOption"):
                listener.exitMasterBoolOption(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.MasterOptionContext)
            super(MySqlParser.MasterUidListOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterMasterUidListOption"):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterUidListOption"):
                listener.exitMasterUidListOption(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.MasterOptionContext)
            super(MySqlParser.MasterDecimalOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterMasterDecimalOption"):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterDecimalOption"):
                listener.exitMasterDecimalOption(self)



    def masterOption(self):

        localctx = MySqlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 3796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MASTER_BIND, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3767
                self.stringMasterOption()
                self.state = 3768
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3769
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.RELAY_LOG_POS]:
                localctx = MySqlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3771
                self.decimalMasterOption()
                self.state = 3772
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3773
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_SSL]:
                localctx = MySqlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3775
                self.boolMasterOption()
                self.state = 3776
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3777
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ZERO_DECIMAL or _la==MySqlParser.ONE_DECIMAL):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.MASTER_HEARTBEAT_PERIOD]:
                localctx = MySqlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3779
                self.match(MySqlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 3780
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3781
                self.match(MySqlParser.REAL_LITERAL)
                pass
            elif token in [MySqlParser.IGNORE_SERVER_IDS]:
                localctx = MySqlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3782
                self.match(MySqlParser.IGNORE_SERVER_IDS)
                self.state = 3783
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3784
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                    self.state = 3785
                    self.uid()
                    self.state = 3790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 3786
                        self.match(MySqlParser.COMMA)
                        self.state = 3787
                        self.uid()
                        self.state = 3792
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 3795
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StringMasterOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(MySqlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stringMasterOption

        def enterRule(self, listener):
            if hasattr(listener, "enterStringMasterOption"):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringMasterOption"):
                listener.exitStringMasterOption(self)




    def stringMasterOption(self):

        localctx = MySqlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3798
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_BIND or ((((_la - 376)) & ~0x3f) == 0 and ((1 << (_la - 376)) & ((1 << (MySqlParser.MASTER_HOST - 376)) | (1 << (MySqlParser.MASTER_LOG_FILE - 376)) | (1 << (MySqlParser.MASTER_PASSWORD - 376)) | (1 << (MySqlParser.MASTER_SSL_CA - 376)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 376)) | (1 << (MySqlParser.MASTER_SSL_CERT - 376)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 376)) | (1 << (MySqlParser.MASTER_SSL_CRL - 376)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 376)) | (1 << (MySqlParser.MASTER_SSL_KEY - 376)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 376)) | (1 << (MySqlParser.MASTER_USER - 376)))) != 0) or _la==MySqlParser.RELAY_LOG_FILE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DecimalMasterOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalMasterOption

        def enterRule(self, listener):
            if hasattr(listener, "enterDecimalMasterOption"):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecimalMasterOption"):
                listener.exitDecimalMasterOption(self)




    def decimalMasterOption(self):

        localctx = MySqlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3800
            _la = self._input.LA(1)
            if not(((((_la - 373)) & ~0x3f) == 0 and ((1 << (_la - 373)) & ((1 << (MySqlParser.MASTER_CONNECT_RETRY - 373)) | (1 << (MySqlParser.MASTER_DELAY - 373)) | (1 << (MySqlParser.MASTER_LOG_POS - 373)) | (1 << (MySqlParser.MASTER_PORT - 373)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 373)))) != 0) or _la==MySqlParser.RELAY_LOG_POS):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BoolMasterOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_boolMasterOption

        def enterRule(self, listener):
            if hasattr(listener, "enterBoolMasterOption"):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBoolMasterOption"):
                listener.exitBoolMasterOption(self)




    def boolMasterOption(self):

        localctx = MySqlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3802
            _la = self._input.LA(1)
            if not(_la==MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT or _la==MySqlParser.MASTER_AUTO_POSITION or _la==MySqlParser.MASTER_SSL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ChannelOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_channelOption

        def enterRule(self, listener):
            if hasattr(listener, "enterChannelOption"):
                listener.enterChannelOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChannelOption"):
                listener.exitChannelOption(self)




    def channelOption(self):

        localctx = MySqlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3804
            self.match(MySqlParser.FOR)
            self.state = 3805
            self.match(MySqlParser.CHANNEL)
            self.state = 3806
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReplicationFilterContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx):
            super(MySqlParser.ReplicationFilterContext, self).copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.WildIgnoreTableReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterWildIgnoreTableReplication"):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWildIgnoreTableReplication"):
                listener.exitWildIgnoreTableReplication(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.DoTableReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDoTableReplication"):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDoTableReplication"):
                listener.exitDoTableReplication(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.IgnoreTableReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterIgnoreTableReplication"):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIgnoreTableReplication"):
                listener.exitIgnoreTableReplication(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.RewriteDbReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tablePair(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TablePairContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TablePairContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterRewriteDbReplication"):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRewriteDbReplication"):
                listener.exitRewriteDbReplication(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.DoDbReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDoDbReplication"):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDoDbReplication"):
                listener.exitDoDbReplication(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.IgnoreDbReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterIgnoreDbReplication"):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIgnoreDbReplication"):
                listener.exitIgnoreDbReplication(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ReplicationFilterContext)
            super(MySqlParser.WildDoTableReplicationContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterWildDoTableReplication"):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWildDoTableReplication"):
                listener.exitWildDoTableReplication(self)



    def replicationFilter(self):

        localctx = MySqlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 3857
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.REPLICATE_DO_DB]:
                localctx = MySqlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3808
                self.match(MySqlParser.REPLICATE_DO_DB)
                self.state = 3809
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3810
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3811
                self.uidList()
                self.state = 3812
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_DB]:
                localctx = MySqlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3814
                self.match(MySqlParser.REPLICATE_IGNORE_DB)
                self.state = 3815
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3816
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3817
                self.uidList()
                self.state = 3818
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_DO_TABLE]:
                localctx = MySqlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3820
                self.match(MySqlParser.REPLICATE_DO_TABLE)
                self.state = 3821
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3822
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3823
                self.tables()
                self.state = 3824
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_IGNORE_TABLE]:
                localctx = MySqlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3826
                self.match(MySqlParser.REPLICATE_IGNORE_TABLE)
                self.state = 3827
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3828
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3829
                self.tables()
                self.state = 3830
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_DO_TABLE]:
                localctx = MySqlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3832
                self.match(MySqlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 3833
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3834
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3835
                self.simpleStrings()
                self.state = 3836
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_WILD_IGNORE_TABLE]:
                localctx = MySqlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 3838
                self.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 3839
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3840
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3841
                self.simpleStrings()
                self.state = 3842
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [MySqlParser.REPLICATE_REWRITE_DB]:
                localctx = MySqlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 3844
                self.match(MySqlParser.REPLICATE_REWRITE_DB)
                self.state = 3845
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3846
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3847
                self.tablePair()
                self.state = 3852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3848
                    self.match(MySqlParser.COMMA)
                    self.state = 3849
                    self.tablePair()
                    self.state = 3854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3855
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TablePairContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def tableName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_tablePair

        def enterRule(self, listener):
            if hasattr(listener, "enterTablePair"):
                listener.enterTablePair(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTablePair"):
                listener.exitTablePair(self)




    def tablePair(self):

        localctx = MySqlParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3859
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3860
            localctx.firstTable = self.tableName()
            self.state = 3861
            self.match(MySqlParser.COMMA)
            self.state = 3862
            localctx.secondTable = self.tableName()
            self.state = 3863
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ThreadTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_threadType

        def enterRule(self, listener):
            if hasattr(listener, "enterThreadType"):
                listener.enterThreadType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitThreadType"):
                listener.exitThreadType(self)




    def threadType(self):

        localctx = MySqlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3865
            _la = self._input.LA(1)
            if not(_la==MySqlParser.IO_THREAD or _la==MySqlParser.SQL_THREAD):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UntilOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_untilOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.UntilOptionContext, self).copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UntilOptionContext)
            super(MySqlParser.GtidsUntilOptionContext, self).__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(MySqlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGtidsUntilOption"):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGtidsUntilOption"):
                listener.exitGtidsUntilOption(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UntilOptionContext)
            super(MySqlParser.SqlGapsUntilOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSqlGapsUntilOption"):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSqlGapsUntilOption"):
                listener.exitSqlGapsUntilOption(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UntilOptionContext)
            super(MySqlParser.MasterLogUntilOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterMasterLogUntilOption"):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMasterLogUntilOption"):
                listener.exitMasterLogUntilOption(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UntilOptionContext)
            super(MySqlParser.RelayLogUntilOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterRelayLogUntilOption"):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRelayLogUntilOption"):
                listener.exitRelayLogUntilOption(self)



    def untilOption(self):

        localctx = MySqlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 3885
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_BEFORE_GTIDS]:
                localctx = MySqlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3867
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SQL_AFTER_GTIDS or _la==MySqlParser.SQL_BEFORE_GTIDS):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3868
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3869
                self.gtuidSet()
                pass
            elif token in [MySqlParser.MASTER_LOG_FILE]:
                localctx = MySqlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3870
                self.match(MySqlParser.MASTER_LOG_FILE)
                self.state = 3871
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3872
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 3873
                self.match(MySqlParser.COMMA)
                self.state = 3874
                self.match(MySqlParser.MASTER_LOG_POS)
                self.state = 3875
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3876
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.RELAY_LOG_FILE]:
                localctx = MySqlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3877
                self.match(MySqlParser.RELAY_LOG_FILE)
                self.state = 3878
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3879
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 3880
                self.match(MySqlParser.COMMA)
                self.state = 3881
                self.match(MySqlParser.RELAY_LOG_POS)
                self.state = 3882
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3883
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQL_AFTER_MTS_GAPS]:
                localctx = MySqlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3884
                self.match(MySqlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ConnectionOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_connectionOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.ConnectionOptionContext, self).copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ConnectionOptionContext)
            super(MySqlParser.PluginDirConnectionOptionContext, self).__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPluginDirConnectionOption"):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPluginDirConnectionOption"):
                listener.exitPluginDirConnectionOption(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ConnectionOptionContext)
            super(MySqlParser.UserConnectionOptionContext, self).__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterUserConnectionOption"):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserConnectionOption"):
                listener.exitUserConnectionOption(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ConnectionOptionContext)
            super(MySqlParser.DefaultAuthConnectionOptionContext, self).__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDefaultAuthConnectionOption"):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefaultAuthConnectionOption"):
                listener.exitDefaultAuthConnectionOption(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ConnectionOptionContext)
            super(MySqlParser.PasswordConnectionOptionContext, self).__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPasswordConnectionOption"):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPasswordConnectionOption"):
                listener.exitPasswordConnectionOption(self)



    def connectionOption(self):

        localctx = MySqlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_connectionOption)
        try:
            self.state = 3899
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.USER]:
                localctx = MySqlParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3887
                self.match(MySqlParser.USER)
                self.state = 3888
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3889
                localctx.conOptUser = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PASSWORD]:
                localctx = MySqlParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3890
                self.match(MySqlParser.PASSWORD)
                self.state = 3891
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3892
                localctx.conOptPassword = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DEFAULT_AUTH]:
                localctx = MySqlParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3893
                self.match(MySqlParser.DEFAULT_AUTH)
                self.state = 3894
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3895
                localctx.conOptDefAuth = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.PLUGIN_DIR]:
                localctx = MySqlParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3896
                self.match(MySqlParser.PLUGIN_DIR)
                self.state = 3897
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 3898
                localctx.conOptPluginDir = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.GtuidSetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UuidSetContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_gtuidSet

        def enterRule(self, listener):
            if hasattr(listener, "enterGtuidSet"):
                listener.enterGtuidSet(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGtuidSet"):
                listener.exitGtuidSet(self)




    def gtuidSet(self):

        localctx = MySqlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 3910
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3901
                self.uuidSet()
                self.state = 3906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 3902
                    self.match(MySqlParser.COMMA)
                    self.state = 3903
                    self.uuidSet()
                    self.state = 3908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3909
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaStartTransactionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaStartTransaction

        def enterRule(self, listener):
            if hasattr(listener, "enterXaStartTransaction"):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaStartTransaction"):
                listener.exitXaStartTransaction(self)




    def xaStartTransaction(self):

        localctx = MySqlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3912
            self.match(MySqlParser.XA)
            self.state = 3913
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.BEGIN or _la==MySqlParser.START):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3914
            self.xid()
            self.state = 3916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.JOIN or _la==MySqlParser.RESUME:
                self.state = 3915
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JOIN or _la==MySqlParser.RESUME):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaEndTransactionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaEndTransaction

        def enterRule(self, listener):
            if hasattr(listener, "enterXaEndTransaction"):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaEndTransaction"):
                listener.exitXaEndTransaction(self)




    def xaEndTransaction(self):

        localctx = MySqlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3918
            self.match(MySqlParser.XA)
            self.state = 3919
            self.match(MySqlParser.END)
            self.state = 3920
            self.xid()
            self.state = 3926
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.SUSPEND:
                self.state = 3921
                self.match(MySqlParser.SUSPEND)
                self.state = 3924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 3922
                    self.match(MySqlParser.FOR)
                    self.state = 3923
                    self.match(MySqlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaPrepareStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaPrepareStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterXaPrepareStatement"):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaPrepareStatement"):
                listener.exitXaPrepareStatement(self)




    def xaPrepareStatement(self):

        localctx = MySqlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3928
            self.match(MySqlParser.XA)
            self.state = 3929
            self.match(MySqlParser.PREPARE)
            self.state = 3930
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaCommitWorkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaCommitWork

        def enterRule(self, listener):
            if hasattr(listener, "enterXaCommitWork"):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaCommitWork"):
                listener.exitXaCommitWork(self)




    def xaCommitWork(self):

        localctx = MySqlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3932
            self.match(MySqlParser.XA)
            self.state = 3933
            self.match(MySqlParser.COMMIT)
            self.state = 3934
            self.xid()
            self.state = 3937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ONE:
                self.state = 3935
                self.match(MySqlParser.ONE)
                self.state = 3936
                self.match(MySqlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaRollbackWorkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRollbackWork

        def enterRule(self, listener):
            if hasattr(listener, "enterXaRollbackWork"):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaRollbackWork"):
                listener.exitXaRollbackWork(self)




    def xaRollbackWork(self):

        localctx = MySqlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3939
            self.match(MySqlParser.XA)
            self.state = 3940
            self.match(MySqlParser.ROLLBACK)
            self.state = 3941
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XaRecoverWorkContext, self).__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRecoverWork

        def enterRule(self, listener):
            if hasattr(listener, "enterXaRecoverWork"):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXaRecoverWork"):
                listener.exitXaRecoverWork(self)




    def xaRecoverWork(self):

        localctx = MySqlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3943
            self.match(MySqlParser.XA)
            self.state = 3944
            self.match(MySqlParser.RECOVER)
            self.state = 3947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONVERT:
                self.state = 3945
                self.match(MySqlParser.CONVERT)
                self.state = 3946
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PrepareStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_prepareStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterPrepareStatement"):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrepareStatement"):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = MySqlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3949
            self.match(MySqlParser.PREPARE)
            self.state = 3950
            self.uid()
            self.state = 3951
            self.match(MySqlParser.FROM)
            self.state = 3954
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.state = 3952
                localctx.query = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.LOCAL_ID]:
                self.state = 3953
                localctx.variable = self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExecuteStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(MySqlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_executeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterExecuteStatement"):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExecuteStatement"):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySqlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3956
            self.match(MySqlParser.EXECUTE)
            self.state = 3957
            self.uid()
            self.state = 3960
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USING:
                self.state = 3958
                self.match(MySqlParser.USING)
                self.state = 3959
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeallocatePrepareContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_deallocatePrepare

        def enterRule(self, listener):
            if hasattr(listener, "enterDeallocatePrepare"):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeallocatePrepare"):
                listener.exitDeallocatePrepare(self)




    def deallocatePrepare(self):

        localctx = MySqlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3962
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DROP or _la==MySqlParser.DEALLOCATE):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3963
            self.match(MySqlParser.PREPARE)
            self.state = 3964
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RoutineBodyContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_routineBody

        def enterRule(self, listener):
            if hasattr(listener, "enterRoutineBody"):
                listener.enterRoutineBody(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRoutineBody"):
                listener.exitRoutineBody(self)




    def routineBody(self):

        localctx = MySqlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_routineBody)
        try:
            self.state = 3968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,563,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3966
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3967
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BlockStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def declareVariable(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareVariableContext,i)


        def SEMI(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def declareCondition(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareConditionContext,i)


        def declareCursor(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareCursorContext,i)


        def declareHandler(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_blockStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterBlockStatement"):
                listener.enterBlockStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBlockStatement"):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = MySqlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3973
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.state = 3970
                self.uid()
                self.state = 3971
                self.match(MySqlParser.COLON_SYMB)


            self.state = 3975
            self.match(MySqlParser.BEGIN)
            self.state = 4013
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,570,self._ctx)
            if la_ == 1:
                self.state = 3981
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,565,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3976
                        self.declareVariable()
                        self.state = 3977
                        self.match(MySqlParser.SEMI) 
                    self.state = 3983
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,565,self._ctx)

                self.state = 3989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,566,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3984
                        self.declareCondition()
                        self.state = 3985
                        self.match(MySqlParser.SEMI) 
                    self.state = 3991
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,566,self._ctx)

                self.state = 3997
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,567,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3992
                        self.declareCursor()
                        self.state = 3993
                        self.match(MySqlParser.SEMI) 
                    self.state = 3999
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,567,self._ctx)

                self.state = 4005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.DECLARE:
                    self.state = 4000
                    self.declareHandler()
                    self.state = 4001
                    self.match(MySqlParser.SEMI)
                    self.state = 4007
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4009 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4008
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4011 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,569,self._ctx)



            self.state = 4015
            self.match(MySqlParser.END)
            self.state = 4017
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4016
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CaseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.CASE)
            else:
                return self.getToken(MySqlParser.CASE, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def caseAlternative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCaseStatement"):
                listener.enterCaseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCaseStatement"):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySqlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4019
            self.match(MySqlParser.CASE)
            self.state = 4022
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,572,self._ctx)
            if la_ == 1:
                self.state = 4020
                self.uid()

            elif la_ == 2:
                self.state = 4021
                self.expression(0)


            self.state = 4025 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4024
                self.caseAlternative()
                self.state = 4027 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.WHEN):
                    break

            self.state = 4035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4029
                self.match(MySqlParser.ELSE)
                self.state = 4031 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4030
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4033 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,574,self._ctx)



            self.state = 4037
            self.match(MySqlParser.END)
            self.state = 4038
            self.match(MySqlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IfStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.IF)
            else:
                return self.getToken(MySqlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def elifAlternative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_ifStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterIfStatement"):
                listener.enterIfStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfStatement"):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySqlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4040
            self.match(MySqlParser.IF)
            self.state = 4041
            self.expression(0)
            self.state = 4042
            self.match(MySqlParser.THEN)
            self.state = 4044 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4043
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.thenStatements.append(localctx._procedureSqlStatement)

                else:
                    raise NoViableAltException(self)
                self.state = 4046 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,576,self._ctx)

            self.state = 4051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.ELSEIF:
                self.state = 4048
                self.elifAlternative()
                self.state = 4053
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4060
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ELSE:
                self.state = 4054
                self.match(MySqlParser.ELSE)
                self.state = 4056 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4055
                        localctx._procedureSqlStatement = self.procedureSqlStatement()
                        localctx.elseStatements.append(localctx._procedureSqlStatement)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4058 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,578,self._ctx)



            self.state = 4062
            self.match(MySqlParser.END)
            self.state = 4063
            self.match(MySqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IterateStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(MySqlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_iterateStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterIterateStatement"):
                listener.enterIterateStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIterateStatement"):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySqlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4065
            self.match(MySqlParser.ITERATE)
            self.state = 4066
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LeaveStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(MySqlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_leaveStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterLeaveStatement"):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLeaveStatement"):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySqlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4068
            self.match(MySqlParser.LEAVE)
            self.state = 4069
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LoopStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LOOP)
            else:
                return self.getToken(MySqlParser.LOOP, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_loopStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterLoopStatement"):
                listener.enterLoopStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLoopStatement"):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = MySqlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4071
                self.uid()
                self.state = 4072
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4076
            self.match(MySqlParser.LOOP)
            self.state = 4078 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4077
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4080 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,581,self._ctx)

            self.state = 4082
            self.match(MySqlParser.END)
            self.state = 4083
            self.match(MySqlParser.LOOP)
            self.state = 4085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4084
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RepeatStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.REPEAT)
            else:
                return self.getToken(MySqlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_repeatStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterRepeatStatement"):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRepeatStatement"):
                listener.exitRepeatStatement(self)




    def repeatStatement(self):

        localctx = MySqlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4087
                self.uid()
                self.state = 4088
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4092
            self.match(MySqlParser.REPEAT)
            self.state = 4094 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4093
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4096 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,584,self._ctx)

            self.state = 4098
            self.match(MySqlParser.UNTIL)
            self.state = 4099
            self.expression(0)
            self.state = 4100
            self.match(MySqlParser.END)
            self.state = 4101
            self.match(MySqlParser.REPEAT)
            self.state = 4103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4102
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ReturnStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MySqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_returnStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterReturnStatement"):
                listener.enterReturnStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitReturnStatement"):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4105
            self.match(MySqlParser.RETURN)
            self.state = 4106
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.WhileStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.WHILE)
            else:
                return self.getToken(MySqlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_whileStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterWhileStatement"):
                listener.enterWhileStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWhileStatement"):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = MySqlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4111
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4108
                self.uid()
                self.state = 4109
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4113
            self.match(MySqlParser.WHILE)
            self.state = 4114
            self.expression(0)
            self.state = 4115
            self.match(MySqlParser.DO)
            self.state = 4117 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4116
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4119 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,587,self._ctx)

            self.state = 4121
            self.match(MySqlParser.END)
            self.state = 4122
            self.match(MySqlParser.WHILE)
            self.state = 4124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)) | (1 << (MySqlParser.QUARTER - 500)) | (1 << (MySqlParser.MONTH - 500)) | (1 << (MySqlParser.DAY - 500)) | (1 << (MySqlParser.HOUR - 500)) | (1 << (MySqlParser.MINUTE - 500)) | (1 << (MySqlParser.WEEK - 500)) | (1 << (MySqlParser.SECOND - 500)) | (1 << (MySqlParser.MICROSECOND - 500)) | (1 << (MySqlParser.TABLES - 500)) | (1 << (MySqlParser.ROUTINE - 500)) | (1 << (MySqlParser.EXECUTE - 500)) | (1 << (MySqlParser.FILE - 500)) | (1 << (MySqlParser.PROCESS - 500)) | (1 << (MySqlParser.RELOAD - 500)))) != 0) or ((((_la - 564)) & ~0x3f) == 0 and ((1 << (_la - 564)) & ((1 << (MySqlParser.SHUTDOWN - 564)) | (1 << (MySqlParser.SUPER - 564)) | (1 << (MySqlParser.PRIVILEGES - 564)) | (1 << (MySqlParser.ARMSCII8 - 564)) | (1 << (MySqlParser.ASCII - 564)) | (1 << (MySqlParser.BIG5 - 564)) | (1 << (MySqlParser.CP1250 - 564)) | (1 << (MySqlParser.CP1251 - 564)) | (1 << (MySqlParser.CP1256 - 564)) | (1 << (MySqlParser.CP1257 - 564)) | (1 << (MySqlParser.CP850 - 564)) | (1 << (MySqlParser.CP852 - 564)) | (1 << (MySqlParser.CP866 - 564)) | (1 << (MySqlParser.CP932 - 564)) | (1 << (MySqlParser.DEC8 - 564)) | (1 << (MySqlParser.EUCJPMS - 564)) | (1 << (MySqlParser.EUCKR - 564)) | (1 << (MySqlParser.GB2312 - 564)) | (1 << (MySqlParser.GBK - 564)) | (1 << (MySqlParser.GEOSTD8 - 564)) | (1 << (MySqlParser.GREEK - 564)) | (1 << (MySqlParser.HEBREW - 564)) | (1 << (MySqlParser.HP8 - 564)) | (1 << (MySqlParser.KEYBCS2 - 564)) | (1 << (MySqlParser.KOI8R - 564)) | (1 << (MySqlParser.KOI8U - 564)) | (1 << (MySqlParser.LATIN1 - 564)) | (1 << (MySqlParser.LATIN2 - 564)) | (1 << (MySqlParser.LATIN5 - 564)) | (1 << (MySqlParser.LATIN7 - 564)) | (1 << (MySqlParser.MACCE - 564)) | (1 << (MySqlParser.MACROMAN - 564)) | (1 << (MySqlParser.SJIS - 564)) | (1 << (MySqlParser.SWE7 - 564)) | (1 << (MySqlParser.TIS620 - 564)) | (1 << (MySqlParser.UCS2 - 564)) | (1 << (MySqlParser.UJIS - 564)) | (1 << (MySqlParser.UTF16 - 564)) | (1 << (MySqlParser.UTF16LE - 564)) | (1 << (MySqlParser.UTF32 - 564)) | (1 << (MySqlParser.UTF8 - 564)) | (1 << (MySqlParser.UTF8MB3 - 564)) | (1 << (MySqlParser.UTF8MB4 - 564)) | (1 << (MySqlParser.ARCHIVE - 564)) | (1 << (MySqlParser.BLACKHOLE - 564)) | (1 << (MySqlParser.CSV - 564)) | (1 << (MySqlParser.FEDERATED - 564)) | (1 << (MySqlParser.INNODB - 564)) | (1 << (MySqlParser.MEMORY - 564)) | (1 << (MySqlParser.MRG_MYISAM - 564)) | (1 << (MySqlParser.MYISAM - 564)) | (1 << (MySqlParser.NDB - 564)) | (1 << (MySqlParser.NDBCLUSTER - 564)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 564)) | (1 << (MySqlParser.REPEATABLE - 564)) | (1 << (MySqlParser.COMMITTED - 564)) | (1 << (MySqlParser.UNCOMMITTED - 564)) | (1 << (MySqlParser.SERIALIZABLE - 564)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 564)) | (1 << (MySqlParser.LINESTRING - 564)) | (1 << (MySqlParser.MULTILINESTRING - 564)) | (1 << (MySqlParser.MULTIPOINT - 564)) | (1 << (MySqlParser.MULTIPOLYGON - 564)) | (1 << (MySqlParser.POINT - 564)))) != 0) or ((((_la - 628)) & ~0x3f) == 0 and ((1 << (_la - 628)) & ((1 << (MySqlParser.POLYGON - 628)) | (1 << (MySqlParser.ABS - 628)) | (1 << (MySqlParser.ACOS - 628)) | (1 << (MySqlParser.ADDDATE - 628)) | (1 << (MySqlParser.ADDTIME - 628)) | (1 << (MySqlParser.AES_DECRYPT - 628)) | (1 << (MySqlParser.AES_ENCRYPT - 628)) | (1 << (MySqlParser.AREA - 628)) | (1 << (MySqlParser.ASBINARY - 628)) | (1 << (MySqlParser.ASIN - 628)) | (1 << (MySqlParser.ASTEXT - 628)) | (1 << (MySqlParser.ASWKB - 628)) | (1 << (MySqlParser.ASWKT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 628)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 628)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 628)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 628)) | (1 << (MySqlParser.ATAN - 628)) | (1 << (MySqlParser.ATAN2 - 628)) | (1 << (MySqlParser.BENCHMARK - 628)) | (1 << (MySqlParser.BIN - 628)) | (1 << (MySqlParser.BIT_COUNT - 628)) | (1 << (MySqlParser.BIT_LENGTH - 628)) | (1 << (MySqlParser.BUFFER - 628)) | (1 << (MySqlParser.CEIL - 628)) | (1 << (MySqlParser.CEILING - 628)) | (1 << (MySqlParser.CENTROID - 628)) | (1 << (MySqlParser.CHARACTER_LENGTH - 628)) | (1 << (MySqlParser.CHARSET - 628)) | (1 << (MySqlParser.CHAR_LENGTH - 628)) | (1 << (MySqlParser.COERCIBILITY - 628)) | (1 << (MySqlParser.COLLATION - 628)) | (1 << (MySqlParser.COMPRESS - 628)) | (1 << (MySqlParser.CONCAT - 628)) | (1 << (MySqlParser.CONCAT_WS - 628)) | (1 << (MySqlParser.CONNECTION_ID - 628)) | (1 << (MySqlParser.CONV - 628)) | (1 << (MySqlParser.CONVERT_TZ - 628)) | (1 << (MySqlParser.COS - 628)) | (1 << (MySqlParser.COT - 628)) | (1 << (MySqlParser.CRC32 - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 628)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 628)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 628)) | (1 << (MySqlParser.CREATE_DIGEST - 628)) | (1 << (MySqlParser.CROSSES - 628)) | (1 << (MySqlParser.DATEDIFF - 628)) | (1 << (MySqlParser.DATE_FORMAT - 628)) | (1 << (MySqlParser.DAYNAME - 628)) | (1 << (MySqlParser.DAYOFMONTH - 628)) | (1 << (MySqlParser.DAYOFWEEK - 628)) | (1 << (MySqlParser.DAYOFYEAR - 628)) | (1 << (MySqlParser.DECODE - 628)) | (1 << (MySqlParser.DEGREES - 628)) | (1 << (MySqlParser.DES_DECRYPT - 628)) | (1 << (MySqlParser.DES_ENCRYPT - 628)) | (1 << (MySqlParser.DIMENSION - 628)) | (1 << (MySqlParser.DISJOINT - 628)) | (1 << (MySqlParser.ELT - 628)) | (1 << (MySqlParser.ENCODE - 628)) | (1 << (MySqlParser.ENCRYPT - 628)) | (1 << (MySqlParser.ENDPOINT - 628)) | (1 << (MySqlParser.ENVELOPE - 628)))) != 0) or ((((_la - 692)) & ~0x3f) == 0 and ((1 << (_la - 692)) & ((1 << (MySqlParser.EQUALS - 692)) | (1 << (MySqlParser.EXP - 692)) | (1 << (MySqlParser.EXPORT_SET - 692)) | (1 << (MySqlParser.EXTERIORRING - 692)) | (1 << (MySqlParser.EXTRACTVALUE - 692)) | (1 << (MySqlParser.FIELD - 692)) | (1 << (MySqlParser.FIND_IN_SET - 692)) | (1 << (MySqlParser.FLOOR - 692)) | (1 << (MySqlParser.FORMAT - 692)) | (1 << (MySqlParser.FOUND_ROWS - 692)) | (1 << (MySqlParser.FROM_BASE64 - 692)) | (1 << (MySqlParser.FROM_DAYS - 692)) | (1 << (MySqlParser.FROM_UNIXTIME - 692)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 692)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 692)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 692)) | (1 << (MySqlParser.GEOMETRYN - 692)) | (1 << (MySqlParser.GEOMETRYTYPE - 692)) | (1 << (MySqlParser.GEOMFROMTEXT - 692)) | (1 << (MySqlParser.GEOMFROMWKB - 692)) | (1 << (MySqlParser.GET_FORMAT - 692)) | (1 << (MySqlParser.GET_LOCK - 692)) | (1 << (MySqlParser.GLENGTH - 692)) | (1 << (MySqlParser.GREATEST - 692)) | (1 << (MySqlParser.GTID_SUBSET - 692)) | (1 << (MySqlParser.GTID_SUBTRACT - 692)) | (1 << (MySqlParser.HEX - 692)) | (1 << (MySqlParser.IFNULL - 692)) | (1 << (MySqlParser.INET6_ATON - 692)) | (1 << (MySqlParser.INET6_NTOA - 692)) | (1 << (MySqlParser.INET_ATON - 692)) | (1 << (MySqlParser.INET_NTOA - 692)) | (1 << (MySqlParser.INSTR - 692)) | (1 << (MySqlParser.INTERIORRINGN - 692)) | (1 << (MySqlParser.INTERSECTS - 692)) | (1 << (MySqlParser.ISCLOSED - 692)) | (1 << (MySqlParser.ISEMPTY - 692)) | (1 << (MySqlParser.ISNULL - 692)) | (1 << (MySqlParser.ISSIMPLE - 692)) | (1 << (MySqlParser.IS_FREE_LOCK - 692)) | (1 << (MySqlParser.IS_IPV4 - 692)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 692)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 692)) | (1 << (MySqlParser.IS_IPV6 - 692)) | (1 << (MySqlParser.IS_USED_LOCK - 692)) | (1 << (MySqlParser.LAST_INSERT_ID - 692)) | (1 << (MySqlParser.LCASE - 692)) | (1 << (MySqlParser.LEAST - 692)) | (1 << (MySqlParser.LENGTH - 692)) | (1 << (MySqlParser.LINEFROMTEXT - 692)) | (1 << (MySqlParser.LINEFROMWKB - 692)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 692)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 692)) | (1 << (MySqlParser.LN - 692)) | (1 << (MySqlParser.LOAD_FILE - 692)) | (1 << (MySqlParser.LOCATE - 692)) | (1 << (MySqlParser.LOG - 692)) | (1 << (MySqlParser.LOG10 - 692)) | (1 << (MySqlParser.LOG2 - 692)) | (1 << (MySqlParser.LOWER - 692)) | (1 << (MySqlParser.LPAD - 692)))) != 0) or ((((_la - 756)) & ~0x3f) == 0 and ((1 << (_la - 756)) & ((1 << (MySqlParser.LTRIM - 756)) | (1 << (MySqlParser.MAKEDATE - 756)) | (1 << (MySqlParser.MAKETIME - 756)) | (1 << (MySqlParser.MAKE_SET - 756)) | (1 << (MySqlParser.MASTER_POS_WAIT - 756)) | (1 << (MySqlParser.MBRCONTAINS - 756)) | (1 << (MySqlParser.MBRDISJOINT - 756)) | (1 << (MySqlParser.MBREQUAL - 756)) | (1 << (MySqlParser.MBRINTERSECTS - 756)) | (1 << (MySqlParser.MBROVERLAPS - 756)) | (1 << (MySqlParser.MBRTOUCHES - 756)) | (1 << (MySqlParser.MBRWITHIN - 756)) | (1 << (MySqlParser.MD5 - 756)) | (1 << (MySqlParser.MLINEFROMTEXT - 756)) | (1 << (MySqlParser.MLINEFROMWKB - 756)) | (1 << (MySqlParser.MONTHNAME - 756)) | (1 << (MySqlParser.MPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MPOINTFROMWKB - 756)) | (1 << (MySqlParser.MPOLYFROMTEXT - 756)) | (1 << (MySqlParser.MPOLYFROMWKB - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 756)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 756)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 756)) | (1 << (MySqlParser.NAME_CONST - 756)) | (1 << (MySqlParser.NULLIF - 756)) | (1 << (MySqlParser.NUMGEOMETRIES - 756)) | (1 << (MySqlParser.NUMINTERIORRINGS - 756)) | (1 << (MySqlParser.NUMPOINTS - 756)) | (1 << (MySqlParser.OCT - 756)) | (1 << (MySqlParser.OCTET_LENGTH - 756)) | (1 << (MySqlParser.ORD - 756)) | (1 << (MySqlParser.OVERLAPS - 756)) | (1 << (MySqlParser.PERIOD_ADD - 756)) | (1 << (MySqlParser.PERIOD_DIFF - 756)) | (1 << (MySqlParser.PI - 756)) | (1 << (MySqlParser.POINTFROMTEXT - 756)) | (1 << (MySqlParser.POINTFROMWKB - 756)) | (1 << (MySqlParser.POINTN - 756)) | (1 << (MySqlParser.POLYFROMTEXT - 756)) | (1 << (MySqlParser.POLYFROMWKB - 756)) | (1 << (MySqlParser.POLYGONFROMTEXT - 756)) | (1 << (MySqlParser.POLYGONFROMWKB - 756)) | (1 << (MySqlParser.POW - 756)) | (1 << (MySqlParser.POWER - 756)) | (1 << (MySqlParser.QUOTE - 756)) | (1 << (MySqlParser.RADIANS - 756)) | (1 << (MySqlParser.RAND - 756)) | (1 << (MySqlParser.RANDOM_BYTES - 756)) | (1 << (MySqlParser.RELEASE_LOCK - 756)) | (1 << (MySqlParser.REVERSE - 756)) | (1 << (MySqlParser.ROUND - 756)) | (1 << (MySqlParser.ROW_COUNT - 756)) | (1 << (MySqlParser.RPAD - 756)) | (1 << (MySqlParser.RTRIM - 756)) | (1 << (MySqlParser.SEC_TO_TIME - 756)) | (1 << (MySqlParser.SESSION_USER - 756)) | (1 << (MySqlParser.SHA - 756)) | (1 << (MySqlParser.SHA1 - 756)) | (1 << (MySqlParser.SHA2 - 756)) | (1 << (MySqlParser.SIGN - 756)) | (1 << (MySqlParser.SIN - 756)))) != 0) or ((((_la - 820)) & ~0x3f) == 0 and ((1 << (_la - 820)) & ((1 << (MySqlParser.SLEEP - 820)) | (1 << (MySqlParser.SOUNDEX - 820)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 820)) | (1 << (MySqlParser.SQRT - 820)) | (1 << (MySqlParser.SRID - 820)) | (1 << (MySqlParser.STARTPOINT - 820)) | (1 << (MySqlParser.STRCMP - 820)) | (1 << (MySqlParser.STR_TO_DATE - 820)) | (1 << (MySqlParser.ST_AREA - 820)) | (1 << (MySqlParser.ST_ASBINARY - 820)) | (1 << (MySqlParser.ST_ASTEXT - 820)) | (1 << (MySqlParser.ST_ASWKB - 820)) | (1 << (MySqlParser.ST_ASWKT - 820)) | (1 << (MySqlParser.ST_BUFFER - 820)) | (1 << (MySqlParser.ST_CENTROID - 820)) | (1 << (MySqlParser.ST_CONTAINS - 820)) | (1 << (MySqlParser.ST_CROSSES - 820)) | (1 << (MySqlParser.ST_DIFFERENCE - 820)) | (1 << (MySqlParser.ST_DIMENSION - 820)) | (1 << (MySqlParser.ST_DISJOINT - 820)) | (1 << (MySqlParser.ST_DISTANCE - 820)) | (1 << (MySqlParser.ST_ENDPOINT - 820)) | (1 << (MySqlParser.ST_ENVELOPE - 820)) | (1 << (MySqlParser.ST_EQUALS - 820)) | (1 << (MySqlParser.ST_EXTERIORRING - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 820)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 820)) | (1 << (MySqlParser.ST_GEOMETRYN - 820)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 820)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 820)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 820)) | (1 << (MySqlParser.ST_INTERIORRINGN - 820)) | (1 << (MySqlParser.ST_INTERSECTION - 820)) | (1 << (MySqlParser.ST_INTERSECTS - 820)) | (1 << (MySqlParser.ST_ISCLOSED - 820)) | (1 << (MySqlParser.ST_ISEMPTY - 820)) | (1 << (MySqlParser.ST_ISSIMPLE - 820)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINEFROMWKB - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 820)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 820)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 820)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 820)) | (1 << (MySqlParser.ST_NUMPOINTS - 820)) | (1 << (MySqlParser.ST_OVERLAPS - 820)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 820)) | (1 << (MySqlParser.ST_POINTFROMWKB - 820)) | (1 << (MySqlParser.ST_POINTN - 820)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYFROMWKB - 820)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 820)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 820)) | (1 << (MySqlParser.ST_SRID - 820)) | (1 << (MySqlParser.ST_STARTPOINT - 820)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 820)) | (1 << (MySqlParser.ST_TOUCHES - 820)) | (1 << (MySqlParser.ST_UNION - 820)) | (1 << (MySqlParser.ST_WITHIN - 820)))) != 0) or ((((_la - 884)) & ~0x3f) == 0 and ((1 << (_la - 884)) & ((1 << (MySqlParser.ST_X - 884)) | (1 << (MySqlParser.ST_Y - 884)) | (1 << (MySqlParser.SUBDATE - 884)) | (1 << (MySqlParser.SUBSTRING_INDEX - 884)) | (1 << (MySqlParser.SUBTIME - 884)) | (1 << (MySqlParser.SYSTEM_USER - 884)) | (1 << (MySqlParser.TAN - 884)) | (1 << (MySqlParser.TIMEDIFF - 884)) | (1 << (MySqlParser.TIMESTAMPADD - 884)) | (1 << (MySqlParser.TIMESTAMPDIFF - 884)) | (1 << (MySqlParser.TIME_FORMAT - 884)) | (1 << (MySqlParser.TIME_TO_SEC - 884)) | (1 << (MySqlParser.TOUCHES - 884)) | (1 << (MySqlParser.TO_BASE64 - 884)) | (1 << (MySqlParser.TO_DAYS - 884)) | (1 << (MySqlParser.TO_SECONDS - 884)) | (1 << (MySqlParser.UCASE - 884)) | (1 << (MySqlParser.UNCOMPRESS - 884)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 884)) | (1 << (MySqlParser.UNHEX - 884)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 884)) | (1 << (MySqlParser.UPDATEXML - 884)) | (1 << (MySqlParser.UPPER - 884)) | (1 << (MySqlParser.UUID - 884)) | (1 << (MySqlParser.UUID_SHORT - 884)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 884)) | (1 << (MySqlParser.VERSION - 884)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 884)) | (1 << (MySqlParser.WEEKDAY - 884)) | (1 << (MySqlParser.WEEKOFYEAR - 884)) | (1 << (MySqlParser.WEIGHT_STRING - 884)) | (1 << (MySqlParser.WITHIN - 884)) | (1 << (MySqlParser.YEARWEEK - 884)) | (1 << (MySqlParser.Y_FUNCTION - 884)) | (1 << (MySqlParser.X_FUNCTION - 884)))) != 0) or ((((_la - 957)) & ~0x3f) == 0 and ((1 << (_la - 957)) & ((1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 957)) | (1 << (MySqlParser.STRING_LITERAL - 957)) | (1 << (MySqlParser.ID - 957)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 957)))) != 0):
                self.state = 4123
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CursorStatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx):
            super(MySqlParser.CursorStatementContext, self).copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CursorStatementContext)
            super(MySqlParser.CloseCursorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCloseCursor"):
                listener.enterCloseCursor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCloseCursor"):
                listener.exitCloseCursor(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CursorStatementContext)
            super(MySqlParser.OpenCursorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterOpenCursor"):
                listener.enterOpenCursor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOpenCursor"):
                listener.exitOpenCursor(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CursorStatementContext)
            super(MySqlParser.FetchCursorContext, self).__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MySqlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterFetchCursor"):
                listener.enterFetchCursor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFetchCursor"):
                listener.exitFetchCursor(self)



    def cursorStatement(self):

        localctx = MySqlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4141
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CLOSE]:
                localctx = MySqlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4126
                self.match(MySqlParser.CLOSE)
                self.state = 4127
                self.uid()
                pass
            elif token in [MySqlParser.FETCH]:
                localctx = MySqlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4128
                self.match(MySqlParser.FETCH)
                self.state = 4133
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,590,self._ctx)
                if la_ == 1:
                    self.state = 4130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.NEXT:
                        self.state = 4129
                        self.match(MySqlParser.NEXT)


                    self.state = 4132
                    self.match(MySqlParser.FROM)


                self.state = 4135
                self.uid()
                self.state = 4136
                self.match(MySqlParser.INTO)
                self.state = 4137
                self.uidList()
                pass
            elif token in [MySqlParser.OPEN]:
                localctx = MySqlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4139
                self.match(MySqlParser.OPEN)
                self.state = 4140
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeclareVariableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareVariable

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclareVariable"):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclareVariable"):
                listener.exitDeclareVariable(self)




    def declareVariable(self):

        localctx = MySqlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4143
            self.match(MySqlParser.DECLARE)
            self.state = 4144
            self.uidList()
            self.state = 4145
            self.dataType()
            self.state = 4148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.DEFAULT:
                self.state = 4146
                self.match(MySqlParser.DEFAULT)
                self.state = 4147
                self.defaultValue()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeclareConditionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareCondition

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclareCondition"):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclareCondition"):
                listener.exitDeclareCondition(self)




    def declareCondition(self):

        localctx = MySqlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4150
            self.match(MySqlParser.DECLARE)
            self.state = 4151
            self.uid()
            self.state = 4152
            self.match(MySqlParser.CONDITION)
            self.state = 4153
            self.match(MySqlParser.FOR)
            self.state = 4160
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.state = 4154
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                self.state = 4155
                self.match(MySqlParser.SQLSTATE)
                self.state = 4157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4156
                    self.match(MySqlParser.VALUE)


                self.state = 4159
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeclareCursorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(MySqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareCursor

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclareCursor"):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclareCursor"):
                listener.exitDeclareCursor(self)




    def declareCursor(self):

        localctx = MySqlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4162
            self.match(MySqlParser.DECLARE)
            self.state = 4163
            self.uid()
            self.state = 4164
            self.match(MySqlParser.CURSOR)
            self.state = 4165
            self.match(MySqlParser.FOR)
            self.state = 4166
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DeclareHandlerContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def handlerConditionValue(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(MySqlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(MySqlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(MySqlParser.UNDO, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareHandler

        def enterRule(self, listener):
            if hasattr(listener, "enterDeclareHandler"):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDeclareHandler"):
                listener.exitDeclareHandler(self)




    def declareHandler(self):

        localctx = MySqlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4168
            self.match(MySqlParser.DECLARE)
            self.state = 4169
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.CONTINUE or _la==MySqlParser.EXIT or _la==MySqlParser.UNDO):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4170
            self.match(MySqlParser.HANDLER)
            self.state = 4171
            self.match(MySqlParser.FOR)
            self.state = 4172
            self.handlerConditionValue()
            self.state = 4177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4173
                self.match(MySqlParser.COMMA)
                self.state = 4174
                self.handlerConditionValue()
                self.state = 4179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4180
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HandlerConditionValueContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx):
            super(MySqlParser.HandlerConditionValueContext, self).copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionWarningContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(MySqlParser.SQLWARNING, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionWarning"):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionWarning"):
                listener.exitHandlerConditionWarning(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionCodeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionCode"):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionCode"):
                listener.exitHandlerConditionCode(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionNotfoundContext, self).__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionNotfound"):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionNotfound"):
                listener.exitHandlerConditionNotfound(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionStateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionState"):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionState"):
                listener.exitHandlerConditionState(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionExceptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(MySqlParser.SQLEXCEPTION, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionException"):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionException"):
                listener.exitHandlerConditionException(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.HandlerConditionValueContext)
            super(MySqlParser.HandlerConditionNameContext, self).__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterHandlerConditionName"):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHandlerConditionName"):
                listener.exitHandlerConditionName(self)



    def handlerConditionValue(self):

        localctx = MySqlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4193
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                localctx = MySqlParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4182
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.SQLSTATE]:
                localctx = MySqlParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4183
                self.match(MySqlParser.SQLSTATE)
                self.state = 4185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.VALUE:
                    self.state = 4184
                    self.match(MySqlParser.VALUE)


                self.state = 4187
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                localctx = MySqlParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4188
                self.uid()
                pass
            elif token in [MySqlParser.SQLWARNING]:
                localctx = MySqlParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4189
                self.match(MySqlParser.SQLWARNING)
                pass
            elif token in [MySqlParser.NOT]:
                localctx = MySqlParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4190
                self.match(MySqlParser.NOT)
                self.state = 4191
                self.match(MySqlParser.FOUND)
                pass
            elif token in [MySqlParser.SQLEXCEPTION]:
                localctx = MySqlParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4192
                self.match(MySqlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ProcedureSqlStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySqlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_procedureSqlStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterProcedureSqlStatement"):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitProcedureSqlStatement"):
                listener.exitProcedureSqlStatement(self)




    def procedureSqlStatement(self):

        localctx = MySqlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4197
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,598,self._ctx)
            if la_ == 1:
                self.state = 4195
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4196
                self.sqlStatement()
                pass


            self.state = 4199
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CaseAlternativeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseAlternative

        def enterRule(self, listener):
            if hasattr(listener, "enterCaseAlternative"):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCaseAlternative"):
                listener.exitCaseAlternative(self)




    def caseAlternative(self):

        localctx = MySqlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4201
            self.match(MySqlParser.WHEN)
            self.state = 4204
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,599,self._ctx)
            if la_ == 1:
                self.state = 4202
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4203
                self.expression(0)
                pass


            self.state = 4206
            self.match(MySqlParser.THEN)
            self.state = 4208 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4207
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4210 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,600,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ElifAlternativeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(MySqlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def procedureSqlStatement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_elifAlternative

        def enterRule(self, listener):
            if hasattr(listener, "enterElifAlternative"):
                listener.enterElifAlternative(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitElifAlternative"):
                listener.exitElifAlternative(self)




    def elifAlternative(self):

        localctx = MySqlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_elifAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4212
            self.match(MySqlParser.ELSEIF)
            self.state = 4213
            self.expression(0)
            self.state = 4214
            self.match(MySqlParser.THEN)
            self.state = 4216 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4215
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4218 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,601,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AlterUserContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterUser

     
        def copyFrom(self, ctx):
            super(MySqlParser.AlterUserContext, self).copyFrom(ctx)



    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterUserContext)
            super(MySqlParser.AlterUserMysqlV56Context, self).__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userSpecification(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserSpecificationContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterUserMysqlV56"):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterUserMysqlV56"):
                listener.exitAlterUserMysqlV56(self)


    class AlterUserMysqlV57Context(AlterUserContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.AlterUserContext)
            super(MySqlParser.AlterUserMysqlV57Context, self).__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterAlterUserMysqlV57"):
                listener.enterAlterUserMysqlV57(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAlterUserMysqlV57"):
                listener.exitAlterUserMysqlV57(self)



    def alterUser(self):

        localctx = MySqlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,613,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4220
                self.match(MySqlParser.ALTER)
                self.state = 4221
                self.match(MySqlParser.USER)
                self.state = 4222
                self.userSpecification()
                self.state = 4227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4223
                    self.match(MySqlParser.COMMA)
                    self.state = 4224
                    self.userSpecification()
                    self.state = 4229
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4230
                self.match(MySqlParser.ALTER)
                self.state = 4231
                self.match(MySqlParser.USER)
                self.state = 4233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4232
                    self.ifExists()


                self.state = 4235
                self.userAuthOption()
                self.state = 4240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4236
                    self.match(MySqlParser.COMMA)
                    self.state = 4237
                    self.userAuthOption()
                    self.state = 4242
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4243
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4255
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4244
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4245
                        self.tlsOption()
                        self.state = 4252
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4247
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4246
                                self.match(MySqlParser.AND)


                            self.state = 4249
                            self.tlsOption()
                            self.state = 4254
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4259
                    self.match(MySqlParser.WITH)
                    self.state = 4261 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4260
                        self.userResourceOption()
                        self.state = 4263 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 392)))) != 0)):
                            break



                self.state = 4271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4269
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4267
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4268
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4273
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateUserContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createUser

     
        def copyFrom(self, ctx):
            super(MySqlParser.CreateUserContext, self).copyFrom(ctx)



    class CreateUserMysqlV57Context(CreateUserContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateUserContext)
            super(MySqlParser.CreateUserMysqlV57Context, self).__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def tlsOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateUserMysqlV57"):
                listener.enterCreateUserMysqlV57(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateUserMysqlV57"):
                listener.exitCreateUserMysqlV57(self)


    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.CreateUserContext)
            super(MySqlParser.CreateUserMysqlV56Context, self).__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateUserMysqlV56"):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateUserMysqlV56"):
                listener.exitCreateUserMysqlV56(self)



    def createUser(self):

        localctx = MySqlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4330
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,625,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4276
                self.match(MySqlParser.CREATE)
                self.state = 4277
                self.match(MySqlParser.USER)
                self.state = 4278
                self.userAuthOption()
                self.state = 4283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4279
                    self.match(MySqlParser.COMMA)
                    self.state = 4280
                    self.userAuthOption()
                    self.state = 4285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.CreateUserMysqlV57Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4286
                self.match(MySqlParser.CREATE)
                self.state = 4287
                self.match(MySqlParser.USER)
                self.state = 4289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4288
                    self.ifNotExists()


                self.state = 4291
                self.userAuthOption()
                self.state = 4296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4292
                    self.match(MySqlParser.COMMA)
                    self.state = 4293
                    self.userAuthOption()
                    self.state = 4298
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.REQUIRE:
                    self.state = 4299
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4311
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.NONE]:
                        self.state = 4300
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                        self.state = 4301
                        self.tlsOption()
                        self.state = 4308
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                            self.state = 4303
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==MySqlParser.AND:
                                self.state = 4302
                                self.match(MySqlParser.AND)


                            self.state = 4305
                            self.tlsOption()
                            self.state = 4310
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4315
                    self.match(MySqlParser.WITH)
                    self.state = 4317 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4316
                        self.userResourceOption()
                        self.state = 4319 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 392)))) != 0)):
                            break



                self.state = 4327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.ACCOUNT or _la==MySqlParser.PASSWORD:
                    self.state = 4325
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.PASSWORD]:
                        self.state = 4323
                        self.userPasswordOption()
                        pass
                    elif token in [MySqlParser.ACCOUNT]:
                        self.state = 4324
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4329
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DropUserContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropUser

        def enterRule(self, listener):
            if hasattr(listener, "enterDropUser"):
                listener.enterDropUser(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDropUser"):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySqlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4332
            self.match(MySqlParser.DROP)
            self.state = 4333
            self.match(MySqlParser.USER)
            self.state = 4335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IF:
                self.state = 4334
                self.ifExists()


            self.state = 4337
            self.userName()
            self.state = 4342
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4338
                self.match(MySqlParser.COMMA)
                self.state = 4339
                self.userName()
                self.state = 4344
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.GrantStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def privelegeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userAuthOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def tlsOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def OPTION(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.OPTION)
            else:
                return self.getToken(MySqlParser.OPTION, i)

        def userResourceOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)


        def AND(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterGrantStatement"):
                listener.enterGrantStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGrantStatement"):
                listener.exitGrantStatement(self)




    def grantStatement(self):

        localctx = MySqlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4345
            self.match(MySqlParser.GRANT)
            self.state = 4346
            self.privelegeClause()
            self.state = 4351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4347
                self.match(MySqlParser.COMMA)
                self.state = 4348
                self.privelegeClause()
                self.state = 4353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4354
            self.match(MySqlParser.ON)
            self.state = 4356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,629,self._ctx)
            if la_ == 1:
                self.state = 4355
                localctx.privilegeObject = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                    localctx.privilegeObject = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4358
            self.privilegeLevel()
            self.state = 4359
            self.match(MySqlParser.TO)
            self.state = 4360
            self.userAuthOption()
            self.state = 4365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4361
                self.match(MySqlParser.COMMA)
                self.state = 4362
                self.userAuthOption()
                self.state = 4367
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4382
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.REQUIRE:
                self.state = 4368
                self.match(MySqlParser.REQUIRE)
                self.state = 4380
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.NONE]:
                    self.state = 4369
                    localctx.tlsNone = self.match(MySqlParser.NONE)
                    pass
                elif token in [MySqlParser.SSL, MySqlParser.CIPHER, MySqlParser.ISSUER, MySqlParser.SUBJECT, MySqlParser.X509]:
                    self.state = 4370
                    self.tlsOption()
                    self.state = 4377
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.AND or _la==MySqlParser.SSL or _la==MySqlParser.CIPHER or _la==MySqlParser.ISSUER or _la==MySqlParser.SUBJECT or _la==MySqlParser.X509:
                        self.state = 4372
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.AND:
                            self.state = 4371
                            self.match(MySqlParser.AND)


                        self.state = 4374
                        self.tlsOption()
                        self.state = 4379
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 4393
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 4384
                self.match(MySqlParser.WITH)
                self.state = 4390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.GRANT or ((((_la - 392)) & ~0x3f) == 0 and ((1 << (_la - 392)) & ((1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 392)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 392)))) != 0):
                    self.state = 4388
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [MySqlParser.GRANT]:
                        self.state = 4385
                        self.match(MySqlParser.GRANT)
                        self.state = 4386
                        self.match(MySqlParser.OPTION)
                        pass
                    elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS]:
                        self.state = 4387
                        self.userResourceOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4392
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.GrantProxyContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantProxy

        def enterRule(self, listener):
            if hasattr(listener, "enterGrantProxy"):
                listener.enterGrantProxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGrantProxy"):
                listener.exitGrantProxy(self)




    def grantProxy(self):

        localctx = MySqlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4395
            self.match(MySqlParser.GRANT)
            self.state = 4396
            self.match(MySqlParser.PROXY)
            self.state = 4397
            self.match(MySqlParser.ON)
            self.state = 4398
            localctx.fromFirst = self.userName()
            self.state = 4399
            self.match(MySqlParser.TO)
            self.state = 4400
            localctx.toFirst = self.userName()
            self.state = 4405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4401
                self.match(MySqlParser.COMMA)
                self.state = 4402
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 4407
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.WITH:
                self.state = 4408
                self.match(MySqlParser.WITH)
                self.state = 4409
                self.match(MySqlParser.GRANT)
                self.state = 4410
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RenameUserContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def renameUserClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameUserClauseContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameUser

        def enterRule(self, listener):
            if hasattr(listener, "enterRenameUser"):
                listener.enterRenameUser(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRenameUser"):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySqlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4413
            self.match(MySqlParser.RENAME)
            self.state = 4414
            self.match(MySqlParser.USER)
            self.state = 4415
            self.renameUserClause()
            self.state = 4420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4416
                self.match(MySqlParser.COMMA)
                self.state = 4417
                self.renameUserClause()
                self.state = 4422
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RevokeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx):
            super(MySqlParser.RevokeStatementContext, self).copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RevokeStatementContext)
            super(MySqlParser.DetailRevokeContext, self).__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def privelegeClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDetailRevoke"):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDetailRevoke"):
                listener.exitDetailRevoke(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.RevokeStatementContext)
            super(MySqlParser.ShortRevokeContext, self).__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShortRevoke"):
                listener.enterShortRevoke(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShortRevoke"):
                listener.exitShortRevoke(self)



    def revokeStatement(self):

        localctx = MySqlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 4463
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,646,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4423
                self.match(MySqlParser.REVOKE)
                self.state = 4424
                self.privelegeClause()
                self.state = 4429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4425
                    self.match(MySqlParser.COMMA)
                    self.state = 4426
                    self.privelegeClause()
                    self.state = 4431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4432
                self.match(MySqlParser.ON)
                self.state = 4434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,642,self._ctx)
                if la_ == 1:
                    self.state = 4433
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.TABLE or _la==MySqlParser.FUNCTION):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4436
                self.privilegeLevel()
                self.state = 4437
                self.match(MySqlParser.FROM)
                self.state = 4438
                self.userName()
                self.state = 4443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4439
                    self.match(MySqlParser.COMMA)
                    self.state = 4440
                    self.userName()
                    self.state = 4445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4446
                self.match(MySqlParser.REVOKE)
                self.state = 4447
                self.match(MySqlParser.ALL)
                self.state = 4449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 4448
                    self.match(MySqlParser.PRIVILEGES)


                self.state = 4451
                self.match(MySqlParser.COMMA)
                self.state = 4452
                self.match(MySqlParser.GRANT)
                self.state = 4453
                self.match(MySqlParser.OPTION)
                self.state = 4454
                self.match(MySqlParser.FROM)
                self.state = 4455
                self.userName()
                self.state = 4460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4456
                    self.match(MySqlParser.COMMA)
                    self.state = 4457
                    self.userName()
                    self.state = 4462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RevokeProxyContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_revokeProxy

        def enterRule(self, listener):
            if hasattr(listener, "enterRevokeProxy"):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRevokeProxy"):
                listener.exitRevokeProxy(self)




    def revokeProxy(self):

        localctx = MySqlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4465
            self.match(MySqlParser.REVOKE)
            self.state = 4466
            self.match(MySqlParser.PROXY)
            self.state = 4467
            self.match(MySqlParser.ON)
            self.state = 4468
            localctx.onUser = self.userName()
            self.state = 4469
            self.match(MySqlParser.FROM)
            self.state = 4470
            localctx.fromFirst = self.userName()
            self.state = 4475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4471
                self.match(MySqlParser.COMMA)
                self.state = 4472
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 4477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SetPasswordStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setPasswordStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSetPasswordStatement"):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetPasswordStatement"):
                listener.exitSetPasswordStatement(self)




    def setPasswordStatement(self):

        localctx = MySqlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4478
            self.match(MySqlParser.SET)
            self.state = 4479
            self.match(MySqlParser.PASSWORD)
            self.state = 4482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.FOR:
                self.state = 4480
                self.match(MySqlParser.FOR)
                self.state = 4481
                self.userName()


            self.state = 4484
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 4487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.OLD_PASSWORD, MySqlParser.PASSWORD]:
                self.state = 4485
                self.passwordFunctionClause()
                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.state = 4486
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserSpecificationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userSpecification

        def enterRule(self, listener):
            if hasattr(listener, "enterUserSpecification"):
                listener.enterUserSpecification(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserSpecification"):
                listener.exitUserSpecification(self)




    def userSpecification(self):

        localctx = MySqlParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4489
            self.userName()
            self.state = 4490
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserAuthOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.UserAuthOptionContext, self).copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UserAuthOptionContext)
            super(MySqlParser.SimpleAuthOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleAuthOption"):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleAuthOption"):
                listener.exitSimpleAuthOption(self)


    class PasswordAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UserAuthOptionContext)
            super(MySqlParser.PasswordAuthOptionContext, self).__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterPasswordAuthOption"):
                listener.enterPasswordAuthOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPasswordAuthOption"):
                listener.exitPasswordAuthOption(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UserAuthOptionContext)
            super(MySqlParser.StringAuthOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterStringAuthOption"):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringAuthOption"):
                listener.exitStringAuthOption(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.UserAuthOptionContext)
            super(MySqlParser.HashAuthOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterHashAuthOption"):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHashAuthOption"):
                listener.exitHashAuthOption(self)



    def userAuthOption(self):

        localctx = MySqlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 4516
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,652,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PasswordAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4492
                self.userName()
                self.state = 4493
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4494
                self.match(MySqlParser.BY)
                self.state = 4495
                self.match(MySqlParser.PASSWORD)
                self.state = 4496
                localctx.hashed = self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = MySqlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4498
                self.userName()
                self.state = 4499
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WITH:
                    self.state = 4500
                    self.match(MySqlParser.WITH)
                    self.state = 4501
                    self.authPlugin()


                self.state = 4504
                self.match(MySqlParser.BY)
                self.state = 4505
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4507
                self.userName()
                self.state = 4508
                self.match(MySqlParser.IDENTIFIED)
                self.state = 4509
                self.match(MySqlParser.WITH)
                self.state = 4510
                self.authPlugin()
                self.state = 4513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 4511
                    self.match(MySqlParser.AS)
                    self.state = 4512
                    self.match(MySqlParser.STRING_LITERAL)


                pass

            elif la_ == 4:
                localctx = MySqlParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4515
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TlsOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(MySqlParser.SSL, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tlsOption

        def enterRule(self, listener):
            if hasattr(listener, "enterTlsOption"):
                listener.enterTlsOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTlsOption"):
                listener.exitTlsOption(self)




    def tlsOption(self):

        localctx = MySqlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_tlsOption)
        try:
            self.state = 4526
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.SSL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4518
                self.match(MySqlParser.SSL)
                pass
            elif token in [MySqlParser.X509]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4519
                self.match(MySqlParser.X509)
                pass
            elif token in [MySqlParser.CIPHER]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4520
                self.match(MySqlParser.CIPHER)
                self.state = 4521
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.ISSUER]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4522
                self.match(MySqlParser.ISSUER)
                self.state = 4523
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.SUBJECT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4524
                self.match(MySqlParser.SUBJECT)
                self.state = 4525
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserResourceOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userResourceOption

        def enterRule(self, listener):
            if hasattr(listener, "enterUserResourceOption"):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserResourceOption"):
                listener.exitUserResourceOption(self)




    def userResourceOption(self):

        localctx = MySqlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_userResourceOption)
        try:
            self.state = 4536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.MAX_QUERIES_PER_HOUR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4528
                self.match(MySqlParser.MAX_QUERIES_PER_HOUR)
                self.state = 4529
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_UPDATES_PER_HOUR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4530
                self.match(MySqlParser.MAX_UPDATES_PER_HOUR)
                self.state = 4531
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_CONNECTIONS_PER_HOUR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4532
                self.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 4533
                self.decimalLiteral()
                pass
            elif token in [MySqlParser.MAX_USER_CONNECTIONS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4534
                self.match(MySqlParser.MAX_USER_CONNECTIONS)
                self.state = 4535
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserPasswordOptionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userPasswordOption

        def enterRule(self, listener):
            if hasattr(listener, "enterUserPasswordOption"):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserPasswordOption"):
                listener.exitUserPasswordOption(self)




    def userPasswordOption(self):

        localctx = MySqlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_userPasswordOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4538
            self.match(MySqlParser.PASSWORD)
            self.state = 4539
            self.match(MySqlParser.EXPIRE)
            self.state = 4546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DEFAULT]:
                self.state = 4540
                localctx.expireType = self.match(MySqlParser.DEFAULT)
                pass
            elif token in [MySqlParser.NEVER]:
                self.state = 4541
                localctx.expireType = self.match(MySqlParser.NEVER)
                pass
            elif token in [MySqlParser.INTERVAL]:
                self.state = 4542
                localctx.expireType = self.match(MySqlParser.INTERVAL)
                self.state = 4543
                self.decimalLiteral()
                self.state = 4544
                self.match(MySqlParser.DAY)
                pass
            elif token in [MySqlParser.EOF, MySqlParser.ACCOUNT, MySqlParser.PASSWORD, MySqlParser.MINUSMINUS, MySqlParser.COMMA, MySqlParser.SEMI]:
                pass
            else:
                pass
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserLockOptionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userLockOption

        def enterRule(self, listener):
            if hasattr(listener, "enterUserLockOption"):
                listener.enterUserLockOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserLockOption"):
                listener.exitUserLockOption(self)




    def userLockOption(self):

        localctx = MySqlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4548
            self.match(MySqlParser.ACCOUNT)
            self.state = 4549
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCK or _la==MySqlParser.UNLOCK):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PrivelegeClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privelegeClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPrivelegeClause"):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrivelegeClause"):
                listener.exitPrivelegeClause(self)




    def privelegeClause(self):

        localctx = MySqlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4551
            self.privilege()
            self.state = 4556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 4552
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4553
                self.uidList()
                self.state = 4554
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PrivilegeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(MySqlParser.USAGE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilege

        def enterRule(self, listener):
            if hasattr(listener, "enterPrivilege"):
                listener.enterPrivilege(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrivilege"):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = MySqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 4600
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4558
                self.match(MySqlParser.ALL)
                self.state = 4560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.PRIVILEGES:
                    self.state = 4559
                    self.match(MySqlParser.PRIVILEGES)


                pass
            elif token in [MySqlParser.ALTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4562
                self.match(MySqlParser.ALTER)
                self.state = 4564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ROUTINE:
                    self.state = 4563
                    self.match(MySqlParser.ROUTINE)


                pass
            elif token in [MySqlParser.CREATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4566
                self.match(MySqlParser.CREATE)
                self.state = 4573
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.TEMPORARY]:
                    self.state = 4567
                    self.match(MySqlParser.TEMPORARY)
                    self.state = 4568
                    self.match(MySqlParser.TABLES)
                    pass
                elif token in [MySqlParser.ROUTINE]:
                    self.state = 4569
                    self.match(MySqlParser.ROUTINE)
                    pass
                elif token in [MySqlParser.VIEW]:
                    self.state = 4570
                    self.match(MySqlParser.VIEW)
                    pass
                elif token in [MySqlParser.USER]:
                    self.state = 4571
                    self.match(MySqlParser.USER)
                    pass
                elif token in [MySqlParser.TABLESPACE]:
                    self.state = 4572
                    self.match(MySqlParser.TABLESPACE)
                    pass
                elif token in [MySqlParser.ON, MySqlParser.LR_BRACKET, MySqlParser.COMMA]:
                    pass
                else:
                    pass
                pass
            elif token in [MySqlParser.DELETE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4575
                self.match(MySqlParser.DELETE)
                pass
            elif token in [MySqlParser.DROP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4576
                self.match(MySqlParser.DROP)
                pass
            elif token in [MySqlParser.EVENT]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4577
                self.match(MySqlParser.EVENT)
                pass
            elif token in [MySqlParser.EXECUTE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4578
                self.match(MySqlParser.EXECUTE)
                pass
            elif token in [MySqlParser.FILE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4579
                self.match(MySqlParser.FILE)
                pass
            elif token in [MySqlParser.GRANT]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4580
                self.match(MySqlParser.GRANT)
                self.state = 4581
                self.match(MySqlParser.OPTION)
                pass
            elif token in [MySqlParser.INDEX]:
                self.enterOuterAlt(localctx, 10)
                self.state = 4582
                self.match(MySqlParser.INDEX)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 4583
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCK]:
                self.enterOuterAlt(localctx, 12)
                self.state = 4584
                self.match(MySqlParser.LOCK)
                self.state = 4585
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.PROCESS]:
                self.enterOuterAlt(localctx, 13)
                self.state = 4586
                self.match(MySqlParser.PROCESS)
                pass
            elif token in [MySqlParser.PROXY]:
                self.enterOuterAlt(localctx, 14)
                self.state = 4587
                self.match(MySqlParser.PROXY)
                pass
            elif token in [MySqlParser.REFERENCES]:
                self.enterOuterAlt(localctx, 15)
                self.state = 4588
                self.match(MySqlParser.REFERENCES)
                pass
            elif token in [MySqlParser.RELOAD]:
                self.enterOuterAlt(localctx, 16)
                self.state = 4589
                self.match(MySqlParser.RELOAD)
                pass
            elif token in [MySqlParser.REPLICATION]:
                self.enterOuterAlt(localctx, 17)
                self.state = 4590
                self.match(MySqlParser.REPLICATION)
                self.state = 4591
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CLIENT or _la==MySqlParser.SLAVE):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SELECT]:
                self.enterOuterAlt(localctx, 18)
                self.state = 4592
                self.match(MySqlParser.SELECT)
                pass
            elif token in [MySqlParser.SHOW]:
                self.enterOuterAlt(localctx, 19)
                self.state = 4593
                self.match(MySqlParser.SHOW)
                self.state = 4594
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASES or _la==MySqlParser.VIEW):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.SHUTDOWN]:
                self.enterOuterAlt(localctx, 20)
                self.state = 4595
                self.match(MySqlParser.SHUTDOWN)
                pass
            elif token in [MySqlParser.SUPER]:
                self.enterOuterAlt(localctx, 21)
                self.state = 4596
                self.match(MySqlParser.SUPER)
                pass
            elif token in [MySqlParser.TRIGGER]:
                self.enterOuterAlt(localctx, 22)
                self.state = 4597
                self.match(MySqlParser.TRIGGER)
                pass
            elif token in [MySqlParser.UPDATE]:
                self.enterOuterAlt(localctx, 23)
                self.state = 4598
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [MySqlParser.USAGE]:
                self.enterOuterAlt(localctx, 24)
                self.state = 4599
                self.match(MySqlParser.USAGE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PrivilegeLevelContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx):
            super(MySqlParser.PrivilegeLevelContext, self).copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PrivilegeLevelContext)
            super(MySqlParser.DefiniteSchemaPrivLevelContext, self).__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDefiniteSchemaPrivLevel"):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefiniteSchemaPrivLevel"):
                listener.exitDefiniteSchemaPrivLevel(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PrivilegeLevelContext)
            super(MySqlParser.DefiniteFullTablePrivLevelContext, self).__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDefiniteFullTablePrivLevel"):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefiniteFullTablePrivLevel"):
                listener.exitDefiniteFullTablePrivLevel(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PrivilegeLevelContext)
            super(MySqlParser.GlobalPrivLevelContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)
        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGlobalPrivLevel"):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGlobalPrivLevel"):
                listener.exitGlobalPrivLevel(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PrivilegeLevelContext)
            super(MySqlParser.DefiniteTablePrivLevelContext, self).__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterDefiniteTablePrivLevel"):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefiniteTablePrivLevel"):
                listener.exitDefiniteTablePrivLevel(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PrivilegeLevelContext)
            super(MySqlParser.CurrentSchemaPriviLevelContext, self).__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterCurrentSchemaPriviLevel"):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCurrentSchemaPriviLevel"):
                listener.exitCurrentSchemaPriviLevel(self)



    def privilegeLevel(self):

        localctx = MySqlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_privilegeLevel)
        try:
            self.state = 4615
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4602
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4603
                self.match(MySqlParser.STAR)
                self.state = 4604
                self.match(MySqlParser.DOT)
                self.state = 4605
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4606
                self.uid()
                self.state = 4607
                self.match(MySqlParser.DOT)
                self.state = 4608
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4610
                self.uid()
                self.state = 4611
                self.match(MySqlParser.DOT)
                self.state = 4612
                self.uid()
                pass

            elif la_ == 5:
                localctx = MySqlParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4614
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RenameUserClauseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_renameUserClause

        def enterRule(self, listener):
            if hasattr(listener, "enterRenameUserClause"):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRenameUserClause"):
                listener.exitRenameUserClause(self)




    def renameUserClause(self):

        localctx = MySqlParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4617
            localctx.fromFirst = self.userName()
            self.state = 4618
            self.match(MySqlParser.TO)
            self.state = 4619
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AnalyzeTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_analyzeTable

        def enterRule(self, listener):
            if hasattr(listener, "enterAnalyzeTable"):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAnalyzeTable"):
                listener.exitAnalyzeTable(self)




    def analyzeTable(self):

        localctx = MySqlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4621
            self.match(MySqlParser.ANALYZE)
            self.state = 4623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4622
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4625
            self.match(MySqlParser.TABLE)
            self.state = 4626
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CheckTableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def checkTableOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_checkTable

        def enterRule(self, listener):
            if hasattr(listener, "enterCheckTable"):
                listener.enterCheckTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCheckTable"):
                listener.exitCheckTable(self)




    def checkTable(self):

        localctx = MySqlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4628
            self.match(MySqlParser.CHECK)
            self.state = 4629
            self.match(MySqlParser.TABLE)
            self.state = 4630
            self.tables()
            self.state = 4634
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.FOR or ((((_la - 266)) & ~0x3f) == 0 and ((1 << (_la - 266)) & ((1 << (MySqlParser.CHANGED - 266)) | (1 << (MySqlParser.EXTENDED - 266)) | (1 << (MySqlParser.FAST - 266)))) != 0) or _la==MySqlParser.MEDIUM or _la==MySqlParser.QUICK:
                self.state = 4631
                self.checkTableOption()
                self.state = 4636
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ChecksumTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checksumTable

        def enterRule(self, listener):
            if hasattr(listener, "enterChecksumTable"):
                listener.enterChecksumTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChecksumTable"):
                listener.exitChecksumTable(self)




    def checksumTable(self):

        localctx = MySqlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4637
            self.match(MySqlParser.CHECKSUM)
            self.state = 4638
            self.match(MySqlParser.TABLE)
            self.state = 4639
            self.tables()
            self.state = 4641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK:
                self.state = 4640
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.QUICK):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.OptimizeTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_optimizeTable

        def enterRule(self, listener):
            if hasattr(listener, "enterOptimizeTable"):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitOptimizeTable"):
                listener.exitOptimizeTable(self)




    def optimizeTable(self):

        localctx = MySqlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4643
            self.match(MySqlParser.OPTIMIZE)
            self.state = 4645
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4644
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4647
            self.match(MySqlParser.TABLE)
            self.state = 4648
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.RepairTableContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_repairTable

        def enterRule(self, listener):
            if hasattr(listener, "enterRepairTable"):
                listener.enterRepairTable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRepairTable"):
                listener.exitRepairTable(self)




    def repairTable(self):

        localctx = MySqlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4650
            self.match(MySqlParser.REPAIR)
            self.state = 4652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4651
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4654
            self.match(MySqlParser.TABLE)
            self.state = 4655
            self.tables()
            self.state = 4657
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.QUICK:
                self.state = 4656
                self.match(MySqlParser.QUICK)


            self.state = 4660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED:
                self.state = 4659
                self.match(MySqlParser.EXTENDED)


            self.state = 4663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.USE_FRM:
                self.state = 4662
                self.match(MySqlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CheckTableOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checkTableOption

        def enterRule(self, listener):
            if hasattr(listener, "enterCheckTableOption"):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCheckTableOption"):
                listener.exitCheckTableOption(self)




    def checkTableOption(self):

        localctx = MySqlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_checkTableOption)
        try:
            self.state = 4672
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4665
                self.match(MySqlParser.FOR)
                self.state = 4666
                self.match(MySqlParser.UPGRADE)
                pass
            elif token in [MySqlParser.QUICK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4667
                self.match(MySqlParser.QUICK)
                pass
            elif token in [MySqlParser.FAST]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4668
                self.match(MySqlParser.FAST)
                pass
            elif token in [MySqlParser.MEDIUM]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4669
                self.match(MySqlParser.MEDIUM)
                pass
            elif token in [MySqlParser.EXTENDED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4670
                self.match(MySqlParser.EXTENDED)
                pass
            elif token in [MySqlParser.CHANGED]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4671
                self.match(MySqlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CreateUdfunctionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createUdfunction

        def enterRule(self, listener):
            if hasattr(listener, "enterCreateUdfunction"):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCreateUdfunction"):
                listener.exitCreateUdfunction(self)




    def createUdfunction(self):

        localctx = MySqlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4674
            self.match(MySqlParser.CREATE)
            self.state = 4676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.AGGREGATE:
                self.state = 4675
                self.match(MySqlParser.AGGREGATE)


            self.state = 4678
            self.match(MySqlParser.FUNCTION)
            self.state = 4679
            self.uid()
            self.state = 4680
            self.match(MySqlParser.RETURNS)
            self.state = 4681
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((((_la - 173)) & ~0x3f) == 0 and ((1 << (_la - 173)) & ((1 << (MySqlParser.INTEGER - 173)) | (1 << (MySqlParser.REAL - 173)) | (1 << (MySqlParser.DECIMAL - 173)))) != 0) or _la==MySqlParser.STRING):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4682
            self.match(MySqlParser.SONAME)
            self.state = 4683
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.InstallPluginContext, self).__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_installPlugin

        def enterRule(self, listener):
            if hasattr(listener, "enterInstallPlugin"):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInstallPlugin"):
                listener.exitInstallPlugin(self)




    def installPlugin(self):

        localctx = MySqlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4685
            self.match(MySqlParser.INSTALL)
            self.state = 4686
            self.match(MySqlParser.PLUGIN)
            self.state = 4687
            self.uid()
            self.state = 4688
            self.match(MySqlParser.SONAME)
            self.state = 4689
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UninstallPluginContext, self).__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_uninstallPlugin

        def enterRule(self, listener):
            if hasattr(listener, "enterUninstallPlugin"):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUninstallPlugin"):
                listener.exitUninstallPlugin(self)




    def uninstallPlugin(self):

        localctx = MySqlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4691
            self.match(MySqlParser.UNINSTALL)
            self.state = 4692
            self.match(MySqlParser.PLUGIN)
            self.state = 4693
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SetStatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_setStatement

     
        def copyFrom(self, ctx):
            super(MySqlParser.SetStatementContext, self).copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetTransactionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSetTransaction"):
                listener.enterSetTransaction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetTransaction"):
                listener.exitSetTransaction(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetCharsetContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSetCharset"):
                listener.enterSetCharset(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetCharset"):
                listener.exitSetCharset(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetNamesContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSetNames"):
                listener.enterSetNames(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetNames"):
                listener.exitSetNames(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetPasswordContext, self).__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSetPassword"):
                listener.enterSetPassword(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetPassword"):
                listener.exitSetPassword(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetAutocommitContext, self).__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSetAutocommit"):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetAutocommit"):
                listener.exitSetAutocommit(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SetStatementContext)
            super(MySqlParser.SetVariableContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def variableClause(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)

        def EQUAL_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterSetVariable"):
                listener.enterSetVariable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSetVariable"):
                listener.exitSetVariable(self)



    def setStatement(self):

        localctx = MySqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 4732
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,677,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4695
                self.match(MySqlParser.SET)
                self.state = 4696
                self.variableClause()
                self.state = 4697
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4698
                self.expression(0)
                self.state = 4706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4699
                    self.match(MySqlParser.COMMA)
                    self.state = 4700
                    self.variableClause()
                    self.state = 4701
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 4702
                    self.expression(0)
                    self.state = 4708
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4709
                self.match(MySqlParser.SET)
                self.state = 4713
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.CHARACTER]:
                    self.state = 4710
                    self.match(MySqlParser.CHARACTER)
                    self.state = 4711
                    self.match(MySqlParser.SET)
                    pass
                elif token in [MySqlParser.CHARSET]:
                    self.state = 4712
                    self.match(MySqlParser.CHARSET)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4717
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 4715
                    self.charsetName()
                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 4716
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = MySqlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4719
                self.match(MySqlParser.SET)
                self.state = 4720
                self.match(MySqlParser.NAMES)
                self.state = 4727
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.BINARY, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL]:
                    self.state = 4721
                    self.charsetName()
                    self.state = 4724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.COLLATE:
                        self.state = 4722
                        self.match(MySqlParser.COLLATE)
                        self.state = 4723
                        self.collationName()


                    pass
                elif token in [MySqlParser.DEFAULT]:
                    self.state = 4726
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4729
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = MySqlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4730
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = MySqlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4731
                self.setAutocommitStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowStatementContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_showStatement

     
        def copyFrom(self, ctx):
            super(MySqlParser.ShowStatementContext, self).copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowOpenTablesContext, self).__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowOpenTables"):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowOpenTables"):
                listener.exitShowOpenTables(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowGlobalInfoContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(MySqlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowGlobalInfo"):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowGlobalInfo"):
                listener.exitShowGlobalInfo(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowCreateFullIdObjectContext, self).__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowCreateFullIdObject"):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowCreateFullIdObject"):
                listener.exitShowCreateFullIdObject(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowCreateUserContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowCreateUser"):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowCreateUser"):
                listener.exitShowCreateUser(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowErrorsContext, self).__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowErrors"):
                listener.enterShowErrors(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowErrors"):
                listener.exitShowErrors(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowCountErrorsContext, self).__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowCountErrors"):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowCountErrors"):
                listener.exitShowCountErrors(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowObjectFilterContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowObjectFilter"):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowObjectFilter"):
                listener.exitShowObjectFilter(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowCreateDbContext, self).__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowCreateDb"):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowCreateDb"):
                listener.exitShowCreateDb(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowEngineContext, self).__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowEngine"):
                listener.enterShowEngine(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowEngine"):
                listener.exitShowEngine(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowSchemaFilterContext, self).__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowSchemaFilter"):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowSchemaFilter"):
                listener.exitShowSchemaFilter(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowIndexesContext, self).__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)
        def FROM(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowIndexes"):
                listener.enterShowIndexes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowIndexes"):
                listener.exitShowIndexes(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowLogEventsContext, self).__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowLogEvents"):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowLogEvents"):
                listener.exitShowLogEvents(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowMasterLogsContext, self).__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowMasterLogs"):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowMasterLogs"):
                listener.exitShowMasterLogs(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowGrantsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowGrants"):
                listener.enterShowGrants(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowGrants"):
                listener.exitShowGrants(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowSlaveStatusContext, self).__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowSlaveStatus"):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowSlaveStatus"):
                listener.exitShowSlaveStatus(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowRoutineContext, self).__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterShowRoutine"):
                listener.enterShowRoutine(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowRoutine"):
                listener.exitShowRoutine(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowProfileContext, self).__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)
        def showProfileType(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowProfile"):
                listener.enterShowProfile(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowProfile"):
                listener.exitShowProfile(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ShowStatementContext)
            super(MySqlParser.ShowColumnsContext, self).__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def FROM(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterShowColumns"):
                listener.enterShowColumns(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowColumns"):
                listener.exitShowColumns(self)



    def showStatement(self):

        localctx = MySqlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 4885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,699,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4734
                self.match(MySqlParser.SHOW)
                self.state = 4735
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.MASTER):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4736
                self.match(MySqlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = MySqlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4737
                self.match(MySqlParser.SHOW)
                self.state = 4738
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINLOG or _la==MySqlParser.RELAYLOG):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4739
                self.match(MySqlParser.EVENTS)
                self.state = 4742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IN:
                    self.state = 4740
                    self.match(MySqlParser.IN)
                    self.state = 4741
                    localctx.filename = self.match(MySqlParser.STRING_LITERAL)


                self.state = 4746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM:
                    self.state = 4744
                    self.match(MySqlParser.FROM)
                    self.state = 4745
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 4755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIMIT:
                    self.state = 4748
                    self.match(MySqlParser.LIMIT)
                    self.state = 4752
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
                    if la_ == 1:
                        self.state = 4749
                        localctx.offset = self.decimalLiteral()
                        self.state = 4750
                        self.match(MySqlParser.COMMA)


                    self.state = 4754
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = MySqlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4757
                self.match(MySqlParser.SHOW)
                self.state = 4758
                self.showCommonEntity()
                self.state = 4760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 4759
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = MySqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4762
                self.match(MySqlParser.SHOW)
                self.state = 4764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 4763
                    self.match(MySqlParser.FULL)


                self.state = 4766
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.COLUMNS or _la==MySqlParser.FIELDS):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4767
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4768
                self.tableName()
                self.state = 4771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 4769
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4770
                    self.uid()


                self.state = 4774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 4773
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = MySqlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4776
                self.match(MySqlParser.SHOW)
                self.state = 4777
                self.match(MySqlParser.CREATE)
                self.state = 4778
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DATABASE or _la==MySqlParser.SCHEMA):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.IF:
                    self.state = 4779
                    self.ifNotExists()


                self.state = 4782
                self.uid()
                pass

            elif la_ == 6:
                localctx = MySqlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4783
                self.match(MySqlParser.SHOW)
                self.state = 4784
                self.match(MySqlParser.CREATE)
                self.state = 4785
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & ((1 << (MySqlParser.PROCEDURE - 111)) | (1 << (MySqlParser.TABLE - 111)) | (1 << (MySqlParser.TRIGGER - 111)))) != 0) or _la==MySqlParser.EVENT or _la==MySqlParser.FUNCTION or _la==MySqlParser.VIEW):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4786
                self.fullId()
                pass

            elif la_ == 7:
                localctx = MySqlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4787
                self.match(MySqlParser.SHOW)
                self.state = 4788
                self.match(MySqlParser.CREATE)
                self.state = 4789
                self.match(MySqlParser.USER)
                self.state = 4790
                self.userName()
                pass

            elif la_ == 8:
                localctx = MySqlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 4791
                self.match(MySqlParser.SHOW)
                self.state = 4792
                self.match(MySqlParser.ENGINE)
                self.state = 4793
                self.engineName()
                self.state = 4794
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.MUTEX or _la==MySqlParser.STATUS):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = MySqlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 4796
                self.match(MySqlParser.SHOW)
                self.state = 4797
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = MySqlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 4798
                self.match(MySqlParser.SHOW)
                self.state = 4799
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()

                self.state = 4800
                self.match(MySqlParser.LIMIT)
                self.state = 4804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,687,self._ctx)
                if la_ == 1:
                    self.state = 4801
                    localctx.offset = self.decimalLiteral()
                    self.state = 4802
                    self.match(MySqlParser.COMMA)


                self.state = 4806
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 11:
                localctx = MySqlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 4807
                self.match(MySqlParser.SHOW)
                self.state = 4808
                self.match(MySqlParser.COUNT)
                self.state = 4809
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4810
                self.match(MySqlParser.STAR)
                self.state = 4811
                self.match(MySqlParser.RR_BRACKET)
                self.state = 4812
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ERRORS or _la==MySqlParser.WARNINGS):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 4813
                self.match(MySqlParser.SHOW)
                self.state = 4814
                self.showSchemaEntity()
                self.state = 4817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 4815
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4816
                    self.uid()


                self.state = 4820
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 4819
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = MySqlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 4822
                self.match(MySqlParser.SHOW)
                self.state = 4823
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.PROCEDURE or _la==MySqlParser.FUNCTION):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4824
                self.match(MySqlParser.CODE)
                self.state = 4825
                self.fullId()
                pass

            elif la_ == 14:
                localctx = MySqlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 4826
                self.match(MySqlParser.SHOW)
                self.state = 4827
                self.match(MySqlParser.GRANTS)
                self.state = 4830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 4828
                    self.match(MySqlParser.FOR)
                    self.state = 4829
                    self.userName()


                pass

            elif la_ == 15:
                localctx = MySqlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 4832
                self.match(MySqlParser.SHOW)
                self.state = 4833
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEYS or _la==MySqlParser.INDEXES):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4834
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4835
                self.tableName()
                self.state = 4838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 4836
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4837
                    self.uid()


                self.state = 4842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.WHERE:
                    self.state = 4840
                    self.match(MySqlParser.WHERE)
                    self.state = 4841
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = MySqlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 4844
                self.match(MySqlParser.SHOW)
                self.state = 4845
                self.match(MySqlParser.OPEN)
                self.state = 4846
                self.match(MySqlParser.TABLES)
                self.state = 4849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FROM or _la==MySqlParser.IN:
                    self.state = 4847
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.FROM or _la==MySqlParser.IN):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4848
                    self.uid()


                self.state = 4852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LIKE or _la==MySqlParser.WHERE:
                    self.state = 4851
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = MySqlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 4854
                self.match(MySqlParser.SHOW)
                self.state = 4855
                self.match(MySqlParser.PROFILE)
                self.state = 4856
                self.showProfileType()
                self.state = 4861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 4857
                    self.match(MySqlParser.COMMA)
                    self.state = 4858
                    self.showProfileType()
                    self.state = 4863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 4864
                    self.match(MySqlParser.FOR)
                    self.state = 4865
                    self.match(MySqlParser.QUERY)
                    self.state = 4866
                    localctx.queryCount = self.decimalLiteral()


                self.state = 4869
                self.match(MySqlParser.LIMIT)
                self.state = 4873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,697,self._ctx)
                if la_ == 1:
                    self.state = 4870
                    localctx.offset = self.decimalLiteral()
                    self.state = 4871
                    self.match(MySqlParser.COMMA)


                self.state = 4875
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 4877
                self.match(MySqlParser.SHOW)
                self.state = 4878
                self.match(MySqlParser.SLAVE)
                self.state = 4879
                self.match(MySqlParser.STATUS)
                self.state = 4883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 4880
                    self.match(MySqlParser.FOR)
                    self.state = 4881
                    self.match(MySqlParser.CHANNEL)
                    self.state = 4882
                    self.match(MySqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.VariableClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def AT_SIGN(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.AT_SIGN)
            else:
                return self.getToken(MySqlParser.AT_SIGN, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_variableClause

        def enterRule(self, listener):
            if hasattr(listener, "enterVariableClause"):
                listener.enterVariableClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitVariableClause"):
                listener.exitVariableClause(self)




    def variableClause(self):

        localctx = MySqlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 4897
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LOCAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4887
                self.match(MySqlParser.LOCAL_ID)
                pass
            elif token in [MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4888
                self.match(MySqlParser.GLOBAL_ID)
                pass
            elif token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.AT_SIGN, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4894
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,701,self._ctx)
                if la_ == 1:
                    self.state = 4891
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.AT_SIGN:
                        self.state = 4889
                        self.match(MySqlParser.AT_SIGN)
                        self.state = 4890
                        self.match(MySqlParser.AT_SIGN)


                    self.state = 4893
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4896
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowCommonEntityContext, self).__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(MySqlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showCommonEntity

        def enterRule(self, listener):
            if hasattr(listener, "enterShowCommonEntity"):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowCommonEntity"):
                listener.exitShowCommonEntity(self)




    def showCommonEntity(self):

        localctx = MySqlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 4912
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CHARACTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4899
                self.match(MySqlParser.CHARACTER)
                self.state = 4900
                self.match(MySqlParser.SET)
                pass
            elif token in [MySqlParser.COLLATION]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4901
                self.match(MySqlParser.COLLATION)
                pass
            elif token in [MySqlParser.DATABASES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4902
                self.match(MySqlParser.DATABASES)
                pass
            elif token in [MySqlParser.SCHEMAS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4903
                self.match(MySqlParser.SCHEMAS)
                pass
            elif token in [MySqlParser.FUNCTION]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4904
                self.match(MySqlParser.FUNCTION)
                self.state = 4905
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PROCEDURE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4906
                self.match(MySqlParser.PROCEDURE)
                self.state = 4907
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.GLOBAL, MySqlParser.SESSION, MySqlParser.STATUS, MySqlParser.VARIABLES]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION:
                    self.state = 4908
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.GLOBAL or _la==MySqlParser.SESSION):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4911
                _la = self._input.LA(1)
                if not(_la==MySqlParser.STATUS or _la==MySqlParser.VARIABLES):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowFilterContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_showFilter

        def enterRule(self, listener):
            if hasattr(listener, "enterShowFilter"):
                listener.enterShowFilter(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowFilter"):
                listener.exitShowFilter(self)




    def showFilter(self):

        localctx = MySqlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_showFilter)
        try:
            self.state = 4918
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LIKE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4914
                self.match(MySqlParser.LIKE)
                self.state = 4915
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.WHERE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4916
                self.match(MySqlParser.WHERE)
                self.state = 4917
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowGlobalInfoClauseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener):
            if hasattr(listener, "enterShowGlobalInfoClause"):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowGlobalInfoClause"):
                listener.exitShowGlobalInfoClause(self)




    def showGlobalInfoClause(self):

        localctx = MySqlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 4937
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ENGINES, MySqlParser.STORAGE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.STORAGE:
                    self.state = 4920
                    self.match(MySqlParser.STORAGE)


                self.state = 4923
                self.match(MySqlParser.ENGINES)
                pass
            elif token in [MySqlParser.MASTER]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4924
                self.match(MySqlParser.MASTER)
                self.state = 4925
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.PLUGINS]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4926
                self.match(MySqlParser.PLUGINS)
                pass
            elif token in [MySqlParser.PRIVILEGES]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4927
                self.match(MySqlParser.PRIVILEGES)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.PROCESSLIST]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4929
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 4928
                    self.match(MySqlParser.FULL)


                self.state = 4931
                self.match(MySqlParser.PROCESSLIST)
                pass
            elif token in [MySqlParser.PROFILES]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4932
                self.match(MySqlParser.PROFILES)
                pass
            elif token in [MySqlParser.SLAVE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4933
                self.match(MySqlParser.SLAVE)
                self.state = 4934
                self.match(MySqlParser.HOSTS)
                pass
            elif token in [MySqlParser.AUTHORS]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4935
                self.match(MySqlParser.AUTHORS)
                pass
            elif token in [MySqlParser.CONTRIBUTORS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4936
                self.match(MySqlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowSchemaEntityContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showSchemaEntity

        def enterRule(self, listener):
            if hasattr(listener, "enterShowSchemaEntity"):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowSchemaEntity"):
                listener.exitShowSchemaEntity(self)




    def showSchemaEntity(self):

        localctx = MySqlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 4947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.EVENTS]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4939
                self.match(MySqlParser.EVENTS)
                pass
            elif token in [MySqlParser.TABLE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4940
                self.match(MySqlParser.TABLE)
                self.state = 4941
                self.match(MySqlParser.STATUS)
                pass
            elif token in [MySqlParser.FULL, MySqlParser.TABLES]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FULL:
                    self.state = 4942
                    self.match(MySqlParser.FULL)


                self.state = 4945
                self.match(MySqlParser.TABLES)
                pass
            elif token in [MySqlParser.TRIGGERS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4946
                self.match(MySqlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShowProfileTypeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showProfileType

        def enterRule(self, listener):
            if hasattr(listener, "enterShowProfileType"):
                listener.enterShowProfileType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShowProfileType"):
                listener.exitShowProfileType(self)




    def showProfileType(self):

        localctx = MySqlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_showProfileType)
        try:
            self.state = 4961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.ALL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4949
                self.match(MySqlParser.ALL)
                pass
            elif token in [MySqlParser.BLOCK]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4950
                self.match(MySqlParser.BLOCK)
                self.state = 4951
                self.match(MySqlParser.IO)
                pass
            elif token in [MySqlParser.CONTEXT]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4952
                self.match(MySqlParser.CONTEXT)
                self.state = 4953
                self.match(MySqlParser.SWITCHES)
                pass
            elif token in [MySqlParser.CPU]:
                self.enterOuterAlt(localctx, 4)
                self.state = 4954
                self.match(MySqlParser.CPU)
                pass
            elif token in [MySqlParser.IPC]:
                self.enterOuterAlt(localctx, 5)
                self.state = 4955
                self.match(MySqlParser.IPC)
                pass
            elif token in [MySqlParser.MEMORY]:
                self.enterOuterAlt(localctx, 6)
                self.state = 4956
                self.match(MySqlParser.MEMORY)
                pass
            elif token in [MySqlParser.PAGE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 4957
                self.match(MySqlParser.PAGE)
                self.state = 4958
                self.match(MySqlParser.FAULTS)
                pass
            elif token in [MySqlParser.SOURCE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 4959
                self.match(MySqlParser.SOURCE)
                pass
            elif token in [MySqlParser.SWAPS]:
                self.enterOuterAlt(localctx, 9)
                self.state = 4960
                self.match(MySqlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BinlogStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_binlogStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterBinlogStatement"):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBinlogStatement"):
                listener.exitBinlogStatement(self)




    def binlogStatement(self):

        localctx = MySqlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4963
            self.match(MySqlParser.BINLOG)
            self.state = 4964
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CacheIndexStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def tableIndexes(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_cacheIndexStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterCacheIndexStatement"):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCacheIndexStatement"):
                listener.exitCacheIndexStatement(self)




    def cacheIndexStatement(self):

        localctx = MySqlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4966
            self.match(MySqlParser.CACHE)
            self.state = 4967
            self.match(MySqlParser.INDEX)
            self.state = 4968
            self.tableIndexes()
            self.state = 4973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4969
                self.match(MySqlParser.COMMA)
                self.state = 4970
                self.tableIndexes()
                self.state = 4975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4983
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 4976
                self.match(MySqlParser.PARTITION)
                self.state = 4977
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4980
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 4978
                    self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 4979
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 4982
                self.match(MySqlParser.RR_BRACKET)


            self.state = 4985
            self.match(MySqlParser.IN)
            self.state = 4986
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FlushStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def flushOption(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FlushOptionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterFlushStatement"):
                listener.enterFlushStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFlushStatement"):
                listener.exitFlushStatement(self)




    def flushStatement(self):

        localctx = MySqlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4988
            self.match(MySqlParser.FLUSH)
            self.state = 4990
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL:
                self.state = 4989
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NO_WRITE_TO_BINLOG or _la==MySqlParser.LOCAL):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4992
            self.flushOption()
            self.state = 4997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 4993
                self.match(MySqlParser.COMMA)
                self.state = 4994
                self.flushOption()
                self.state = 4999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.KillStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(MySqlParser.KILL, 0)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_killStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterKillStatement"):
                listener.enterKillStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKillStatement"):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = MySqlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5000
            self.match(MySqlParser.KILL)
            self.state = 5002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY:
                self.state = 5001
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CONNECTION or _la==MySqlParser.QUERY):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5005 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5004
                self.decimalLiteral()
                self.state = 5007 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (MySqlParser.ZERO_DECIMAL - 950)) | (1 << (MySqlParser.ONE_DECIMAL - 950)) | (1 << (MySqlParser.TWO_DECIMAL - 950)) | (1 << (MySqlParser.DECIMAL_LITERAL - 950)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LoadIndexIntoCacheContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def loadedTableIndexes(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LoadedTableIndexesContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener):
            if hasattr(listener, "enterLoadIndexIntoCache"):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLoadIndexIntoCache"):
                listener.exitLoadIndexIntoCache(self)




    def loadIndexIntoCache(self):

        localctx = MySqlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5009
            self.match(MySqlParser.LOAD)
            self.state = 5010
            self.match(MySqlParser.INDEX)
            self.state = 5011
            self.match(MySqlParser.INTO)
            self.state = 5012
            self.match(MySqlParser.CACHE)
            self.state = 5013
            self.loadedTableIndexes()
            self.state = 5018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5014
                self.match(MySqlParser.COMMA)
                self.state = 5015
                self.loadedTableIndexes()
                self.state = 5020
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ResetStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterResetStatement"):
                listener.enterResetStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitResetStatement"):
                listener.exitResetStatement(self)




    def resetStatement(self):

        localctx = MySqlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5021
            self.match(MySqlParser.RESET)
            self.state = 5022
            self.match(MySqlParser.QUERY)
            self.state = 5023
            self.match(MySqlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ShutdownStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_shutdownStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterShutdownStatement"):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitShutdownStatement"):
                listener.exitShutdownStatement(self)




    def shutdownStatement(self):

        localctx = MySqlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5025
            self.match(MySqlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableIndexesContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableIndexes

        def enterRule(self, listener):
            if hasattr(listener, "enterTableIndexes"):
                listener.enterTableIndexes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableIndexes"):
                listener.exitTableIndexes(self)




    def tableIndexes(self):

        localctx = MySqlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5027
            self.tableName()
            self.state = 5035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INDEX or _la==MySqlParser.KEY or _la==MySqlParser.LR_BRACKET:
                self.state = 5029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5028
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5031
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5032
                self.uidList()
                self.state = 5033
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FlushOptionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_flushOption

     
        def copyFrom(self, ctx):
            super(MySqlParser.FlushOptionContext, self).copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FlushOptionContext)
            super(MySqlParser.TableFlushOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(MySqlParser.FlushTableOptionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterTableFlushOption"):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableFlushOption"):
                listener.exitTableFlushOption(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FlushOptionContext)
            super(MySqlParser.ChannelFlushOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterChannelFlushOption"):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitChannelFlushOption"):
                listener.exitChannelFlushOption(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FlushOptionContext)
            super(MySqlParser.SimpleFlushOptionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def READ(self):
            return self.getToken(MySqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleFlushOption"):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleFlushOption"):
                listener.exitSimpleFlushOption(self)



    def flushOption(self):

        localctx = MySqlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,727,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5055
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DES_KEY_FILE]:
                    self.state = 5037
                    self.match(MySqlParser.DES_KEY_FILE)
                    pass
                elif token in [MySqlParser.HOSTS]:
                    self.state = 5038
                    self.match(MySqlParser.HOSTS)
                    pass
                elif token in [MySqlParser.BINARY, MySqlParser.ENGINE, MySqlParser.ERROR, MySqlParser.GENERAL, MySqlParser.LOGS, MySqlParser.RELAY, MySqlParser.SLOW]:
                    self.state = 5040
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.BINARY or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (MySqlParser.ENGINE - 309)) | (1 << (MySqlParser.ERROR - 309)) | (1 << (MySqlParser.GENERAL - 309)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW:
                        self.state = 5039
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.BINARY or ((((_la - 309)) & ~0x3f) == 0 and ((1 << (_la - 309)) & ((1 << (MySqlParser.ENGINE - 309)) | (1 << (MySqlParser.ERROR - 309)) | (1 << (MySqlParser.GENERAL - 309)))) != 0) or _la==MySqlParser.RELAY or _la==MySqlParser.SLOW):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5042
                    self.match(MySqlParser.LOGS)
                    pass
                elif token in [MySqlParser.OPTIMIZER_COSTS]:
                    self.state = 5043
                    self.match(MySqlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [MySqlParser.PRIVILEGES]:
                    self.state = 5044
                    self.match(MySqlParser.PRIVILEGES)
                    pass
                elif token in [MySqlParser.QUERY]:
                    self.state = 5045
                    self.match(MySqlParser.QUERY)
                    self.state = 5046
                    self.match(MySqlParser.CACHE)
                    pass
                elif token in [MySqlParser.STATUS]:
                    self.state = 5047
                    self.match(MySqlParser.STATUS)
                    pass
                elif token in [MySqlParser.USER_RESOURCES]:
                    self.state = 5048
                    self.match(MySqlParser.USER_RESOURCES)
                    pass
                elif token in [MySqlParser.TABLES]:
                    self.state = 5049
                    self.match(MySqlParser.TABLES)
                    self.state = 5053
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.WITH:
                        self.state = 5050
                        self.match(MySqlParser.WITH)
                        self.state = 5051
                        self.match(MySqlParser.READ)
                        self.state = 5052
                        self.match(MySqlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5057
                self.match(MySqlParser.RELAY)
                self.state = 5058
                self.match(MySqlParser.LOGS)
                self.state = 5060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5059
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = MySqlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5062
                self.match(MySqlParser.TABLES)
                self.state = 5063
                self.tables()
                self.state = 5065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR or _la==MySqlParser.WITH:
                    self.state = 5064
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FlushTableOptionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushTableOption

        def enterRule(self, listener):
            if hasattr(listener, "enterFlushTableOption"):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFlushTableOption"):
                listener.exitFlushTableOption(self)




    def flushTableOption(self):

        localctx = MySqlParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_flushTableOption)
        try:
            self.state = 5074
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.WITH]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5069
                self.match(MySqlParser.WITH)
                self.state = 5070
                self.match(MySqlParser.READ)
                self.state = 5071
                self.match(MySqlParser.LOCK)
                pass
            elif token in [MySqlParser.FOR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5072
                self.match(MySqlParser.FOR)
                self.state = 5073
                self.match(MySqlParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LoadedTableIndexesContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def uidList(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadedTableIndexes

        def enterRule(self, listener):
            if hasattr(listener, "enterLoadedTableIndexes"):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLoadedTableIndexes"):
                listener.exitLoadedTableIndexes(self)




    def loadedTableIndexes(self):

        localctx = MySqlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5076
            self.tableName()
            self.state = 5084
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.PARTITION:
                self.state = 5077
                self.match(MySqlParser.PARTITION)
                self.state = 5078
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5081
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.STRING_LITERAL, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID]:
                    self.state = 5079
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [MySqlParser.ALL]:
                    self.state = 5080
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5083
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5093
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.INDEX or _la==MySqlParser.KEY or _la==MySqlParser.LR_BRACKET:
                self.state = 5087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INDEX or _la==MySqlParser.KEY:
                    self.state = 5086
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.INDEX or _la==MySqlParser.KEY):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5089
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5090
                localctx.indexList = self.uidList()
                self.state = 5091
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5097
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.IGNORE:
                self.state = 5095
                self.match(MySqlParser.IGNORE)
                self.state = 5096
                self.match(MySqlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SimpleDescribeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleDescribeStatement"):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleDescribeStatement"):
                listener.exitSimpleDescribeStatement(self)




    def simpleDescribeStatement(self):

        localctx = MySqlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5099
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5100
            self.tableName()
            self.state = 5103
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
            if la_ == 1:
                self.state = 5101
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5102
                localctx.pattern = self.match(MySqlParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FullDescribeStatementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(MySqlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullDescribeStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterFullDescribeStatement"):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFullDescribeStatement"):
                listener.exitFullDescribeStatement(self)




    def fullDescribeStatement(self):

        localctx = MySqlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5105
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.DESC) | (1 << MySqlParser.DESCRIBE) | (1 << MySqlParser.EXPLAIN))) != 0)):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5109
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT:
                self.state = 5106
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.EXTENDED or _la==MySqlParser.PARTITIONS or _la==MySqlParser.FORMAT):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5107
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5108
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.JSON or _la==MySqlParser.TRADITIONAL):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5111
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HelpStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_helpStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterHelpStatement"):
                listener.enterHelpStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHelpStatement"):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = MySqlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5113
            self.match(MySqlParser.HELP)
            self.state = 5114
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UseStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_useStatement

        def enterRule(self, listener):
            if hasattr(listener, "enterUseStatement"):
                listener.enterUseStatement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUseStatement"):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MySqlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5116
            self.match(MySqlParser.USE)
            self.state = 5117
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DescribeObjectClauseContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx):
            super(MySqlParser.DescribeObjectClauseContext, self).copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DescribeObjectClauseContext)
            super(MySqlParser.DescribeStatementsContext, self).__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterDescribeStatements"):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDescribeStatements"):
                listener.exitDescribeStatements(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DescribeObjectClauseContext)
            super(MySqlParser.DescribeConnectionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterDescribeConnection"):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDescribeConnection"):
                listener.exitDescribeConnection(self)



    def describeObjectClause(self):

        localctx = MySqlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_describeObjectClause)
        try:
            self.state = 5129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DELETE, MySqlParser.INSERT, MySqlParser.REPLACE, MySqlParser.SELECT, MySqlParser.UPDATE, MySqlParser.LR_BRACKET]:
                localctx = MySqlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.SELECT, MySqlParser.LR_BRACKET]:
                    self.state = 5119
                    self.selectStatement()
                    pass
                elif token in [MySqlParser.DELETE]:
                    self.state = 5120
                    self.deleteStatement()
                    pass
                elif token in [MySqlParser.INSERT]:
                    self.state = 5121
                    self.insertStatement()
                    pass
                elif token in [MySqlParser.REPLACE]:
                    self.state = 5122
                    self.replaceStatement()
                    pass
                elif token in [MySqlParser.UPDATE]:
                    self.state = 5123
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [MySqlParser.FOR]:
                localctx = MySqlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5126
                self.match(MySqlParser.FOR)
                self.state = 5127
                self.match(MySqlParser.CONNECTION)
                self.state = 5128
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FullIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullId

        def enterRule(self, listener):
            if hasattr(listener, "enterFullId"):
                listener.enterFullId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFullId"):
                listener.exitFullId(self)




    def fullId(self):

        localctx = MySqlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5131
            self.uid()
            self.state = 5135
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
            if la_ == 1:
                self.state = 5132
                self.match(MySqlParser.DOT_ID)

            elif la_ == 2:
                self.state = 5133
                self.match(MySqlParser.DOT)
                self.state = 5134
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TableNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_tableName

        def enterRule(self, listener):
            if hasattr(listener, "enterTableName"):
                listener.enterTableName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTableName"):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySqlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5137
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FullColumnNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dottedId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_fullColumnName

        def enterRule(self, listener):
            if hasattr(listener, "enterFullColumnName"):
                listener.enterFullColumnName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFullColumnName"):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = MySqlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_fullColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5139
            self.uid()
            self.state = 5144
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,740,self._ctx)
            if la_ == 1:
                self.state = 5140
                self.dottedId()
                self.state = 5142
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,739,self._ctx)
                if la_ == 1:
                    self.state = 5141
                    self.dottedId()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexColumnNameContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnName

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexColumnName"):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexColumnName"):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = MySqlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5146
            self.uid()
            self.state = 5151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.LR_BRACKET:
                self.state = 5147
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5148
                self.decimalLiteral()
                self.state = 5149
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC:
                self.state = 5153
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(MySqlParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userName

        def enterRule(self, listener):
            if hasattr(listener, "enterUserName"):
                listener.enterUserName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserName"):
                listener.exitUserName(self)




    def userName(self):

        localctx = MySqlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_userName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5156
            _la = self._input.LA(1)
            if not(_la==MySqlParser.ID or _la==MySqlParser.STRING_USER_NAME):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.MysqlVariableContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mysqlVariable

        def enterRule(self, listener):
            if hasattr(listener, "enterMysqlVariable"):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMysqlVariable"):
                listener.exitMysqlVariable(self)




    def mysqlVariable(self):

        localctx = MySqlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5158
            _la = self._input.LA(1)
            if not(_la==MySqlParser.LOCAL_ID or _la==MySqlParser.GLOBAL_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CharsetNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetName

        def enterRule(self, listener):
            if hasattr(listener, "enterCharsetName"):
                listener.enterCharsetName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharsetName"):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySqlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_charsetName)
        try:
            self.state = 5164
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BINARY]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5160
                self.match(MySqlParser.BINARY)
                pass
            elif token in [MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5161
                self.charsetNameBase()
                pass
            elif token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5162
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.CHARSET_REVERSE_QOUTE_STRING]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5163
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CollationNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_collationName

        def enterRule(self, listener):
            if hasattr(listener, "enterCollationName"):
                listener.enterCollationName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollationName"):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySqlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_collationName)
        try:
            self.state = 5168
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,744,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5166
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5167
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.EngineNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(MySqlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(MySqlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(MySqlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(MySqlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(MySqlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(MySqlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(MySqlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(MySqlParser.NDBCLUSTER, 0)

        def PERFOMANCE_SCHEMA(self):
            return self.getToken(MySqlParser.PERFOMANCE_SCHEMA, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_engineName

        def enterRule(self, listener):
            if hasattr(listener, "enterEngineName"):
                listener.enterEngineName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitEngineName"):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = MySqlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5170
            _la = self._input.LA(1)
            if not(((((_la - 607)) & ~0x3f) == 0 and ((1 << (_la - 607)) & ((1 << (MySqlParser.ARCHIVE - 607)) | (1 << (MySqlParser.BLACKHOLE - 607)) | (1 << (MySqlParser.CSV - 607)) | (1 << (MySqlParser.FEDERATED - 607)) | (1 << (MySqlParser.INNODB - 607)) | (1 << (MySqlParser.MEMORY - 607)) | (1 << (MySqlParser.MRG_MYISAM - 607)) | (1 << (MySqlParser.MYISAM - 607)) | (1 << (MySqlParser.NDB - 607)) | (1 << (MySqlParser.NDBCLUSTER - 607)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 607)))) != 0) or _la==MySqlParser.STRING_LITERAL or _la==MySqlParser.REVERSE_QUOTE_ID):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UuidSetContext, self).__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def MINUS(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def COLON_SYMB(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COLON_SYMB)
            else:
                return self.getToken(MySqlParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uuidSet

        def enterRule(self, listener):
            if hasattr(listener, "enterUuidSet"):
                listener.enterUuidSet(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUuidSet"):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = MySqlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5172
            self.decimalLiteral()
            self.state = 5173
            self.match(MySqlParser.MINUS)
            self.state = 5174
            self.decimalLiteral()
            self.state = 5175
            self.match(MySqlParser.MINUS)
            self.state = 5176
            self.decimalLiteral()
            self.state = 5177
            self.match(MySqlParser.MINUS)
            self.state = 5178
            self.decimalLiteral()
            self.state = 5179
            self.match(MySqlParser.MINUS)
            self.state = 5180
            self.decimalLiteral()
            self.state = 5186 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 5181
                self.match(MySqlParser.COLON_SYMB)
                self.state = 5182
                self.decimalLiteral()
                self.state = 5183
                self.match(MySqlParser.MINUS)
                self.state = 5184
                self.decimalLiteral()
                self.state = 5188 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==MySqlParser.COLON_SYMB):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XidContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.XuidStringIdContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xid

        def enterRule(self, listener):
            if hasattr(listener, "enterXid"):
                listener.enterXid(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXid"):
                listener.exitXid(self)




    def xid(self):

        localctx = MySqlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5190
            localctx.globalTableUid = self.xuidStringId()
            self.state = 5197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 5191
                self.match(MySqlParser.COMMA)
                self.state = 5192
                localctx.qualifier = self.xuidStringId()
                self.state = 5195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COMMA:
                    self.state = 5193
                    self.match(MySqlParser.COMMA)
                    self.state = 5194
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.XuidStringIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_xuidStringId

        def enterRule(self, listener):
            if hasattr(listener, "enterXuidStringId"):
                listener.enterXuidStringId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitXuidStringId"):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = MySqlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 5206
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.STRING_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5199
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [MySqlParser.BIT_STRING]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5200
                self.match(MySqlParser.BIT_STRING)
                pass
            elif token in [MySqlParser.HEXADECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5202 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5201
                    self.match(MySqlParser.HEXADECIMAL_LITERAL)
                    self.state = 5204 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.HEXADECIMAL_LITERAL):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AuthPluginContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_authPlugin

        def enterRule(self, listener):
            if hasattr(listener, "enterAuthPlugin"):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAuthPlugin"):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = MySqlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_authPlugin)
        try:
            self.state = 5210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5208
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5209
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UidContext, self).__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_uid

        def enterRule(self, listener):
            if hasattr(listener, "enterUid"):
                listener.enterUid(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUid"):
                listener.exitUid(self)




    def uid(self):

        localctx = MySqlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_uid)
        try:
            self.state = 5215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,751,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5212
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5213
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5214
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SimpleIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_simpleId

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleId"):
                listener.enterSimpleId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleId"):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = MySqlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_simpleId)
        try:
            self.state = 5226
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,752,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5217
                self.match(MySqlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5218
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5219
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5220
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5221
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5222
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5223
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5224
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5225
                self.functionNameBase()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DottedIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dottedId

        def enterRule(self, listener):
            if hasattr(listener, "enterDottedId"):
                listener.enterDottedId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDottedId"):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = MySqlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_dottedId)
        try:
            self.state = 5231
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DOT_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5228
                self.match(MySqlParser.DOT_ID)
                pass
            elif token in [MySqlParser.DOT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5229
                self.match(MySqlParser.DOT)
                self.state = 5230
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DecimalLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterDecimalLiteral"):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDecimalLiteral"):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = MySqlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5233
            _la = self._input.LA(1)
            if not(((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (MySqlParser.ZERO_DECIMAL - 950)) | (1 << (MySqlParser.ONE_DECIMAL - 950)) | (1 << (MySqlParser.TWO_DECIMAL - 950)) | (1 << (MySqlParser.DECIMAL_LITERAL - 950)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FileSizeLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(MySqlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fileSizeLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterFileSizeLiteral"):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFileSizeLiteral"):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = MySqlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_fileSizeLiteral)
        try:
            self.state = 5237
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.FILESIZE_LITERAL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5235
                self.match(MySqlParser.FILESIZE_LITERAL)
                pass
            elif token in [MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.DECIMAL_LITERAL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5236
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.StringLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_stringLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterStringLiteral"):
                listener.enterStringLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringLiteral"):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = MySqlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 5262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,761,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5244
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 5240
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 5239
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 5242
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5243
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5247 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 5246
                        self.match(MySqlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 5249 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,757,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5256
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STRING_LITERAL, MySqlParser.STRING_CHARSET_NAME]:
                    self.state = 5252
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.STRING_CHARSET_NAME:
                        self.state = 5251
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 5254
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [MySqlParser.START_NATIONAL_STRING_LITERAL]:
                    self.state = 5255
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
                if la_ == 1:
                    self.state = 5258
                    self.match(MySqlParser.COLLATE)
                    self.state = 5259
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BooleanLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_booleanLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterBooleanLiteral"):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBooleanLiteral"):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = MySqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5264
            _la = self._input.LA(1)
            if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.HexadecimalLiteralContext, self).__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener):
            if hasattr(listener, "enterHexadecimalLiteral"):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitHexadecimalLiteral"):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = MySqlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.STRING_CHARSET_NAME:
                self.state = 5266
                self.match(MySqlParser.STRING_CHARSET_NAME)


            self.state = 5269
            self.match(MySqlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.NullNotnullContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nullNotnull

        def enterRule(self, listener):
            if hasattr(listener, "enterNullNotnull"):
                listener.enterNullNotnull(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNullNotnull"):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = MySqlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.NOT:
                self.state = 5271
                self.match(MySqlParser.NOT)


            self.state = 5274
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ConstantContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(MySqlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_constant

        def enterRule(self, listener):
            if hasattr(listener, "enterConstant"):
                listener.enterConstant(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstant"):
                listener.exitConstant(self)




    def constant(self):

        localctx = MySqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 5288
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,765,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5276
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5277
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5278
                self.match(MySqlParser.MINUS)
                self.state = 5279
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5280
                self.hexadecimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5281
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5282
                self.match(MySqlParser.REAL_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5283
                self.match(MySqlParser.BIT_STRING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 5284
                    self.match(MySqlParser.NOT)


                self.state = 5287
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NULL_LITERAL or _la==MySqlParser.NULL_SPEC_LITERAL):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DataTypeContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_dataType

     
        def copyFrom(self, ctx):
            super(MySqlParser.DataTypeContext, self).copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DataTypeContext)
            super(MySqlParser.SpatialDataTypeContext, self).__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSpatialDataType"):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpatialDataType"):
                listener.exitSpatialDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DataTypeContext)
            super(MySqlParser.CollectionDataTypeContext, self).__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)
        def SET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCollectionDataType"):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollectionDataType"):
                listener.exitCollectionDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DataTypeContext)
            super(MySqlParser.DimensionDataTypeContext, self).__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(MySqlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(MySqlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(MySqlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(MySqlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(MySqlParser.BIGINT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)
        def ZEROFILL(self):
            return self.getToken(MySqlParser.ZEROFILL, 0)
        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)
        def DOUBLE(self):
            return self.getToken(MySqlParser.DOUBLE, 0)
        def FLOAT(self):
            return self.getToken(MySqlParser.FLOAT, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)
        def NUMERIC(self):
            return self.getToken(MySqlParser.NUMERIC, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)
        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDimensionDataType"):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDimensionDataType"):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DataTypeContext)
            super(MySqlParser.StringDataTypeContext, self).__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(MySqlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(MySqlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(MySqlParser.LONGTEXT, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterStringDataType"):
                listener.enterStringDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitStringDataType"):
                listener.exitStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.DataTypeContext)
            super(MySqlParser.SimpleDataTypeContext, self).__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(MySqlParser.TINYBLOB, 0)
        def BLOB(self):
            return self.getToken(MySqlParser.BLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(MySqlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(MySqlParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleDataType"):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleDataType"):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = MySqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 5365
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CHAR, MySqlParser.VARCHAR, MySqlParser.TINYTEXT, MySqlParser.TEXT, MySqlParser.MEDIUMTEXT, MySqlParser.LONGTEXT]:
                localctx = MySqlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5290
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (MySqlParser.CHAR - 185)) | (1 << (MySqlParser.VARCHAR - 185)) | (1 << (MySqlParser.TINYTEXT - 185)) | (1 << (MySqlParser.TEXT - 185)) | (1 << (MySqlParser.MEDIUMTEXT - 185)) | (1 << (MySqlParser.LONGTEXT - 185)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5292
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
                if la_ == 1:
                    self.state = 5291
                    self.lengthOneDimension()


                self.state = 5295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5294
                    self.match(MySqlParser.BINARY)


                self.state = 5300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 5297
                    self.match(MySqlParser.CHARACTER)
                    self.state = 5298
                    self.match(MySqlParser.SET)
                    self.state = 5299
                    self.charsetName()


                self.state = 5304
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 5302
                    self.match(MySqlParser.COLLATE)
                    self.state = 5303
                    self.collationName()


                pass
            elif token in [MySqlParser.TINYINT, MySqlParser.SMALLINT, MySqlParser.MEDIUMINT, MySqlParser.INT, MySqlParser.INTEGER, MySqlParser.BIGINT]:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5306
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 169)) & ~0x3f) == 0 and ((1 << (_la - 169)) & ((1 << (MySqlParser.TINYINT - 169)) | (1 << (MySqlParser.SMALLINT - 169)) | (1 << (MySqlParser.MEDIUMINT - 169)) | (1 << (MySqlParser.INT - 169)) | (1 << (MySqlParser.INTEGER - 169)) | (1 << (MySqlParser.BIGINT - 169)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5308
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,770,self._ctx)
                if la_ == 1:
                    self.state = 5307
                    self.lengthOneDimension()


                self.state = 5311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNSIGNED:
                    self.state = 5310
                    self.match(MySqlParser.UNSIGNED)


                self.state = 5314
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5313
                    self.match(MySqlParser.ZEROFILL)


                pass
            elif token in [MySqlParser.REAL, MySqlParser.DOUBLE, MySqlParser.FLOAT]:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5316
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 175)) & ~0x3f) == 0 and ((1 << (_la - 175)) & ((1 << (MySqlParser.REAL - 175)) | (1 << (MySqlParser.DOUBLE - 175)) | (1 << (MySqlParser.FLOAT - 175)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,773,self._ctx)
                if la_ == 1:
                    self.state = 5317
                    self.lengthTwoDimension()


                self.state = 5321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNSIGNED:
                    self.state = 5320
                    self.match(MySqlParser.UNSIGNED)


                self.state = 5324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5323
                    self.match(MySqlParser.ZEROFILL)


                pass
            elif token in [MySqlParser.DECIMAL, MySqlParser.NUMERIC]:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5326
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.DECIMAL or _la==MySqlParser.NUMERIC):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5328
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,776,self._ctx)
                if la_ == 1:
                    self.state = 5327
                    self.lengthTwoOptionalDimension()


                self.state = 5331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.UNSIGNED:
                    self.state = 5330
                    self.match(MySqlParser.UNSIGNED)


                self.state = 5334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ZEROFILL:
                    self.state = 5333
                    self.match(MySqlParser.ZEROFILL)


                pass
            elif token in [MySqlParser.DATE, MySqlParser.TINYBLOB, MySqlParser.BLOB, MySqlParser.MEDIUMBLOB, MySqlParser.LONGBLOB, MySqlParser.BOOL, MySqlParser.BOOLEAN]:
                localctx = MySqlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5336
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TINYBLOB - 180)) | (1 << (MySqlParser.BLOB - 180)) | (1 << (MySqlParser.MEDIUMBLOB - 180)) | (1 << (MySqlParser.LONGBLOB - 180)))) != 0) or _la==MySqlParser.BOOL or _la==MySqlParser.BOOLEAN):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.BINARY, MySqlParser.VARBINARY, MySqlParser.BIT]:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5337
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (MySqlParser.TIME - 181)) | (1 << (MySqlParser.TIMESTAMP - 181)) | (1 << (MySqlParser.DATETIME - 181)) | (1 << (MySqlParser.YEAR - 181)) | (1 << (MySqlParser.BINARY - 181)) | (1 << (MySqlParser.VARBINARY - 181)))) != 0) or _la==MySqlParser.BIT):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5339
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,779,self._ctx)
                if la_ == 1:
                    self.state = 5338
                    self.lengthOneDimension()


                pass
            elif token in [MySqlParser.SET, MySqlParser.ENUM]:
                localctx = MySqlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5341
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SET or _la==MySqlParser.ENUM):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5342
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5343
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5344
                    self.match(MySqlParser.COMMA)
                    self.state = 5345
                    self.match(MySqlParser.STRING_LITERAL)
                    self.state = 5350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5351
                self.match(MySqlParser.RR_BRACKET)
                self.state = 5353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.BINARY:
                    self.state = 5352
                    self.match(MySqlParser.BINARY)


                self.state = 5358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 5355
                    self.match(MySqlParser.CHARACTER)
                    self.state = 5356
                    self.match(MySqlParser.SET)
                    self.state = 5357
                    self.charsetName()


                self.state = 5362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.COLLATE:
                    self.state = 5360
                    self.match(MySqlParser.COLLATE)
                    self.state = 5361
                    self.collationName()


                pass
            elif token in [MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON]:
                localctx = MySqlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5364
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 622)) & ~0x3f) == 0 and ((1 << (_la - 622)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 622)) | (1 << (MySqlParser.LINESTRING - 622)) | (1 << (MySqlParser.MULTILINESTRING - 622)) | (1 << (MySqlParser.MULTIPOINT - 622)) | (1 << (MySqlParser.MULTIPOLYGON - 622)) | (1 << (MySqlParser.POINT - 622)) | (1 << (MySqlParser.POLYGON - 622)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ConvertedDataTypeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)


        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)


        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_convertedDataType

        def enterRule(self, listener):
            if hasattr(listener, "enterConvertedDataType"):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConvertedDataType"):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = MySqlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.state = 5389
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.BINARY, MySqlParser.NCHAR]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5367
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BINARY or _la==MySqlParser.NCHAR):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5368
                    self.lengthOneDimension()


                pass
            elif token in [MySqlParser.CHAR]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5371
                localctx.typeName = self.match(MySqlParser.CHAR)
                self.state = 5373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5372
                    self.lengthOneDimension()


                self.state = 5378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.CHARACTER:
                    self.state = 5375
                    self.match(MySqlParser.CHARACTER)
                    self.state = 5376
                    self.match(MySqlParser.SET)
                    self.state = 5377
                    self.charsetName()


                pass
            elif token in [MySqlParser.DATE, MySqlParser.TIME, MySqlParser.DATETIME]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5380
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.DATETIME - 180)))) != 0)):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [MySqlParser.DECIMAL]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5381
                localctx.typeName = self.match(MySqlParser.DECIMAL)
                self.state = 5383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5382
                    self.lengthTwoDimension()


                pass
            elif token in [MySqlParser.UNSIGNED, MySqlParser.SIGNED]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5385
                _la = self._input.LA(1)
                if not(_la==MySqlParser.UNSIGNED or _la==MySqlParser.SIGNED):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.INTEGER:
                    self.state = 5386
                    self.match(MySqlParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LengthOneDimensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthOneDimension

        def enterRule(self, listener):
            if hasattr(listener, "enterLengthOneDimension"):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLengthOneDimension"):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = MySqlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5391
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5392
            self.decimalLiteral()
            self.state = 5393
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LengthTwoDimensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoDimension

        def enterRule(self, listener):
            if hasattr(listener, "enterLengthTwoDimension"):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLengthTwoDimension"):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = MySqlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5395
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5396
            self.decimalLiteral()
            self.state = 5397
            self.match(MySqlParser.COMMA)
            self.state = 5398
            self.decimalLiteral()
            self.state = 5399
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LengthTwoOptionalDimensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener):
            if hasattr(listener, "enterLengthTwoOptionalDimension"):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLengthTwoOptionalDimension"):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = MySqlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5401
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5402
            self.decimalLiteral()
            self.state = 5405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.COMMA:
                self.state = 5403
                self.match(MySqlParser.COMMA)
                self.state = 5404
                self.decimalLiteral()


            self.state = 5407
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UidListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uidList

        def enterRule(self, listener):
            if hasattr(listener, "enterUidList"):
                listener.enterUidList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUidList"):
                listener.exitUidList(self)




    def uidList(self):

        localctx = MySqlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5409
            self.uid()
            self.state = 5414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,792,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5410
                    self.match(MySqlParser.COMMA)
                    self.state = 5411
                    self.uid() 
                self.state = 5416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,792,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TablesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tables

        def enterRule(self, listener):
            if hasattr(listener, "enterTables"):
                listener.enterTables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTables"):
                listener.exitTables(self)




    def tables(self):

        localctx = MySqlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5417
            self.tableName()
            self.state = 5422
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,793,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 5418
                    self.match(MySqlParser.COMMA)
                    self.state = 5419
                    self.tableName() 
                self.state = 5424
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,793,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IndexColumnNamesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def indexColumnName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnNames

        def enterRule(self, listener):
            if hasattr(listener, "enterIndexColumnNames"):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIndexColumnNames"):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = MySqlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5425
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5426
            self.indexColumnName()
            self.state = 5431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5427
                self.match(MySqlParser.COMMA)
                self.state = 5428
                self.indexColumnName()
                self.state = 5433
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5434
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExpressionsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressions

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressions"):
                listener.enterExpressions(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressions"):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = MySqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5436
            self.expression(0)
            self.state = 5441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5437
                self.match(MySqlParser.COMMA)
                self.state = 5438
                self.expression(0)
                self.state = 5443
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExpressionsWithDefaultsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionsWithDefaults

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressionsWithDefaults"):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressionsWithDefaults"):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = MySqlParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5444
            self.expressionOrDefault()
            self.state = 5449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5445
                self.match(MySqlParser.COMMA)
                self.state = 5446
                self.expressionOrDefault()
                self.state = 5451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ConstantsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_constants

        def enterRule(self, listener):
            if hasattr(listener, "enterConstants"):
                listener.enterConstants(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstants"):
                listener.exitConstants(self)




    def constants(self):

        localctx = MySqlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5452
            self.constant()
            self.state = 5457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5453
                self.match(MySqlParser.COMMA)
                self.state = 5454
                self.constant()
                self.state = 5459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SimpleStringsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleStrings

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleStrings"):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleStrings"):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = MySqlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5460
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 5465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5461
                self.match(MySqlParser.COMMA)
                self.state = 5462
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5467
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UserVariablesContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCAL_ID)
            else:
                return self.getToken(MySqlParser.LOCAL_ID, i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_userVariables

        def enterRule(self, listener):
            if hasattr(listener, "enterUserVariables"):
                listener.enterUserVariables(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUserVariables"):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = MySqlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5468
            self.match(MySqlParser.LOCAL_ID)
            self.state = 5473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5469
                self.match(MySqlParser.COMMA)
                self.state = 5470
                self.match(MySqlParser.LOCAL_ID)
                self.state = 5475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DefaultValueContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def currentTimestamp(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_defaultValue

        def enterRule(self, listener):
            if hasattr(listener, "enterDefaultValue"):
                listener.enterDefaultValue(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDefaultValue"):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = MySqlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_defaultValue)
        self._la = 0 # Token type
        try:
            self.state = 5484
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,801,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5476
                self.match(MySqlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5477
                self.constant()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5478
                self.currentTimestamp()
                self.state = 5482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ON:
                    self.state = 5479
                    self.match(MySqlParser.ON)
                    self.state = 5480
                    self.match(MySqlParser.UPDATE)
                    self.state = 5481
                    self.currentTimestamp()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CurrentTimestampContext, self).__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_currentTimestamp

        def enterRule(self, listener):
            if hasattr(listener, "enterCurrentTimestamp"):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCurrentTimestamp"):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = MySqlParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.LOCALTIMESTAMP]:
                self.state = 5486
                _la = self._input.LA(1)
                if not(((((_la - 227)) & ~0x3f) == 0 and ((1 << (_la - 227)) & ((1 << (MySqlParser.CURRENT_TIMESTAMP - 227)) | (1 << (MySqlParser.LOCALTIME - 227)) | (1 << (MySqlParser.LOCALTIMESTAMP - 227)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LR_BRACKET:
                    self.state = 5487
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 5489
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (MySqlParser.ZERO_DECIMAL - 950)) | (1 << (MySqlParser.ONE_DECIMAL - 950)) | (1 << (MySqlParser.TWO_DECIMAL - 950)) | (1 << (MySqlParser.DECIMAL_LITERAL - 950)))) != 0):
                        self.state = 5488
                        self.decimalLiteral()


                    self.state = 5491
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [MySqlParser.NOW]:
                self.state = 5494
                self.match(MySqlParser.NOW)
                self.state = 5495
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 950)) & ~0x3f) == 0 and ((1 << (_la - 950)) & ((1 << (MySqlParser.ZERO_DECIMAL - 950)) | (1 << (MySqlParser.ONE_DECIMAL - 950)) | (1 << (MySqlParser.TWO_DECIMAL - 950)) | (1 << (MySqlParser.DECIMAL_LITERAL - 950)))) != 0):
                    self.state = 5496
                    self.decimalLiteral()


                self.state = 5499
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExpressionOrDefaultContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionOrDefault

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressionOrDefault"):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressionOrDefault"):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = MySqlParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_expressionOrDefault)
        try:
            self.state = 5504
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.CASE, MySqlParser.CAST, MySqlParser.CONVERT, MySqlParser.CURRENT_USER, MySqlParser.DATABASE, MySqlParser.EXISTS, MySqlParser.FALSE, MySqlParser.IF, MySqlParser.INSERT, MySqlParser.INTERVAL, MySqlParser.LEFT, MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.REPLACE, MySqlParser.RIGHT, MySqlParser.TRUE, MySqlParser.VALUES, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.CHAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.CURRENT_DATE, MySqlParser.CURRENT_TIME, MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.CURDATE, MySqlParser.CURTIME, MySqlParser.DATE_ADD, MySqlParser.DATE_SUB, MySqlParser.EXTRACT, MySqlParser.LOCALTIMESTAMP, MySqlParser.NOW, MySqlParser.POSITION, MySqlParser.SUBSTR, MySqlParser.SUBSTRING, MySqlParser.SYSDATE, MySqlParser.TRIM, MySqlParser.UTC_DATE, MySqlParser.UTC_TIME, MySqlParser.UTC_TIMESTAMP, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.PLUS, MySqlParser.MINUS, MySqlParser.EXCLAMATION_SYMBOL, MySqlParser.BIT_NOT_OP, MySqlParser.LR_BRACKET, MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.START_NATIONAL_STRING_LITERAL, MySqlParser.STRING_LITERAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.HEXADECIMAL_LITERAL, MySqlParser.REAL_LITERAL, MySqlParser.NULL_SPEC_LITERAL, MySqlParser.BIT_STRING, MySqlParser.STRING_CHARSET_NAME, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5502
                self.expression(0)
                pass
            elif token in [MySqlParser.DEFAULT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5503
                self.match(MySqlParser.DEFAULT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IfExistsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifExists

        def enterRule(self, listener):
            if hasattr(listener, "enterIfExists"):
                listener.enterIfExists(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfExists"):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySqlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5506
            self.match(MySqlParser.IF)
            self.state = 5507
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IfNotExistsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifNotExists

        def enterRule(self, listener):
            if hasattr(listener, "enterIfNotExists"):
                listener.enterIfNotExists(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIfNotExists"):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySqlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5509
            self.match(MySqlParser.IF)
            self.state = 5510
            self.match(MySqlParser.NOT)
            self.state = 5511
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FunctionCallContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_functionCall

     
        def copyFrom(self, ctx):
            super(MySqlParser.FunctionCallContext, self).copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FunctionCallContext)
            super(MySqlParser.SpecificFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(MySqlParser.SpecificFunctionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterSpecificFunctionCall"):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSpecificFunctionCall"):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FunctionCallContext)
            super(MySqlParser.PasswordFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterPasswordFunctionCall"):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPasswordFunctionCall"):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FunctionCallContext)
            super(MySqlParser.UdfFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUdfFunctionCall"):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUdfFunctionCall"):
                listener.exitUdfFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FunctionCallContext)
            super(MySqlParser.AggregateFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterAggregateFunctionCall"):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAggregateFunctionCall"):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.FunctionCallContext)
            super(MySqlParser.ScalarFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(MySqlParser.ScalarFunctionNameContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterScalarFunctionCall"):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScalarFunctionCall"):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = MySqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_functionCall)
        self._la = 0 # Token type
        try:
            self.state = 5530
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5513
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = MySqlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5514
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5515
                self.scalarFunctionName()
                self.state = 5516
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CASE) | (1 << MySqlParser.CAST) | (1 << MySqlParser.CONVERT) | (1 << MySqlParser.CURRENT_USER) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.EXISTS) | (1 << MySqlParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySqlParser.IF - 64)) | (1 << (MySqlParser.INSERT - 64)) | (1 << (MySqlParser.INTERVAL - 64)) | (1 << (MySqlParser.LEFT - 64)) | (1 << (MySqlParser.NOT - 64)) | (1 << (MySqlParser.NULL_LITERAL - 64)) | (1 << (MySqlParser.REPLACE - 64)) | (1 << (MySqlParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (MySqlParser.TRUE - 151)) | (1 << (MySqlParser.VALUES - 151)) | (1 << (MySqlParser.DATE - 151)) | (1 << (MySqlParser.TIME - 151)) | (1 << (MySqlParser.TIMESTAMP - 151)) | (1 << (MySqlParser.DATETIME - 151)) | (1 << (MySqlParser.YEAR - 151)) | (1 << (MySqlParser.CHAR - 151)) | (1 << (MySqlParser.BINARY - 151)) | (1 << (MySqlParser.TEXT - 151)) | (1 << (MySqlParser.ENUM - 151)) | (1 << (MySqlParser.AVG - 151)) | (1 << (MySqlParser.BIT_AND - 151)) | (1 << (MySqlParser.BIT_OR - 151)) | (1 << (MySqlParser.BIT_XOR - 151)) | (1 << (MySqlParser.COUNT - 151)) | (1 << (MySqlParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (MySqlParser.MAX - 215)) | (1 << (MySqlParser.MIN - 215)) | (1 << (MySqlParser.STD - 215)) | (1 << (MySqlParser.STDDEV - 215)) | (1 << (MySqlParser.STDDEV_POP - 215)) | (1 << (MySqlParser.STDDEV_SAMP - 215)) | (1 << (MySqlParser.SUM - 215)) | (1 << (MySqlParser.VAR_POP - 215)) | (1 << (MySqlParser.VAR_SAMP - 215)) | (1 << (MySqlParser.VARIANCE - 215)) | (1 << (MySqlParser.CURRENT_DATE - 215)) | (1 << (MySqlParser.CURRENT_TIME - 215)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 215)) | (1 << (MySqlParser.LOCALTIME - 215)) | (1 << (MySqlParser.CURDATE - 215)) | (1 << (MySqlParser.CURTIME - 215)) | (1 << (MySqlParser.DATE_ADD - 215)) | (1 << (MySqlParser.DATE_SUB - 215)) | (1 << (MySqlParser.EXTRACT - 215)) | (1 << (MySqlParser.LOCALTIMESTAMP - 215)) | (1 << (MySqlParser.NOW - 215)) | (1 << (MySqlParser.POSITION - 215)) | (1 << (MySqlParser.SUBSTR - 215)) | (1 << (MySqlParser.SUBSTRING - 215)) | (1 << (MySqlParser.SYSDATE - 215)) | (1 << (MySqlParser.TRIM - 215)) | (1 << (MySqlParser.UTC_DATE - 215)) | (1 << (MySqlParser.UTC_TIME - 215)) | (1 << (MySqlParser.UTC_TIMESTAMP - 215)) | (1 << (MySqlParser.ACCOUNT - 215)) | (1 << (MySqlParser.ACTION - 215)) | (1 << (MySqlParser.AFTER - 215)) | (1 << (MySqlParser.AGGREGATE - 215)) | (1 << (MySqlParser.ALGORITHM - 215)) | (1 << (MySqlParser.ANY - 215)) | (1 << (MySqlParser.AT - 215)) | (1 << (MySqlParser.AUTHORS - 215)) | (1 << (MySqlParser.AUTOCOMMIT - 215)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 215)) | (1 << (MySqlParser.AUTO_INCREMENT - 215)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 215)) | (1 << (MySqlParser.BEGIN - 215)) | (1 << (MySqlParser.BINLOG - 215)) | (1 << (MySqlParser.BIT - 215)) | (1 << (MySqlParser.BLOCK - 215)) | (1 << (MySqlParser.BOOL - 215)) | (1 << (MySqlParser.BOOLEAN - 215)) | (1 << (MySqlParser.BTREE - 215)) | (1 << (MySqlParser.CACHE - 215)) | (1 << (MySqlParser.CASCADED - 215)) | (1 << (MySqlParser.CHAIN - 215)) | (1 << (MySqlParser.CHANGED - 215)) | (1 << (MySqlParser.CHANNEL - 215)) | (1 << (MySqlParser.CHECKSUM - 215)) | (1 << (MySqlParser.CIPHER - 215)) | (1 << (MySqlParser.CLIENT - 215)) | (1 << (MySqlParser.CLOSE - 215)) | (1 << (MySqlParser.COALESCE - 215)) | (1 << (MySqlParser.CODE - 215)) | (1 << (MySqlParser.COLUMNS - 215)) | (1 << (MySqlParser.COLUMN_FORMAT - 215)) | (1 << (MySqlParser.COMMENT - 215)) | (1 << (MySqlParser.COMMIT - 215)) | (1 << (MySqlParser.COMPACT - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (MySqlParser.COMPLETION - 279)) | (1 << (MySqlParser.COMPRESSED - 279)) | (1 << (MySqlParser.COMPRESSION - 279)) | (1 << (MySqlParser.CONCURRENT - 279)) | (1 << (MySqlParser.CONNECTION - 279)) | (1 << (MySqlParser.CONSISTENT - 279)) | (1 << (MySqlParser.CONTAINS - 279)) | (1 << (MySqlParser.CONTEXT - 279)) | (1 << (MySqlParser.CONTRIBUTORS - 279)) | (1 << (MySqlParser.COPY - 279)) | (1 << (MySqlParser.CPU - 279)) | (1 << (MySqlParser.DATA - 279)) | (1 << (MySqlParser.DATAFILE - 279)) | (1 << (MySqlParser.DEALLOCATE - 279)) | (1 << (MySqlParser.DEFAULT_AUTH - 279)) | (1 << (MySqlParser.DEFINER - 279)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 279)) | (1 << (MySqlParser.DES_KEY_FILE - 279)) | (1 << (MySqlParser.DIRECTORY - 279)) | (1 << (MySqlParser.DISABLE - 279)) | (1 << (MySqlParser.DISCARD - 279)) | (1 << (MySqlParser.DISK - 279)) | (1 << (MySqlParser.DO - 279)) | (1 << (MySqlParser.DUMPFILE - 279)) | (1 << (MySqlParser.DUPLICATE - 279)) | (1 << (MySqlParser.DYNAMIC - 279)) | (1 << (MySqlParser.ENABLE - 279)) | (1 << (MySqlParser.ENCRYPTION - 279)) | (1 << (MySqlParser.END - 279)) | (1 << (MySqlParser.ENDS - 279)) | (1 << (MySqlParser.ENGINE - 279)) | (1 << (MySqlParser.ENGINES - 279)) | (1 << (MySqlParser.ERROR - 279)) | (1 << (MySqlParser.ERRORS - 279)) | (1 << (MySqlParser.ESCAPE - 279)) | (1 << (MySqlParser.EVEN - 279)) | (1 << (MySqlParser.EVENT - 279)) | (1 << (MySqlParser.EVENTS - 279)) | (1 << (MySqlParser.EVERY - 279)) | (1 << (MySqlParser.EXCHANGE - 279)) | (1 << (MySqlParser.EXCLUSIVE - 279)) | (1 << (MySqlParser.EXPIRE - 279)) | (1 << (MySqlParser.EXPORT - 279)) | (1 << (MySqlParser.EXTENDED - 279)) | (1 << (MySqlParser.EXTENT_SIZE - 279)) | (1 << (MySqlParser.FAST - 279)) | (1 << (MySqlParser.FAULTS - 279)) | (1 << (MySqlParser.FIELDS - 279)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 279)) | (1 << (MySqlParser.FILTER - 279)) | (1 << (MySqlParser.FIRST - 279)) | (1 << (MySqlParser.FIXED - 279)) | (1 << (MySqlParser.FLUSH - 279)) | (1 << (MySqlParser.FOLLOWS - 279)) | (1 << (MySqlParser.FOUND - 279)) | (1 << (MySqlParser.FULL - 279)) | (1 << (MySqlParser.FUNCTION - 279)) | (1 << (MySqlParser.GENERAL - 279)) | (1 << (MySqlParser.GLOBAL - 279)) | (1 << (MySqlParser.GRANTS - 279)) | (1 << (MySqlParser.GROUP_REPLICATION - 279)) | (1 << (MySqlParser.HANDLER - 279)) | (1 << (MySqlParser.HASH - 279)) | (1 << (MySqlParser.HELP - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (MySqlParser.HOST - 343)) | (1 << (MySqlParser.HOSTS - 343)) | (1 << (MySqlParser.IDENTIFIED - 343)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 343)) | (1 << (MySqlParser.IMPORT - 343)) | (1 << (MySqlParser.INDEXES - 343)) | (1 << (MySqlParser.INITIAL_SIZE - 343)) | (1 << (MySqlParser.INPLACE - 343)) | (1 << (MySqlParser.INSERT_METHOD - 343)) | (1 << (MySqlParser.INSTALL - 343)) | (1 << (MySqlParser.INSTANCE - 343)) | (1 << (MySqlParser.INVOKER - 343)) | (1 << (MySqlParser.IO - 343)) | (1 << (MySqlParser.IO_THREAD - 343)) | (1 << (MySqlParser.IPC - 343)) | (1 << (MySqlParser.ISOLATION - 343)) | (1 << (MySqlParser.ISSUER - 343)) | (1 << (MySqlParser.JSON - 343)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 343)) | (1 << (MySqlParser.LANGUAGE - 343)) | (1 << (MySqlParser.LAST - 343)) | (1 << (MySqlParser.LEAVES - 343)) | (1 << (MySqlParser.LESS - 343)) | (1 << (MySqlParser.LEVEL - 343)) | (1 << (MySqlParser.LIST - 343)) | (1 << (MySqlParser.LOCAL - 343)) | (1 << (MySqlParser.LOGFILE - 343)) | (1 << (MySqlParser.LOGS - 343)) | (1 << (MySqlParser.MASTER - 343)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 343)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 343)) | (1 << (MySqlParser.MASTER_DELAY - 343)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (MySqlParser.MASTER_HOST - 343)) | (1 << (MySqlParser.MASTER_LOG_FILE - 343)) | (1 << (MySqlParser.MASTER_LOG_POS - 343)) | (1 << (MySqlParser.MASTER_PASSWORD - 343)) | (1 << (MySqlParser.MASTER_PORT - 343)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 343)) | (1 << (MySqlParser.MASTER_SSL - 343)) | (1 << (MySqlParser.MASTER_SSL_CA - 343)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 343)) | (1 << (MySqlParser.MASTER_SSL_CERT - 343)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 343)) | (1 << (MySqlParser.MASTER_SSL_CRL - 343)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 343)) | (1 << (MySqlParser.MASTER_SSL_KEY - 343)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 343)) | (1 << (MySqlParser.MASTER_USER - 343)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_ROWS - 343)) | (1 << (MySqlParser.MAX_SIZE - 343)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 343)) | (1 << (MySqlParser.MEDIUM - 343)) | (1 << (MySqlParser.MERGE - 343)) | (1 << (MySqlParser.MID - 343)) | (1 << (MySqlParser.MIGRATE - 343)) | (1 << (MySqlParser.MIN_ROWS - 343)) | (1 << (MySqlParser.MODE - 343)) | (1 << (MySqlParser.MODIFY - 343)) | (1 << (MySqlParser.MUTEX - 343)) | (1 << (MySqlParser.MYSQL - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (MySqlParser.NAME - 407)) | (1 << (MySqlParser.NAMES - 407)) | (1 << (MySqlParser.NCHAR - 407)) | (1 << (MySqlParser.NEVER - 407)) | (1 << (MySqlParser.NEXT - 407)) | (1 << (MySqlParser.NO - 407)) | (1 << (MySqlParser.NODEGROUP - 407)) | (1 << (MySqlParser.NONE - 407)) | (1 << (MySqlParser.OFFLINE - 407)) | (1 << (MySqlParser.OFFSET - 407)) | (1 << (MySqlParser.OJ - 407)) | (1 << (MySqlParser.OLD_PASSWORD - 407)) | (1 << (MySqlParser.ONE - 407)) | (1 << (MySqlParser.ONLINE - 407)) | (1 << (MySqlParser.ONLY - 407)) | (1 << (MySqlParser.OPEN - 407)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 407)) | (1 << (MySqlParser.OPTIONS - 407)) | (1 << (MySqlParser.OWNER - 407)) | (1 << (MySqlParser.PACK_KEYS - 407)) | (1 << (MySqlParser.PAGE - 407)) | (1 << (MySqlParser.PARSER - 407)) | (1 << (MySqlParser.PARTIAL - 407)) | (1 << (MySqlParser.PARTITIONING - 407)) | (1 << (MySqlParser.PARTITIONS - 407)) | (1 << (MySqlParser.PASSWORD - 407)) | (1 << (MySqlParser.PHASE - 407)) | (1 << (MySqlParser.PLUGIN - 407)) | (1 << (MySqlParser.PLUGIN_DIR - 407)) | (1 << (MySqlParser.PLUGINS - 407)) | (1 << (MySqlParser.PORT - 407)) | (1 << (MySqlParser.PRECEDES - 407)) | (1 << (MySqlParser.PREPARE - 407)) | (1 << (MySqlParser.PRESERVE - 407)) | (1 << (MySqlParser.PREV - 407)) | (1 << (MySqlParser.PROCESSLIST - 407)) | (1 << (MySqlParser.PROFILE - 407)) | (1 << (MySqlParser.PROFILES - 407)) | (1 << (MySqlParser.PROXY - 407)) | (1 << (MySqlParser.QUERY - 407)) | (1 << (MySqlParser.QUICK - 407)) | (1 << (MySqlParser.REBUILD - 407)) | (1 << (MySqlParser.RECOVER - 407)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 407)) | (1 << (MySqlParser.REDUNDANT - 407)) | (1 << (MySqlParser.RELAY - 407)) | (1 << (MySqlParser.RELAY_LOG_FILE - 407)) | (1 << (MySqlParser.RELAY_LOG_POS - 407)) | (1 << (MySqlParser.RELAYLOG - 407)) | (1 << (MySqlParser.REMOVE - 407)) | (1 << (MySqlParser.REORGANIZE - 407)) | (1 << (MySqlParser.REPAIR - 407)) | (1 << (MySqlParser.REPLICATE_DO_DB - 407)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 407)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 407)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (MySqlParser.REPLICATION - 407)) | (1 << (MySqlParser.RESET - 407)) | (1 << (MySqlParser.RESUME - 407)) | (1 << (MySqlParser.RETURNS - 407)) | (1 << (MySqlParser.ROLLBACK - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (MySqlParser.ROLLUP - 471)) | (1 << (MySqlParser.ROTATE - 471)) | (1 << (MySqlParser.ROW - 471)) | (1 << (MySqlParser.ROWS - 471)) | (1 << (MySqlParser.ROW_FORMAT - 471)) | (1 << (MySqlParser.SAVEPOINT - 471)) | (1 << (MySqlParser.SCHEDULE - 471)) | (1 << (MySqlParser.SECURITY - 471)) | (1 << (MySqlParser.SERVER - 471)) | (1 << (MySqlParser.SESSION - 471)) | (1 << (MySqlParser.SHARE - 471)) | (1 << (MySqlParser.SHARED - 471)) | (1 << (MySqlParser.SIGNED - 471)) | (1 << (MySqlParser.SIMPLE - 471)) | (1 << (MySqlParser.SLAVE - 471)) | (1 << (MySqlParser.SLOW - 471)) | (1 << (MySqlParser.SNAPSHOT - 471)) | (1 << (MySqlParser.SOCKET - 471)) | (1 << (MySqlParser.SOME - 471)) | (1 << (MySqlParser.SONAME - 471)) | (1 << (MySqlParser.SOUNDS - 471)) | (1 << (MySqlParser.SOURCE - 471)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 471)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 471)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 471)) | (1 << (MySqlParser.SQL_CACHE - 471)) | (1 << (MySqlParser.SQL_NO_CACHE - 471)) | (1 << (MySqlParser.SQL_THREAD - 471)) | (1 << (MySqlParser.START - 471)) | (1 << (MySqlParser.STARTS - 471)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 471)) | (1 << (MySqlParser.STATS_PERSISTENT - 471)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 471)) | (1 << (MySqlParser.STATUS - 471)) | (1 << (MySqlParser.STOP - 471)) | (1 << (MySqlParser.STORAGE - 471)) | (1 << (MySqlParser.STRING - 471)) | (1 << (MySqlParser.SUBJECT - 471)) | (1 << (MySqlParser.SUBPARTITION - 471)) | (1 << (MySqlParser.SUBPARTITIONS - 471)) | (1 << (MySqlParser.SUSPEND - 471)) | (1 << (MySqlParser.SWAPS - 471)) | (1 << (MySqlParser.SWITCHES - 471)) | (1 << (MySqlParser.TABLESPACE - 471)) | (1 << (MySqlParser.TEMPORARY - 471)) | (1 << (MySqlParser.TEMPTABLE - 471)) | (1 << (MySqlParser.THAN - 471)) | (1 << (MySqlParser.TRADITIONAL - 471)) | (1 << (MySqlParser.TRANSACTION - 471)) | (1 << (MySqlParser.TRIGGERS - 471)) | (1 << (MySqlParser.TRUNCATE - 471)) | (1 << (MySqlParser.UNDEFINED - 471)) | (1 << (MySqlParser.UNDOFILE - 471)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 471)) | (1 << (MySqlParser.UNINSTALL - 471)) | (1 << (MySqlParser.UNKNOWN - 471)) | (1 << (MySqlParser.UNTIL - 471)) | (1 << (MySqlParser.UPGRADE - 471)) | (1 << (MySqlParser.USER - 471)) | (1 << (MySqlParser.USE_FRM - 471)) | (1 << (MySqlParser.USER_RESOURCES - 471)) | (1 << (MySqlParser.VALIDATION - 471)) | (1 << (MySqlParser.VALUE - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (MySqlParser.VARIABLES - 535)) | (1 << (MySqlParser.VIEW - 535)) | (1 << (MySqlParser.WAIT - 535)) | (1 << (MySqlParser.WARNINGS - 535)) | (1 << (MySqlParser.WITHOUT - 535)) | (1 << (MySqlParser.WORK - 535)) | (1 << (MySqlParser.WRAPPER - 535)) | (1 << (MySqlParser.X509 - 535)) | (1 << (MySqlParser.XA - 535)) | (1 << (MySqlParser.XML - 535)) | (1 << (MySqlParser.QUARTER - 535)) | (1 << (MySqlParser.MONTH - 535)) | (1 << (MySqlParser.DAY - 535)) | (1 << (MySqlParser.HOUR - 535)) | (1 << (MySqlParser.MINUTE - 535)) | (1 << (MySqlParser.WEEK - 535)) | (1 << (MySqlParser.SECOND - 535)) | (1 << (MySqlParser.MICROSECOND - 535)) | (1 << (MySqlParser.TABLES - 535)) | (1 << (MySqlParser.ROUTINE - 535)) | (1 << (MySqlParser.EXECUTE - 535)) | (1 << (MySqlParser.FILE - 535)) | (1 << (MySqlParser.PROCESS - 535)) | (1 << (MySqlParser.RELOAD - 535)) | (1 << (MySqlParser.SHUTDOWN - 535)) | (1 << (MySqlParser.SUPER - 535)) | (1 << (MySqlParser.PRIVILEGES - 535)) | (1 << (MySqlParser.ARMSCII8 - 535)) | (1 << (MySqlParser.ASCII - 535)) | (1 << (MySqlParser.BIG5 - 535)) | (1 << (MySqlParser.CP1250 - 535)) | (1 << (MySqlParser.CP1251 - 535)) | (1 << (MySqlParser.CP1256 - 535)) | (1 << (MySqlParser.CP1257 - 535)) | (1 << (MySqlParser.CP850 - 535)) | (1 << (MySqlParser.CP852 - 535)) | (1 << (MySqlParser.CP866 - 535)) | (1 << (MySqlParser.CP932 - 535)) | (1 << (MySqlParser.DEC8 - 535)) | (1 << (MySqlParser.EUCJPMS - 535)) | (1 << (MySqlParser.EUCKR - 535)) | (1 << (MySqlParser.GB2312 - 535)) | (1 << (MySqlParser.GBK - 535)) | (1 << (MySqlParser.GEOSTD8 - 535)) | (1 << (MySqlParser.GREEK - 535)) | (1 << (MySqlParser.HEBREW - 535)) | (1 << (MySqlParser.HP8 - 535)) | (1 << (MySqlParser.KEYBCS2 - 535)) | (1 << (MySqlParser.KOI8R - 535)) | (1 << (MySqlParser.KOI8U - 535)) | (1 << (MySqlParser.LATIN1 - 535)) | (1 << (MySqlParser.LATIN2 - 535)) | (1 << (MySqlParser.LATIN5 - 535)) | (1 << (MySqlParser.LATIN7 - 535)) | (1 << (MySqlParser.MACCE - 535)) | (1 << (MySqlParser.MACROMAN - 535)) | (1 << (MySqlParser.SJIS - 535)) | (1 << (MySqlParser.SWE7 - 535)) | (1 << (MySqlParser.TIS620 - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (MySqlParser.UCS2 - 599)) | (1 << (MySqlParser.UJIS - 599)) | (1 << (MySqlParser.UTF16 - 599)) | (1 << (MySqlParser.UTF16LE - 599)) | (1 << (MySqlParser.UTF32 - 599)) | (1 << (MySqlParser.UTF8 - 599)) | (1 << (MySqlParser.UTF8MB3 - 599)) | (1 << (MySqlParser.UTF8MB4 - 599)) | (1 << (MySqlParser.ARCHIVE - 599)) | (1 << (MySqlParser.BLACKHOLE - 599)) | (1 << (MySqlParser.CSV - 599)) | (1 << (MySqlParser.FEDERATED - 599)) | (1 << (MySqlParser.INNODB - 599)) | (1 << (MySqlParser.MEMORY - 599)) | (1 << (MySqlParser.MRG_MYISAM - 599)) | (1 << (MySqlParser.MYISAM - 599)) | (1 << (MySqlParser.NDB - 599)) | (1 << (MySqlParser.NDBCLUSTER - 599)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 599)) | (1 << (MySqlParser.REPEATABLE - 599)) | (1 << (MySqlParser.COMMITTED - 599)) | (1 << (MySqlParser.UNCOMMITTED - 599)) | (1 << (MySqlParser.SERIALIZABLE - 599)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 599)) | (1 << (MySqlParser.LINESTRING - 599)) | (1 << (MySqlParser.MULTILINESTRING - 599)) | (1 << (MySqlParser.MULTIPOINT - 599)) | (1 << (MySqlParser.MULTIPOLYGON - 599)) | (1 << (MySqlParser.POINT - 599)) | (1 << (MySqlParser.POLYGON - 599)) | (1 << (MySqlParser.ABS - 599)) | (1 << (MySqlParser.ACOS - 599)) | (1 << (MySqlParser.ADDDATE - 599)) | (1 << (MySqlParser.ADDTIME - 599)) | (1 << (MySqlParser.AES_DECRYPT - 599)) | (1 << (MySqlParser.AES_ENCRYPT - 599)) | (1 << (MySqlParser.AREA - 599)) | (1 << (MySqlParser.ASBINARY - 599)) | (1 << (MySqlParser.ASIN - 599)) | (1 << (MySqlParser.ASTEXT - 599)) | (1 << (MySqlParser.ASWKB - 599)) | (1 << (MySqlParser.ASWKT - 599)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 599)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 599)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 599)) | (1 << (MySqlParser.ATAN - 599)) | (1 << (MySqlParser.ATAN2 - 599)) | (1 << (MySqlParser.BENCHMARK - 599)) | (1 << (MySqlParser.BIN - 599)) | (1 << (MySqlParser.BIT_COUNT - 599)) | (1 << (MySqlParser.BIT_LENGTH - 599)) | (1 << (MySqlParser.BUFFER - 599)) | (1 << (MySqlParser.CEIL - 599)) | (1 << (MySqlParser.CEILING - 599)) | (1 << (MySqlParser.CENTROID - 599)) | (1 << (MySqlParser.CHARACTER_LENGTH - 599)) | (1 << (MySqlParser.CHARSET - 599)) | (1 << (MySqlParser.CHAR_LENGTH - 599)) | (1 << (MySqlParser.COERCIBILITY - 599)) | (1 << (MySqlParser.COLLATION - 599)) | (1 << (MySqlParser.COMPRESS - 599)) | (1 << (MySqlParser.CONCAT - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (MySqlParser.CONCAT_WS - 663)) | (1 << (MySqlParser.CONNECTION_ID - 663)) | (1 << (MySqlParser.CONV - 663)) | (1 << (MySqlParser.CONVERT_TZ - 663)) | (1 << (MySqlParser.COS - 663)) | (1 << (MySqlParser.COT - 663)) | (1 << (MySqlParser.CRC32 - 663)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 663)) | (1 << (MySqlParser.CREATE_DIGEST - 663)) | (1 << (MySqlParser.CROSSES - 663)) | (1 << (MySqlParser.DATEDIFF - 663)) | (1 << (MySqlParser.DATE_FORMAT - 663)) | (1 << (MySqlParser.DAYNAME - 663)) | (1 << (MySqlParser.DAYOFMONTH - 663)) | (1 << (MySqlParser.DAYOFWEEK - 663)) | (1 << (MySqlParser.DAYOFYEAR - 663)) | (1 << (MySqlParser.DECODE - 663)) | (1 << (MySqlParser.DEGREES - 663)) | (1 << (MySqlParser.DES_DECRYPT - 663)) | (1 << (MySqlParser.DES_ENCRYPT - 663)) | (1 << (MySqlParser.DIMENSION - 663)) | (1 << (MySqlParser.DISJOINT - 663)) | (1 << (MySqlParser.ELT - 663)) | (1 << (MySqlParser.ENCODE - 663)) | (1 << (MySqlParser.ENCRYPT - 663)) | (1 << (MySqlParser.ENDPOINT - 663)) | (1 << (MySqlParser.ENVELOPE - 663)) | (1 << (MySqlParser.EQUALS - 663)) | (1 << (MySqlParser.EXP - 663)) | (1 << (MySqlParser.EXPORT_SET - 663)) | (1 << (MySqlParser.EXTERIORRING - 663)) | (1 << (MySqlParser.EXTRACTVALUE - 663)) | (1 << (MySqlParser.FIELD - 663)) | (1 << (MySqlParser.FIND_IN_SET - 663)) | (1 << (MySqlParser.FLOOR - 663)) | (1 << (MySqlParser.FORMAT - 663)) | (1 << (MySqlParser.FOUND_ROWS - 663)) | (1 << (MySqlParser.FROM_BASE64 - 663)) | (1 << (MySqlParser.FROM_DAYS - 663)) | (1 << (MySqlParser.FROM_UNIXTIME - 663)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 663)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 663)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYN - 663)) | (1 << (MySqlParser.GEOMETRYTYPE - 663)) | (1 << (MySqlParser.GEOMFROMTEXT - 663)) | (1 << (MySqlParser.GEOMFROMWKB - 663)) | (1 << (MySqlParser.GET_FORMAT - 663)) | (1 << (MySqlParser.GET_LOCK - 663)) | (1 << (MySqlParser.GLENGTH - 663)) | (1 << (MySqlParser.GREATEST - 663)) | (1 << (MySqlParser.GTID_SUBSET - 663)) | (1 << (MySqlParser.GTID_SUBTRACT - 663)) | (1 << (MySqlParser.HEX - 663)) | (1 << (MySqlParser.IFNULL - 663)) | (1 << (MySqlParser.INET6_ATON - 663)) | (1 << (MySqlParser.INET6_NTOA - 663)) | (1 << (MySqlParser.INET_ATON - 663)) | (1 << (MySqlParser.INET_NTOA - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (MySqlParser.INSTR - 727)) | (1 << (MySqlParser.INTERIORRINGN - 727)) | (1 << (MySqlParser.INTERSECTS - 727)) | (1 << (MySqlParser.ISCLOSED - 727)) | (1 << (MySqlParser.ISEMPTY - 727)) | (1 << (MySqlParser.ISNULL - 727)) | (1 << (MySqlParser.ISSIMPLE - 727)) | (1 << (MySqlParser.IS_FREE_LOCK - 727)) | (1 << (MySqlParser.IS_IPV4 - 727)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 727)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 727)) | (1 << (MySqlParser.IS_IPV6 - 727)) | (1 << (MySqlParser.IS_USED_LOCK - 727)) | (1 << (MySqlParser.LAST_INSERT_ID - 727)) | (1 << (MySqlParser.LCASE - 727)) | (1 << (MySqlParser.LEAST - 727)) | (1 << (MySqlParser.LENGTH - 727)) | (1 << (MySqlParser.LINEFROMTEXT - 727)) | (1 << (MySqlParser.LINEFROMWKB - 727)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 727)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 727)) | (1 << (MySqlParser.LN - 727)) | (1 << (MySqlParser.LOAD_FILE - 727)) | (1 << (MySqlParser.LOCATE - 727)) | (1 << (MySqlParser.LOG - 727)) | (1 << (MySqlParser.LOG10 - 727)) | (1 << (MySqlParser.LOG2 - 727)) | (1 << (MySqlParser.LOWER - 727)) | (1 << (MySqlParser.LPAD - 727)) | (1 << (MySqlParser.LTRIM - 727)) | (1 << (MySqlParser.MAKEDATE - 727)) | (1 << (MySqlParser.MAKETIME - 727)) | (1 << (MySqlParser.MAKE_SET - 727)) | (1 << (MySqlParser.MASTER_POS_WAIT - 727)) | (1 << (MySqlParser.MBRCONTAINS - 727)) | (1 << (MySqlParser.MBRDISJOINT - 727)) | (1 << (MySqlParser.MBREQUAL - 727)) | (1 << (MySqlParser.MBRINTERSECTS - 727)) | (1 << (MySqlParser.MBROVERLAPS - 727)) | (1 << (MySqlParser.MBRTOUCHES - 727)) | (1 << (MySqlParser.MBRWITHIN - 727)) | (1 << (MySqlParser.MD5 - 727)) | (1 << (MySqlParser.MLINEFROMTEXT - 727)) | (1 << (MySqlParser.MLINEFROMWKB - 727)) | (1 << (MySqlParser.MONTHNAME - 727)) | (1 << (MySqlParser.MPOINTFROMTEXT - 727)) | (1 << (MySqlParser.MPOINTFROMWKB - 727)) | (1 << (MySqlParser.MPOLYFROMTEXT - 727)) | (1 << (MySqlParser.MPOLYFROMWKB - 727)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 727)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 727)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (MySqlParser.NAME_CONST - 727)) | (1 << (MySqlParser.NULLIF - 727)) | (1 << (MySqlParser.NUMGEOMETRIES - 727)) | (1 << (MySqlParser.NUMINTERIORRINGS - 727)) | (1 << (MySqlParser.NUMPOINTS - 727)) | (1 << (MySqlParser.OCT - 727)) | (1 << (MySqlParser.OCTET_LENGTH - 727)) | (1 << (MySqlParser.ORD - 727)) | (1 << (MySqlParser.OVERLAPS - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (MySqlParser.PERIOD_ADD - 791)) | (1 << (MySqlParser.PERIOD_DIFF - 791)) | (1 << (MySqlParser.PI - 791)) | (1 << (MySqlParser.POINTFROMTEXT - 791)) | (1 << (MySqlParser.POINTFROMWKB - 791)) | (1 << (MySqlParser.POINTN - 791)) | (1 << (MySqlParser.POLYFROMTEXT - 791)) | (1 << (MySqlParser.POLYFROMWKB - 791)) | (1 << (MySqlParser.POLYGONFROMTEXT - 791)) | (1 << (MySqlParser.POLYGONFROMWKB - 791)) | (1 << (MySqlParser.POW - 791)) | (1 << (MySqlParser.POWER - 791)) | (1 << (MySqlParser.QUOTE - 791)) | (1 << (MySqlParser.RADIANS - 791)) | (1 << (MySqlParser.RAND - 791)) | (1 << (MySqlParser.RANDOM_BYTES - 791)) | (1 << (MySqlParser.RELEASE_LOCK - 791)) | (1 << (MySqlParser.REVERSE - 791)) | (1 << (MySqlParser.ROUND - 791)) | (1 << (MySqlParser.ROW_COUNT - 791)) | (1 << (MySqlParser.RPAD - 791)) | (1 << (MySqlParser.RTRIM - 791)) | (1 << (MySqlParser.SEC_TO_TIME - 791)) | (1 << (MySqlParser.SESSION_USER - 791)) | (1 << (MySqlParser.SHA - 791)) | (1 << (MySqlParser.SHA1 - 791)) | (1 << (MySqlParser.SHA2 - 791)) | (1 << (MySqlParser.SIGN - 791)) | (1 << (MySqlParser.SIN - 791)) | (1 << (MySqlParser.SLEEP - 791)) | (1 << (MySqlParser.SOUNDEX - 791)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (MySqlParser.SQRT - 791)) | (1 << (MySqlParser.SRID - 791)) | (1 << (MySqlParser.STARTPOINT - 791)) | (1 << (MySqlParser.STRCMP - 791)) | (1 << (MySqlParser.STR_TO_DATE - 791)) | (1 << (MySqlParser.ST_AREA - 791)) | (1 << (MySqlParser.ST_ASBINARY - 791)) | (1 << (MySqlParser.ST_ASTEXT - 791)) | (1 << (MySqlParser.ST_ASWKB - 791)) | (1 << (MySqlParser.ST_ASWKT - 791)) | (1 << (MySqlParser.ST_BUFFER - 791)) | (1 << (MySqlParser.ST_CENTROID - 791)) | (1 << (MySqlParser.ST_CONTAINS - 791)) | (1 << (MySqlParser.ST_CROSSES - 791)) | (1 << (MySqlParser.ST_DIFFERENCE - 791)) | (1 << (MySqlParser.ST_DIMENSION - 791)) | (1 << (MySqlParser.ST_DISJOINT - 791)) | (1 << (MySqlParser.ST_DISTANCE - 791)) | (1 << (MySqlParser.ST_ENDPOINT - 791)) | (1 << (MySqlParser.ST_ENVELOPE - 791)) | (1 << (MySqlParser.ST_EQUALS - 791)) | (1 << (MySqlParser.ST_EXTERIORRING - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYN - 791)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 791)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (MySqlParser.ST_GEOMFROMWKB - 855)) | (1 << (MySqlParser.ST_INTERIORRINGN - 855)) | (1 << (MySqlParser.ST_INTERSECTION - 855)) | (1 << (MySqlParser.ST_INTERSECTS - 855)) | (1 << (MySqlParser.ST_ISCLOSED - 855)) | (1 << (MySqlParser.ST_ISEMPTY - 855)) | (1 << (MySqlParser.ST_ISSIMPLE - 855)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 855)) | (1 << (MySqlParser.ST_LINEFROMWKB - 855)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 855)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 855)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 855)) | (1 << (MySqlParser.ST_NUMPOINTS - 855)) | (1 << (MySqlParser.ST_OVERLAPS - 855)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 855)) | (1 << (MySqlParser.ST_POINTFROMWKB - 855)) | (1 << (MySqlParser.ST_POINTN - 855)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 855)) | (1 << (MySqlParser.ST_POLYFROMWKB - 855)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 855)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 855)) | (1 << (MySqlParser.ST_SRID - 855)) | (1 << (MySqlParser.ST_STARTPOINT - 855)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 855)) | (1 << (MySqlParser.ST_TOUCHES - 855)) | (1 << (MySqlParser.ST_UNION - 855)) | (1 << (MySqlParser.ST_WITHIN - 855)) | (1 << (MySqlParser.ST_X - 855)) | (1 << (MySqlParser.ST_Y - 855)) | (1 << (MySqlParser.SUBDATE - 855)) | (1 << (MySqlParser.SUBSTRING_INDEX - 855)) | (1 << (MySqlParser.SUBTIME - 855)) | (1 << (MySqlParser.SYSTEM_USER - 855)) | (1 << (MySqlParser.TAN - 855)) | (1 << (MySqlParser.TIMEDIFF - 855)) | (1 << (MySqlParser.TIMESTAMPADD - 855)) | (1 << (MySqlParser.TIMESTAMPDIFF - 855)) | (1 << (MySqlParser.TIME_FORMAT - 855)) | (1 << (MySqlParser.TIME_TO_SEC - 855)) | (1 << (MySqlParser.TOUCHES - 855)) | (1 << (MySqlParser.TO_BASE64 - 855)) | (1 << (MySqlParser.TO_DAYS - 855)) | (1 << (MySqlParser.TO_SECONDS - 855)) | (1 << (MySqlParser.UCASE - 855)) | (1 << (MySqlParser.UNCOMPRESS - 855)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (MySqlParser.UNHEX - 855)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 855)) | (1 << (MySqlParser.UPDATEXML - 855)) | (1 << (MySqlParser.UPPER - 855)) | (1 << (MySqlParser.UUID - 855)) | (1 << (MySqlParser.UUID_SHORT - 855)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (MySqlParser.VERSION - 855)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (MySqlParser.WEEKDAY - 855)) | (1 << (MySqlParser.WEEKOFYEAR - 855)) | (1 << (MySqlParser.WEIGHT_STRING - 855)) | (1 << (MySqlParser.WITHIN - 855)) | (1 << (MySqlParser.YEARWEEK - 855)) | (1 << (MySqlParser.Y_FUNCTION - 855)) | (1 << (MySqlParser.X_FUNCTION - 855)))) != 0) or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (MySqlParser.PLUS - 931)) | (1 << (MySqlParser.MINUS - 931)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 931)) | (1 << (MySqlParser.BIT_NOT_OP - 931)) | (1 << (MySqlParser.LR_BRACKET - 931)) | (1 << (MySqlParser.ZERO_DECIMAL - 931)) | (1 << (MySqlParser.ONE_DECIMAL - 931)) | (1 << (MySqlParser.TWO_DECIMAL - 931)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 931)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 931)) | (1 << (MySqlParser.STRING_LITERAL - 931)) | (1 << (MySqlParser.DECIMAL_LITERAL - 931)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 931)) | (1 << (MySqlParser.REAL_LITERAL - 931)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 931)) | (1 << (MySqlParser.BIT_STRING - 931)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 931)) | (1 << (MySqlParser.ID - 931)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 931)) | (1 << (MySqlParser.LOCAL_ID - 931)) | (1 << (MySqlParser.GLOBAL_ID - 931)))) != 0):
                    self.state = 5517
                    self.functionArgs()


                self.state = 5520
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5522
                self.fullId()
                self.state = 5523
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << MySqlParser.CASE) | (1 << MySqlParser.CAST) | (1 << MySqlParser.CONVERT) | (1 << MySqlParser.CURRENT_USER) | (1 << MySqlParser.DATABASE) | (1 << MySqlParser.EXISTS) | (1 << MySqlParser.FALSE))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (MySqlParser.IF - 64)) | (1 << (MySqlParser.INSERT - 64)) | (1 << (MySqlParser.INTERVAL - 64)) | (1 << (MySqlParser.LEFT - 64)) | (1 << (MySqlParser.NOT - 64)) | (1 << (MySqlParser.NULL_LITERAL - 64)) | (1 << (MySqlParser.REPLACE - 64)) | (1 << (MySqlParser.RIGHT - 64)))) != 0) or ((((_la - 151)) & ~0x3f) == 0 and ((1 << (_la - 151)) & ((1 << (MySqlParser.TRUE - 151)) | (1 << (MySqlParser.VALUES - 151)) | (1 << (MySqlParser.DATE - 151)) | (1 << (MySqlParser.TIME - 151)) | (1 << (MySqlParser.TIMESTAMP - 151)) | (1 << (MySqlParser.DATETIME - 151)) | (1 << (MySqlParser.YEAR - 151)) | (1 << (MySqlParser.CHAR - 151)) | (1 << (MySqlParser.BINARY - 151)) | (1 << (MySqlParser.TEXT - 151)) | (1 << (MySqlParser.ENUM - 151)) | (1 << (MySqlParser.AVG - 151)) | (1 << (MySqlParser.BIT_AND - 151)) | (1 << (MySqlParser.BIT_OR - 151)) | (1 << (MySqlParser.BIT_XOR - 151)) | (1 << (MySqlParser.COUNT - 151)) | (1 << (MySqlParser.GROUP_CONCAT - 151)))) != 0) or ((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & ((1 << (MySqlParser.MAX - 215)) | (1 << (MySqlParser.MIN - 215)) | (1 << (MySqlParser.STD - 215)) | (1 << (MySqlParser.STDDEV - 215)) | (1 << (MySqlParser.STDDEV_POP - 215)) | (1 << (MySqlParser.STDDEV_SAMP - 215)) | (1 << (MySqlParser.SUM - 215)) | (1 << (MySqlParser.VAR_POP - 215)) | (1 << (MySqlParser.VAR_SAMP - 215)) | (1 << (MySqlParser.VARIANCE - 215)) | (1 << (MySqlParser.CURRENT_DATE - 215)) | (1 << (MySqlParser.CURRENT_TIME - 215)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 215)) | (1 << (MySqlParser.LOCALTIME - 215)) | (1 << (MySqlParser.CURDATE - 215)) | (1 << (MySqlParser.CURTIME - 215)) | (1 << (MySqlParser.DATE_ADD - 215)) | (1 << (MySqlParser.DATE_SUB - 215)) | (1 << (MySqlParser.EXTRACT - 215)) | (1 << (MySqlParser.LOCALTIMESTAMP - 215)) | (1 << (MySqlParser.NOW - 215)) | (1 << (MySqlParser.POSITION - 215)) | (1 << (MySqlParser.SUBSTR - 215)) | (1 << (MySqlParser.SUBSTRING - 215)) | (1 << (MySqlParser.SYSDATE - 215)) | (1 << (MySqlParser.TRIM - 215)) | (1 << (MySqlParser.UTC_DATE - 215)) | (1 << (MySqlParser.UTC_TIME - 215)) | (1 << (MySqlParser.UTC_TIMESTAMP - 215)) | (1 << (MySqlParser.ACCOUNT - 215)) | (1 << (MySqlParser.ACTION - 215)) | (1 << (MySqlParser.AFTER - 215)) | (1 << (MySqlParser.AGGREGATE - 215)) | (1 << (MySqlParser.ALGORITHM - 215)) | (1 << (MySqlParser.ANY - 215)) | (1 << (MySqlParser.AT - 215)) | (1 << (MySqlParser.AUTHORS - 215)) | (1 << (MySqlParser.AUTOCOMMIT - 215)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 215)) | (1 << (MySqlParser.AUTO_INCREMENT - 215)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 215)) | (1 << (MySqlParser.BEGIN - 215)) | (1 << (MySqlParser.BINLOG - 215)) | (1 << (MySqlParser.BIT - 215)) | (1 << (MySqlParser.BLOCK - 215)) | (1 << (MySqlParser.BOOL - 215)) | (1 << (MySqlParser.BOOLEAN - 215)) | (1 << (MySqlParser.BTREE - 215)) | (1 << (MySqlParser.CACHE - 215)) | (1 << (MySqlParser.CASCADED - 215)) | (1 << (MySqlParser.CHAIN - 215)) | (1 << (MySqlParser.CHANGED - 215)) | (1 << (MySqlParser.CHANNEL - 215)) | (1 << (MySqlParser.CHECKSUM - 215)) | (1 << (MySqlParser.CIPHER - 215)) | (1 << (MySqlParser.CLIENT - 215)) | (1 << (MySqlParser.CLOSE - 215)) | (1 << (MySqlParser.COALESCE - 215)) | (1 << (MySqlParser.CODE - 215)) | (1 << (MySqlParser.COLUMNS - 215)) | (1 << (MySqlParser.COLUMN_FORMAT - 215)) | (1 << (MySqlParser.COMMENT - 215)) | (1 << (MySqlParser.COMMIT - 215)) | (1 << (MySqlParser.COMPACT - 215)))) != 0) or ((((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & ((1 << (MySqlParser.COMPLETION - 279)) | (1 << (MySqlParser.COMPRESSED - 279)) | (1 << (MySqlParser.COMPRESSION - 279)) | (1 << (MySqlParser.CONCURRENT - 279)) | (1 << (MySqlParser.CONNECTION - 279)) | (1 << (MySqlParser.CONSISTENT - 279)) | (1 << (MySqlParser.CONTAINS - 279)) | (1 << (MySqlParser.CONTEXT - 279)) | (1 << (MySqlParser.CONTRIBUTORS - 279)) | (1 << (MySqlParser.COPY - 279)) | (1 << (MySqlParser.CPU - 279)) | (1 << (MySqlParser.DATA - 279)) | (1 << (MySqlParser.DATAFILE - 279)) | (1 << (MySqlParser.DEALLOCATE - 279)) | (1 << (MySqlParser.DEFAULT_AUTH - 279)) | (1 << (MySqlParser.DEFINER - 279)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 279)) | (1 << (MySqlParser.DES_KEY_FILE - 279)) | (1 << (MySqlParser.DIRECTORY - 279)) | (1 << (MySqlParser.DISABLE - 279)) | (1 << (MySqlParser.DISCARD - 279)) | (1 << (MySqlParser.DISK - 279)) | (1 << (MySqlParser.DO - 279)) | (1 << (MySqlParser.DUMPFILE - 279)) | (1 << (MySqlParser.DUPLICATE - 279)) | (1 << (MySqlParser.DYNAMIC - 279)) | (1 << (MySqlParser.ENABLE - 279)) | (1 << (MySqlParser.ENCRYPTION - 279)) | (1 << (MySqlParser.END - 279)) | (1 << (MySqlParser.ENDS - 279)) | (1 << (MySqlParser.ENGINE - 279)) | (1 << (MySqlParser.ENGINES - 279)) | (1 << (MySqlParser.ERROR - 279)) | (1 << (MySqlParser.ERRORS - 279)) | (1 << (MySqlParser.ESCAPE - 279)) | (1 << (MySqlParser.EVEN - 279)) | (1 << (MySqlParser.EVENT - 279)) | (1 << (MySqlParser.EVENTS - 279)) | (1 << (MySqlParser.EVERY - 279)) | (1 << (MySqlParser.EXCHANGE - 279)) | (1 << (MySqlParser.EXCLUSIVE - 279)) | (1 << (MySqlParser.EXPIRE - 279)) | (1 << (MySqlParser.EXPORT - 279)) | (1 << (MySqlParser.EXTENDED - 279)) | (1 << (MySqlParser.EXTENT_SIZE - 279)) | (1 << (MySqlParser.FAST - 279)) | (1 << (MySqlParser.FAULTS - 279)) | (1 << (MySqlParser.FIELDS - 279)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 279)) | (1 << (MySqlParser.FILTER - 279)) | (1 << (MySqlParser.FIRST - 279)) | (1 << (MySqlParser.FIXED - 279)) | (1 << (MySqlParser.FLUSH - 279)) | (1 << (MySqlParser.FOLLOWS - 279)) | (1 << (MySqlParser.FOUND - 279)) | (1 << (MySqlParser.FULL - 279)) | (1 << (MySqlParser.FUNCTION - 279)) | (1 << (MySqlParser.GENERAL - 279)) | (1 << (MySqlParser.GLOBAL - 279)) | (1 << (MySqlParser.GRANTS - 279)) | (1 << (MySqlParser.GROUP_REPLICATION - 279)) | (1 << (MySqlParser.HANDLER - 279)) | (1 << (MySqlParser.HASH - 279)) | (1 << (MySqlParser.HELP - 279)))) != 0) or ((((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & ((1 << (MySqlParser.HOST - 343)) | (1 << (MySqlParser.HOSTS - 343)) | (1 << (MySqlParser.IDENTIFIED - 343)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 343)) | (1 << (MySqlParser.IMPORT - 343)) | (1 << (MySqlParser.INDEXES - 343)) | (1 << (MySqlParser.INITIAL_SIZE - 343)) | (1 << (MySqlParser.INPLACE - 343)) | (1 << (MySqlParser.INSERT_METHOD - 343)) | (1 << (MySqlParser.INSTALL - 343)) | (1 << (MySqlParser.INSTANCE - 343)) | (1 << (MySqlParser.INVOKER - 343)) | (1 << (MySqlParser.IO - 343)) | (1 << (MySqlParser.IO_THREAD - 343)) | (1 << (MySqlParser.IPC - 343)) | (1 << (MySqlParser.ISOLATION - 343)) | (1 << (MySqlParser.ISSUER - 343)) | (1 << (MySqlParser.JSON - 343)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 343)) | (1 << (MySqlParser.LANGUAGE - 343)) | (1 << (MySqlParser.LAST - 343)) | (1 << (MySqlParser.LEAVES - 343)) | (1 << (MySqlParser.LESS - 343)) | (1 << (MySqlParser.LEVEL - 343)) | (1 << (MySqlParser.LIST - 343)) | (1 << (MySqlParser.LOCAL - 343)) | (1 << (MySqlParser.LOGFILE - 343)) | (1 << (MySqlParser.LOGS - 343)) | (1 << (MySqlParser.MASTER - 343)) | (1 << (MySqlParser.MASTER_AUTO_POSITION - 343)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 343)) | (1 << (MySqlParser.MASTER_DELAY - 343)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 343)) | (1 << (MySqlParser.MASTER_HOST - 343)) | (1 << (MySqlParser.MASTER_LOG_FILE - 343)) | (1 << (MySqlParser.MASTER_LOG_POS - 343)) | (1 << (MySqlParser.MASTER_PASSWORD - 343)) | (1 << (MySqlParser.MASTER_PORT - 343)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 343)) | (1 << (MySqlParser.MASTER_SSL - 343)) | (1 << (MySqlParser.MASTER_SSL_CA - 343)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 343)) | (1 << (MySqlParser.MASTER_SSL_CERT - 343)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 343)) | (1 << (MySqlParser.MASTER_SSL_CRL - 343)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 343)) | (1 << (MySqlParser.MASTER_SSL_KEY - 343)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 343)) | (1 << (MySqlParser.MASTER_USER - 343)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_ROWS - 343)) | (1 << (MySqlParser.MAX_SIZE - 343)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 343)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 343)) | (1 << (MySqlParser.MEDIUM - 343)) | (1 << (MySqlParser.MERGE - 343)) | (1 << (MySqlParser.MID - 343)) | (1 << (MySqlParser.MIGRATE - 343)) | (1 << (MySqlParser.MIN_ROWS - 343)) | (1 << (MySqlParser.MODE - 343)) | (1 << (MySqlParser.MODIFY - 343)) | (1 << (MySqlParser.MUTEX - 343)) | (1 << (MySqlParser.MYSQL - 343)))) != 0) or ((((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & ((1 << (MySqlParser.NAME - 407)) | (1 << (MySqlParser.NAMES - 407)) | (1 << (MySqlParser.NCHAR - 407)) | (1 << (MySqlParser.NEVER - 407)) | (1 << (MySqlParser.NEXT - 407)) | (1 << (MySqlParser.NO - 407)) | (1 << (MySqlParser.NODEGROUP - 407)) | (1 << (MySqlParser.NONE - 407)) | (1 << (MySqlParser.OFFLINE - 407)) | (1 << (MySqlParser.OFFSET - 407)) | (1 << (MySqlParser.OJ - 407)) | (1 << (MySqlParser.OLD_PASSWORD - 407)) | (1 << (MySqlParser.ONE - 407)) | (1 << (MySqlParser.ONLINE - 407)) | (1 << (MySqlParser.ONLY - 407)) | (1 << (MySqlParser.OPEN - 407)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 407)) | (1 << (MySqlParser.OPTIONS - 407)) | (1 << (MySqlParser.OWNER - 407)) | (1 << (MySqlParser.PACK_KEYS - 407)) | (1 << (MySqlParser.PAGE - 407)) | (1 << (MySqlParser.PARSER - 407)) | (1 << (MySqlParser.PARTIAL - 407)) | (1 << (MySqlParser.PARTITIONING - 407)) | (1 << (MySqlParser.PARTITIONS - 407)) | (1 << (MySqlParser.PASSWORD - 407)) | (1 << (MySqlParser.PHASE - 407)) | (1 << (MySqlParser.PLUGIN - 407)) | (1 << (MySqlParser.PLUGIN_DIR - 407)) | (1 << (MySqlParser.PLUGINS - 407)) | (1 << (MySqlParser.PORT - 407)) | (1 << (MySqlParser.PRECEDES - 407)) | (1 << (MySqlParser.PREPARE - 407)) | (1 << (MySqlParser.PRESERVE - 407)) | (1 << (MySqlParser.PREV - 407)) | (1 << (MySqlParser.PROCESSLIST - 407)) | (1 << (MySqlParser.PROFILE - 407)) | (1 << (MySqlParser.PROFILES - 407)) | (1 << (MySqlParser.PROXY - 407)) | (1 << (MySqlParser.QUERY - 407)) | (1 << (MySqlParser.QUICK - 407)) | (1 << (MySqlParser.REBUILD - 407)) | (1 << (MySqlParser.RECOVER - 407)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 407)) | (1 << (MySqlParser.REDUNDANT - 407)) | (1 << (MySqlParser.RELAY - 407)) | (1 << (MySqlParser.RELAY_LOG_FILE - 407)) | (1 << (MySqlParser.RELAY_LOG_POS - 407)) | (1 << (MySqlParser.RELAYLOG - 407)) | (1 << (MySqlParser.REMOVE - 407)) | (1 << (MySqlParser.REORGANIZE - 407)) | (1 << (MySqlParser.REPAIR - 407)) | (1 << (MySqlParser.REPLICATE_DO_DB - 407)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 407)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 407)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 407)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 407)) | (1 << (MySqlParser.REPLICATION - 407)) | (1 << (MySqlParser.RESET - 407)) | (1 << (MySqlParser.RESUME - 407)) | (1 << (MySqlParser.RETURNS - 407)) | (1 << (MySqlParser.ROLLBACK - 407)))) != 0) or ((((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & ((1 << (MySqlParser.ROLLUP - 471)) | (1 << (MySqlParser.ROTATE - 471)) | (1 << (MySqlParser.ROW - 471)) | (1 << (MySqlParser.ROWS - 471)) | (1 << (MySqlParser.ROW_FORMAT - 471)) | (1 << (MySqlParser.SAVEPOINT - 471)) | (1 << (MySqlParser.SCHEDULE - 471)) | (1 << (MySqlParser.SECURITY - 471)) | (1 << (MySqlParser.SERVER - 471)) | (1 << (MySqlParser.SESSION - 471)) | (1 << (MySqlParser.SHARE - 471)) | (1 << (MySqlParser.SHARED - 471)) | (1 << (MySqlParser.SIGNED - 471)) | (1 << (MySqlParser.SIMPLE - 471)) | (1 << (MySqlParser.SLAVE - 471)) | (1 << (MySqlParser.SLOW - 471)) | (1 << (MySqlParser.SNAPSHOT - 471)) | (1 << (MySqlParser.SOCKET - 471)) | (1 << (MySqlParser.SOME - 471)) | (1 << (MySqlParser.SONAME - 471)) | (1 << (MySqlParser.SOUNDS - 471)) | (1 << (MySqlParser.SOURCE - 471)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 471)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 471)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 471)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 471)) | (1 << (MySqlParser.SQL_CACHE - 471)) | (1 << (MySqlParser.SQL_NO_CACHE - 471)) | (1 << (MySqlParser.SQL_THREAD - 471)) | (1 << (MySqlParser.START - 471)) | (1 << (MySqlParser.STARTS - 471)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 471)) | (1 << (MySqlParser.STATS_PERSISTENT - 471)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 471)) | (1 << (MySqlParser.STATUS - 471)) | (1 << (MySqlParser.STOP - 471)) | (1 << (MySqlParser.STORAGE - 471)) | (1 << (MySqlParser.STRING - 471)) | (1 << (MySqlParser.SUBJECT - 471)) | (1 << (MySqlParser.SUBPARTITION - 471)) | (1 << (MySqlParser.SUBPARTITIONS - 471)) | (1 << (MySqlParser.SUSPEND - 471)) | (1 << (MySqlParser.SWAPS - 471)) | (1 << (MySqlParser.SWITCHES - 471)) | (1 << (MySqlParser.TABLESPACE - 471)) | (1 << (MySqlParser.TEMPORARY - 471)) | (1 << (MySqlParser.TEMPTABLE - 471)) | (1 << (MySqlParser.THAN - 471)) | (1 << (MySqlParser.TRADITIONAL - 471)) | (1 << (MySqlParser.TRANSACTION - 471)) | (1 << (MySqlParser.TRIGGERS - 471)) | (1 << (MySqlParser.TRUNCATE - 471)) | (1 << (MySqlParser.UNDEFINED - 471)) | (1 << (MySqlParser.UNDOFILE - 471)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 471)) | (1 << (MySqlParser.UNINSTALL - 471)) | (1 << (MySqlParser.UNKNOWN - 471)) | (1 << (MySqlParser.UNTIL - 471)) | (1 << (MySqlParser.UPGRADE - 471)) | (1 << (MySqlParser.USER - 471)) | (1 << (MySqlParser.USE_FRM - 471)) | (1 << (MySqlParser.USER_RESOURCES - 471)) | (1 << (MySqlParser.VALIDATION - 471)) | (1 << (MySqlParser.VALUE - 471)))) != 0) or ((((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & ((1 << (MySqlParser.VARIABLES - 535)) | (1 << (MySqlParser.VIEW - 535)) | (1 << (MySqlParser.WAIT - 535)) | (1 << (MySqlParser.WARNINGS - 535)) | (1 << (MySqlParser.WITHOUT - 535)) | (1 << (MySqlParser.WORK - 535)) | (1 << (MySqlParser.WRAPPER - 535)) | (1 << (MySqlParser.X509 - 535)) | (1 << (MySqlParser.XA - 535)) | (1 << (MySqlParser.XML - 535)) | (1 << (MySqlParser.QUARTER - 535)) | (1 << (MySqlParser.MONTH - 535)) | (1 << (MySqlParser.DAY - 535)) | (1 << (MySqlParser.HOUR - 535)) | (1 << (MySqlParser.MINUTE - 535)) | (1 << (MySqlParser.WEEK - 535)) | (1 << (MySqlParser.SECOND - 535)) | (1 << (MySqlParser.MICROSECOND - 535)) | (1 << (MySqlParser.TABLES - 535)) | (1 << (MySqlParser.ROUTINE - 535)) | (1 << (MySqlParser.EXECUTE - 535)) | (1 << (MySqlParser.FILE - 535)) | (1 << (MySqlParser.PROCESS - 535)) | (1 << (MySqlParser.RELOAD - 535)) | (1 << (MySqlParser.SHUTDOWN - 535)) | (1 << (MySqlParser.SUPER - 535)) | (1 << (MySqlParser.PRIVILEGES - 535)) | (1 << (MySqlParser.ARMSCII8 - 535)) | (1 << (MySqlParser.ASCII - 535)) | (1 << (MySqlParser.BIG5 - 535)) | (1 << (MySqlParser.CP1250 - 535)) | (1 << (MySqlParser.CP1251 - 535)) | (1 << (MySqlParser.CP1256 - 535)) | (1 << (MySqlParser.CP1257 - 535)) | (1 << (MySqlParser.CP850 - 535)) | (1 << (MySqlParser.CP852 - 535)) | (1 << (MySqlParser.CP866 - 535)) | (1 << (MySqlParser.CP932 - 535)) | (1 << (MySqlParser.DEC8 - 535)) | (1 << (MySqlParser.EUCJPMS - 535)) | (1 << (MySqlParser.EUCKR - 535)) | (1 << (MySqlParser.GB2312 - 535)) | (1 << (MySqlParser.GBK - 535)) | (1 << (MySqlParser.GEOSTD8 - 535)) | (1 << (MySqlParser.GREEK - 535)) | (1 << (MySqlParser.HEBREW - 535)) | (1 << (MySqlParser.HP8 - 535)) | (1 << (MySqlParser.KEYBCS2 - 535)) | (1 << (MySqlParser.KOI8R - 535)) | (1 << (MySqlParser.KOI8U - 535)) | (1 << (MySqlParser.LATIN1 - 535)) | (1 << (MySqlParser.LATIN2 - 535)) | (1 << (MySqlParser.LATIN5 - 535)) | (1 << (MySqlParser.LATIN7 - 535)) | (1 << (MySqlParser.MACCE - 535)) | (1 << (MySqlParser.MACROMAN - 535)) | (1 << (MySqlParser.SJIS - 535)) | (1 << (MySqlParser.SWE7 - 535)) | (1 << (MySqlParser.TIS620 - 535)))) != 0) or ((((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & ((1 << (MySqlParser.UCS2 - 599)) | (1 << (MySqlParser.UJIS - 599)) | (1 << (MySqlParser.UTF16 - 599)) | (1 << (MySqlParser.UTF16LE - 599)) | (1 << (MySqlParser.UTF32 - 599)) | (1 << (MySqlParser.UTF8 - 599)) | (1 << (MySqlParser.UTF8MB3 - 599)) | (1 << (MySqlParser.UTF8MB4 - 599)) | (1 << (MySqlParser.ARCHIVE - 599)) | (1 << (MySqlParser.BLACKHOLE - 599)) | (1 << (MySqlParser.CSV - 599)) | (1 << (MySqlParser.FEDERATED - 599)) | (1 << (MySqlParser.INNODB - 599)) | (1 << (MySqlParser.MEMORY - 599)) | (1 << (MySqlParser.MRG_MYISAM - 599)) | (1 << (MySqlParser.MYISAM - 599)) | (1 << (MySqlParser.NDB - 599)) | (1 << (MySqlParser.NDBCLUSTER - 599)) | (1 << (MySqlParser.PERFOMANCE_SCHEMA - 599)) | (1 << (MySqlParser.REPEATABLE - 599)) | (1 << (MySqlParser.COMMITTED - 599)) | (1 << (MySqlParser.UNCOMMITTED - 599)) | (1 << (MySqlParser.SERIALIZABLE - 599)) | (1 << (MySqlParser.GEOMETRYCOLLECTION - 599)) | (1 << (MySqlParser.LINESTRING - 599)) | (1 << (MySqlParser.MULTILINESTRING - 599)) | (1 << (MySqlParser.MULTIPOINT - 599)) | (1 << (MySqlParser.MULTIPOLYGON - 599)) | (1 << (MySqlParser.POINT - 599)) | (1 << (MySqlParser.POLYGON - 599)) | (1 << (MySqlParser.ABS - 599)) | (1 << (MySqlParser.ACOS - 599)) | (1 << (MySqlParser.ADDDATE - 599)) | (1 << (MySqlParser.ADDTIME - 599)) | (1 << (MySqlParser.AES_DECRYPT - 599)) | (1 << (MySqlParser.AES_ENCRYPT - 599)) | (1 << (MySqlParser.AREA - 599)) | (1 << (MySqlParser.ASBINARY - 599)) | (1 << (MySqlParser.ASIN - 599)) | (1 << (MySqlParser.ASTEXT - 599)) | (1 << (MySqlParser.ASWKB - 599)) | (1 << (MySqlParser.ASWKT - 599)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 599)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 599)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 599)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 599)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 599)) | (1 << (MySqlParser.ATAN - 599)) | (1 << (MySqlParser.ATAN2 - 599)) | (1 << (MySqlParser.BENCHMARK - 599)) | (1 << (MySqlParser.BIN - 599)) | (1 << (MySqlParser.BIT_COUNT - 599)) | (1 << (MySqlParser.BIT_LENGTH - 599)) | (1 << (MySqlParser.BUFFER - 599)) | (1 << (MySqlParser.CEIL - 599)) | (1 << (MySqlParser.CEILING - 599)) | (1 << (MySqlParser.CENTROID - 599)) | (1 << (MySqlParser.CHARACTER_LENGTH - 599)) | (1 << (MySqlParser.CHARSET - 599)) | (1 << (MySqlParser.CHAR_LENGTH - 599)) | (1 << (MySqlParser.COERCIBILITY - 599)) | (1 << (MySqlParser.COLLATION - 599)) | (1 << (MySqlParser.COMPRESS - 599)) | (1 << (MySqlParser.CONCAT - 599)))) != 0) or ((((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & ((1 << (MySqlParser.CONCAT_WS - 663)) | (1 << (MySqlParser.CONNECTION_ID - 663)) | (1 << (MySqlParser.CONV - 663)) | (1 << (MySqlParser.CONVERT_TZ - 663)) | (1 << (MySqlParser.COS - 663)) | (1 << (MySqlParser.COT - 663)) | (1 << (MySqlParser.CRC32 - 663)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 663)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 663)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 663)) | (1 << (MySqlParser.CREATE_DIGEST - 663)) | (1 << (MySqlParser.CROSSES - 663)) | (1 << (MySqlParser.DATEDIFF - 663)) | (1 << (MySqlParser.DATE_FORMAT - 663)) | (1 << (MySqlParser.DAYNAME - 663)) | (1 << (MySqlParser.DAYOFMONTH - 663)) | (1 << (MySqlParser.DAYOFWEEK - 663)) | (1 << (MySqlParser.DAYOFYEAR - 663)) | (1 << (MySqlParser.DECODE - 663)) | (1 << (MySqlParser.DEGREES - 663)) | (1 << (MySqlParser.DES_DECRYPT - 663)) | (1 << (MySqlParser.DES_ENCRYPT - 663)) | (1 << (MySqlParser.DIMENSION - 663)) | (1 << (MySqlParser.DISJOINT - 663)) | (1 << (MySqlParser.ELT - 663)) | (1 << (MySqlParser.ENCODE - 663)) | (1 << (MySqlParser.ENCRYPT - 663)) | (1 << (MySqlParser.ENDPOINT - 663)) | (1 << (MySqlParser.ENVELOPE - 663)) | (1 << (MySqlParser.EQUALS - 663)) | (1 << (MySqlParser.EXP - 663)) | (1 << (MySqlParser.EXPORT_SET - 663)) | (1 << (MySqlParser.EXTERIORRING - 663)) | (1 << (MySqlParser.EXTRACTVALUE - 663)) | (1 << (MySqlParser.FIELD - 663)) | (1 << (MySqlParser.FIND_IN_SET - 663)) | (1 << (MySqlParser.FLOOR - 663)) | (1 << (MySqlParser.FORMAT - 663)) | (1 << (MySqlParser.FOUND_ROWS - 663)) | (1 << (MySqlParser.FROM_BASE64 - 663)) | (1 << (MySqlParser.FROM_DAYS - 663)) | (1 << (MySqlParser.FROM_UNIXTIME - 663)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 663)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 663)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 663)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 663)) | (1 << (MySqlParser.GEOMETRYN - 663)) | (1 << (MySqlParser.GEOMETRYTYPE - 663)) | (1 << (MySqlParser.GEOMFROMTEXT - 663)) | (1 << (MySqlParser.GEOMFROMWKB - 663)) | (1 << (MySqlParser.GET_FORMAT - 663)) | (1 << (MySqlParser.GET_LOCK - 663)) | (1 << (MySqlParser.GLENGTH - 663)) | (1 << (MySqlParser.GREATEST - 663)) | (1 << (MySqlParser.GTID_SUBSET - 663)) | (1 << (MySqlParser.GTID_SUBTRACT - 663)) | (1 << (MySqlParser.HEX - 663)) | (1 << (MySqlParser.IFNULL - 663)) | (1 << (MySqlParser.INET6_ATON - 663)) | (1 << (MySqlParser.INET6_NTOA - 663)) | (1 << (MySqlParser.INET_ATON - 663)) | (1 << (MySqlParser.INET_NTOA - 663)))) != 0) or ((((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & ((1 << (MySqlParser.INSTR - 727)) | (1 << (MySqlParser.INTERIORRINGN - 727)) | (1 << (MySqlParser.INTERSECTS - 727)) | (1 << (MySqlParser.ISCLOSED - 727)) | (1 << (MySqlParser.ISEMPTY - 727)) | (1 << (MySqlParser.ISNULL - 727)) | (1 << (MySqlParser.ISSIMPLE - 727)) | (1 << (MySqlParser.IS_FREE_LOCK - 727)) | (1 << (MySqlParser.IS_IPV4 - 727)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 727)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 727)) | (1 << (MySqlParser.IS_IPV6 - 727)) | (1 << (MySqlParser.IS_USED_LOCK - 727)) | (1 << (MySqlParser.LAST_INSERT_ID - 727)) | (1 << (MySqlParser.LCASE - 727)) | (1 << (MySqlParser.LEAST - 727)) | (1 << (MySqlParser.LENGTH - 727)) | (1 << (MySqlParser.LINEFROMTEXT - 727)) | (1 << (MySqlParser.LINEFROMWKB - 727)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 727)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 727)) | (1 << (MySqlParser.LN - 727)) | (1 << (MySqlParser.LOAD_FILE - 727)) | (1 << (MySqlParser.LOCATE - 727)) | (1 << (MySqlParser.LOG - 727)) | (1 << (MySqlParser.LOG10 - 727)) | (1 << (MySqlParser.LOG2 - 727)) | (1 << (MySqlParser.LOWER - 727)) | (1 << (MySqlParser.LPAD - 727)) | (1 << (MySqlParser.LTRIM - 727)) | (1 << (MySqlParser.MAKEDATE - 727)) | (1 << (MySqlParser.MAKETIME - 727)) | (1 << (MySqlParser.MAKE_SET - 727)) | (1 << (MySqlParser.MASTER_POS_WAIT - 727)) | (1 << (MySqlParser.MBRCONTAINS - 727)) | (1 << (MySqlParser.MBRDISJOINT - 727)) | (1 << (MySqlParser.MBREQUAL - 727)) | (1 << (MySqlParser.MBRINTERSECTS - 727)) | (1 << (MySqlParser.MBROVERLAPS - 727)) | (1 << (MySqlParser.MBRTOUCHES - 727)) | (1 << (MySqlParser.MBRWITHIN - 727)) | (1 << (MySqlParser.MD5 - 727)) | (1 << (MySqlParser.MLINEFROMTEXT - 727)) | (1 << (MySqlParser.MLINEFROMWKB - 727)) | (1 << (MySqlParser.MONTHNAME - 727)) | (1 << (MySqlParser.MPOINTFROMTEXT - 727)) | (1 << (MySqlParser.MPOINTFROMWKB - 727)) | (1 << (MySqlParser.MPOLYFROMTEXT - 727)) | (1 << (MySqlParser.MPOLYFROMWKB - 727)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 727)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 727)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 727)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 727)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 727)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 727)) | (1 << (MySqlParser.NAME_CONST - 727)) | (1 << (MySqlParser.NULLIF - 727)) | (1 << (MySqlParser.NUMGEOMETRIES - 727)) | (1 << (MySqlParser.NUMINTERIORRINGS - 727)) | (1 << (MySqlParser.NUMPOINTS - 727)) | (1 << (MySqlParser.OCT - 727)) | (1 << (MySqlParser.OCTET_LENGTH - 727)) | (1 << (MySqlParser.ORD - 727)) | (1 << (MySqlParser.OVERLAPS - 727)))) != 0) or ((((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & ((1 << (MySqlParser.PERIOD_ADD - 791)) | (1 << (MySqlParser.PERIOD_DIFF - 791)) | (1 << (MySqlParser.PI - 791)) | (1 << (MySqlParser.POINTFROMTEXT - 791)) | (1 << (MySqlParser.POINTFROMWKB - 791)) | (1 << (MySqlParser.POINTN - 791)) | (1 << (MySqlParser.POLYFROMTEXT - 791)) | (1 << (MySqlParser.POLYFROMWKB - 791)) | (1 << (MySqlParser.POLYGONFROMTEXT - 791)) | (1 << (MySqlParser.POLYGONFROMWKB - 791)) | (1 << (MySqlParser.POW - 791)) | (1 << (MySqlParser.POWER - 791)) | (1 << (MySqlParser.QUOTE - 791)) | (1 << (MySqlParser.RADIANS - 791)) | (1 << (MySqlParser.RAND - 791)) | (1 << (MySqlParser.RANDOM_BYTES - 791)) | (1 << (MySqlParser.RELEASE_LOCK - 791)) | (1 << (MySqlParser.REVERSE - 791)) | (1 << (MySqlParser.ROUND - 791)) | (1 << (MySqlParser.ROW_COUNT - 791)) | (1 << (MySqlParser.RPAD - 791)) | (1 << (MySqlParser.RTRIM - 791)) | (1 << (MySqlParser.SEC_TO_TIME - 791)) | (1 << (MySqlParser.SESSION_USER - 791)) | (1 << (MySqlParser.SHA - 791)) | (1 << (MySqlParser.SHA1 - 791)) | (1 << (MySqlParser.SHA2 - 791)) | (1 << (MySqlParser.SIGN - 791)) | (1 << (MySqlParser.SIN - 791)) | (1 << (MySqlParser.SLEEP - 791)) | (1 << (MySqlParser.SOUNDEX - 791)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 791)) | (1 << (MySqlParser.SQRT - 791)) | (1 << (MySqlParser.SRID - 791)) | (1 << (MySqlParser.STARTPOINT - 791)) | (1 << (MySqlParser.STRCMP - 791)) | (1 << (MySqlParser.STR_TO_DATE - 791)) | (1 << (MySqlParser.ST_AREA - 791)) | (1 << (MySqlParser.ST_ASBINARY - 791)) | (1 << (MySqlParser.ST_ASTEXT - 791)) | (1 << (MySqlParser.ST_ASWKB - 791)) | (1 << (MySqlParser.ST_ASWKT - 791)) | (1 << (MySqlParser.ST_BUFFER - 791)) | (1 << (MySqlParser.ST_CENTROID - 791)) | (1 << (MySqlParser.ST_CONTAINS - 791)) | (1 << (MySqlParser.ST_CROSSES - 791)) | (1 << (MySqlParser.ST_DIFFERENCE - 791)) | (1 << (MySqlParser.ST_DIMENSION - 791)) | (1 << (MySqlParser.ST_DISJOINT - 791)) | (1 << (MySqlParser.ST_DISTANCE - 791)) | (1 << (MySqlParser.ST_ENDPOINT - 791)) | (1 << (MySqlParser.ST_ENVELOPE - 791)) | (1 << (MySqlParser.ST_EQUALS - 791)) | (1 << (MySqlParser.ST_EXTERIORRING - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 791)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 791)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 791)) | (1 << (MySqlParser.ST_GEOMETRYN - 791)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 791)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 791)))) != 0) or ((((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & ((1 << (MySqlParser.ST_GEOMFROMWKB - 855)) | (1 << (MySqlParser.ST_INTERIORRINGN - 855)) | (1 << (MySqlParser.ST_INTERSECTION - 855)) | (1 << (MySqlParser.ST_INTERSECTS - 855)) | (1 << (MySqlParser.ST_ISCLOSED - 855)) | (1 << (MySqlParser.ST_ISEMPTY - 855)) | (1 << (MySqlParser.ST_ISSIMPLE - 855)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 855)) | (1 << (MySqlParser.ST_LINEFROMWKB - 855)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 855)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 855)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 855)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 855)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 855)) | (1 << (MySqlParser.ST_NUMPOINTS - 855)) | (1 << (MySqlParser.ST_OVERLAPS - 855)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 855)) | (1 << (MySqlParser.ST_POINTFROMWKB - 855)) | (1 << (MySqlParser.ST_POINTN - 855)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 855)) | (1 << (MySqlParser.ST_POLYFROMWKB - 855)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 855)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 855)) | (1 << (MySqlParser.ST_SRID - 855)) | (1 << (MySqlParser.ST_STARTPOINT - 855)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 855)) | (1 << (MySqlParser.ST_TOUCHES - 855)) | (1 << (MySqlParser.ST_UNION - 855)) | (1 << (MySqlParser.ST_WITHIN - 855)) | (1 << (MySqlParser.ST_X - 855)) | (1 << (MySqlParser.ST_Y - 855)) | (1 << (MySqlParser.SUBDATE - 855)) | (1 << (MySqlParser.SUBSTRING_INDEX - 855)) | (1 << (MySqlParser.SUBTIME - 855)) | (1 << (MySqlParser.SYSTEM_USER - 855)) | (1 << (MySqlParser.TAN - 855)) | (1 << (MySqlParser.TIMEDIFF - 855)) | (1 << (MySqlParser.TIMESTAMPADD - 855)) | (1 << (MySqlParser.TIMESTAMPDIFF - 855)) | (1 << (MySqlParser.TIME_FORMAT - 855)) | (1 << (MySqlParser.TIME_TO_SEC - 855)) | (1 << (MySqlParser.TOUCHES - 855)) | (1 << (MySqlParser.TO_BASE64 - 855)) | (1 << (MySqlParser.TO_DAYS - 855)) | (1 << (MySqlParser.TO_SECONDS - 855)) | (1 << (MySqlParser.UCASE - 855)) | (1 << (MySqlParser.UNCOMPRESS - 855)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 855)) | (1 << (MySqlParser.UNHEX - 855)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 855)) | (1 << (MySqlParser.UPDATEXML - 855)) | (1 << (MySqlParser.UPPER - 855)) | (1 << (MySqlParser.UUID - 855)) | (1 << (MySqlParser.UUID_SHORT - 855)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 855)) | (1 << (MySqlParser.VERSION - 855)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 855)) | (1 << (MySqlParser.WEEKDAY - 855)) | (1 << (MySqlParser.WEEKOFYEAR - 855)) | (1 << (MySqlParser.WEIGHT_STRING - 855)) | (1 << (MySqlParser.WITHIN - 855)) | (1 << (MySqlParser.YEARWEEK - 855)) | (1 << (MySqlParser.Y_FUNCTION - 855)) | (1 << (MySqlParser.X_FUNCTION - 855)))) != 0) or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (MySqlParser.PLUS - 931)) | (1 << (MySqlParser.MINUS - 931)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 931)) | (1 << (MySqlParser.BIT_NOT_OP - 931)) | (1 << (MySqlParser.LR_BRACKET - 931)) | (1 << (MySqlParser.ZERO_DECIMAL - 931)) | (1 << (MySqlParser.ONE_DECIMAL - 931)) | (1 << (MySqlParser.TWO_DECIMAL - 931)) | (1 << (MySqlParser.CHARSET_REVERSE_QOUTE_STRING - 931)) | (1 << (MySqlParser.START_NATIONAL_STRING_LITERAL - 931)) | (1 << (MySqlParser.STRING_LITERAL - 931)) | (1 << (MySqlParser.DECIMAL_LITERAL - 931)) | (1 << (MySqlParser.HEXADECIMAL_LITERAL - 931)) | (1 << (MySqlParser.REAL_LITERAL - 931)) | (1 << (MySqlParser.NULL_SPEC_LITERAL - 931)) | (1 << (MySqlParser.BIT_STRING - 931)) | (1 << (MySqlParser.STRING_CHARSET_NAME - 931)) | (1 << (MySqlParser.ID - 931)) | (1 << (MySqlParser.REVERSE_QUOTE_ID - 931)) | (1 << (MySqlParser.LOCAL_ID - 931)) | (1 << (MySqlParser.GLOBAL_ID - 931)))) != 0):
                    self.state = 5524
                    self.functionArgs()


                self.state = 5527
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5529
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.SpecificFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_specificFunction

     
        def copyFrom(self, ctx):
            super(MySqlParser.SpecificFunctionContext, self).copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.PositionFunctionCallContext, self).__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterPositionFunctionCall"):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPositionFunctionCall"):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.TrimFunctionCallContext, self).__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def BOTH(self):
            return self.getToken(MySqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(MySqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(MySqlParser.TRAILING, 0)
        def stringLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterTrimFunctionCall"):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTrimFunctionCall"):
                listener.exitTrimFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.SimpleFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSimpleFunctionCall"):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSimpleFunctionCall"):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.CharFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCharFunctionCall"):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharFunctionCall"):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.WeightFunctionCallContext, self).__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)
        def LR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def RR_BRACKET(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(MySqlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterWeightFunctionCall"):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitWeightFunctionCall"):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.GetFormatFunctionCallContext, self).__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterGetFormatFunctionCall"):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitGetFormatFunctionCall"):
                listener.exitGetFormatFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.CaseFunctionCallContext, self).__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCaseFunctionCall"):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCaseFunctionCall"):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.ExtractFunctionCallContext, self).__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(MySqlParser.EXTRACT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterExtractFunctionCall"):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExtractFunctionCall"):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.DataTypeFunctionCallContext, self).__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterDataTypeFunctionCall"):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataTypeFunctionCall"):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.ValuesFunctionCallContext, self).__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterValuesFunctionCall"):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitValuesFunctionCall"):
                listener.exitValuesFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.SpecificFunctionContext)
            super(MySqlParser.SubstrFunctionCallContext, self).__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubstrFunctionCall"):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubstrFunctionCall"):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = MySqlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 5689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5532
                _la = self._input.LA(1)
                if not(_la==MySqlParser.CURRENT_USER or ((((_la - 225)) & ~0x3f) == 0 and ((1 << (_la - 225)) & ((1 << (MySqlParser.CURRENT_DATE - 225)) | (1 << (MySqlParser.CURRENT_TIME - 225)) | (1 << (MySqlParser.CURRENT_TIMESTAMP - 225)) | (1 << (MySqlParser.LOCALTIME - 225)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 2:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5533
                self.match(MySqlParser.CONVERT)
                self.state = 5534
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5535
                self.expression(0)
                self.state = 5536
                localctx.separator = self.match(MySqlParser.COMMA)
                self.state = 5537
                self.convertedDataType()
                self.state = 5538
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5540
                self.match(MySqlParser.CONVERT)
                self.state = 5541
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5542
                self.expression(0)
                self.state = 5543
                self.match(MySqlParser.USING)
                self.state = 5544
                self.charsetName()
                self.state = 5545
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5547
                self.match(MySqlParser.CAST)
                self.state = 5548
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5549
                self.expression(0)
                self.state = 5550
                self.match(MySqlParser.AS)
                self.state = 5551
                self.convertedDataType()
                self.state = 5552
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5554
                self.match(MySqlParser.VALUES)
                self.state = 5555
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5556
                self.fullColumnName()
                self.state = 5557
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5559
                self.match(MySqlParser.CASE)
                self.state = 5560
                self.expression(0)
                self.state = 5562 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5561
                    self.caseFuncAlternative()
                    self.state = 5564 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 5568
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 5566
                    self.match(MySqlParser.ELSE)
                    self.state = 5567
                    localctx.elseArg = self.functionArg()


                self.state = 5570
                self.match(MySqlParser.END)
                pass

            elif la_ == 7:
                localctx = MySqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5572
                self.match(MySqlParser.CASE)
                self.state = 5574 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5573
                    self.caseFuncAlternative()
                    self.state = 5576 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.WHEN):
                        break

                self.state = 5580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ELSE:
                    self.state = 5578
                    self.match(MySqlParser.ELSE)
                    self.state = 5579
                    localctx.elseArg = self.functionArg()


                self.state = 5582
                self.match(MySqlParser.END)
                pass

            elif la_ == 8:
                localctx = MySqlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5584
                self.match(MySqlParser.CHAR)
                self.state = 5585
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5586
                self.functionArgs()
                self.state = 5589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.USING:
                    self.state = 5587
                    self.match(MySqlParser.USING)
                    self.state = 5588
                    self.charsetName()


                self.state = 5591
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5593
                self.match(MySqlParser.POSITION)
                self.state = 5594
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 5595
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5596
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 5599
                self.match(MySqlParser.IN)
                self.state = 5602
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                if la_ == 1:
                    self.state = 5600
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5601
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 5604
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5606
                _la = self._input.LA(1)
                if not(_la==MySqlParser.SUBSTR or _la==MySqlParser.SUBSTRING):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5607
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5610
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,817,self._ctx)
                if la_ == 1:
                    self.state = 5608
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5609
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5612
                self.match(MySqlParser.FROM)
                self.state = 5615
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,818,self._ctx)
                if la_ == 1:
                    self.state = 5613
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5614
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.FOR:
                    self.state = 5617
                    self.match(MySqlParser.FOR)
                    self.state = 5620
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,819,self._ctx)
                    if la_ == 1:
                        self.state = 5618
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 5619
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 5624
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5626
                self.match(MySqlParser.TRIM)
                self.state = 5627
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5628
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.BOTH or _la==MySqlParser.LEADING or _la==MySqlParser.TRAILING):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,821,self._ctx)
                if la_ == 1:
                    self.state = 5629
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 5630
                    localctx.sourceExpression = self.expression(0)


                self.state = 5633
                self.match(MySqlParser.FROM)
                self.state = 5636
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,822,self._ctx)
                if la_ == 1:
                    self.state = 5634
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5635
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5638
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5640
                self.match(MySqlParser.TRIM)
                self.state = 5641
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5644
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,823,self._ctx)
                if la_ == 1:
                    self.state = 5642
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5643
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5646
                self.match(MySqlParser.FROM)
                self.state = 5649
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,824,self._ctx)
                if la_ == 1:
                    self.state = 5647
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5648
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 5651
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = MySqlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5653
                self.match(MySqlParser.WEIGHT_STRING)
                self.state = 5654
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5657
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,825,self._ctx)
                if la_ == 1:
                    self.state = 5655
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5656
                    self.expression(0)
                    pass


                self.state = 5665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.AS:
                    self.state = 5659
                    self.match(MySqlParser.AS)
                    self.state = 5660
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.CHAR or _la==MySqlParser.BINARY):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5661
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 5662
                    self.decimalLiteral()
                    self.state = 5663
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 5668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.LEVEL:
                    self.state = 5667
                    self.levelsInWeightString()


                self.state = 5670
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = MySqlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5672
                self.match(MySqlParser.EXTRACT)
                self.state = 5673
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5674
                self.intervalType()
                self.state = 5675
                self.match(MySqlParser.FROM)
                self.state = 5678
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,828,self._ctx)
                if la_ == 1:
                    self.state = 5676
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 5677
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 5680
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = MySqlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5682
                self.match(MySqlParser.GET_FORMAT)
                self.state = 5683
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5684
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.DATETIME - 180)))) != 0)):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5685
                self.match(MySqlParser.COMMA)
                self.state = 5686
                self.stringLiteral()
                self.state = 5687
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CaseFuncAlternativeContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def functionArg(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseFuncAlternative

        def enterRule(self, listener):
            if hasattr(listener, "enterCaseFuncAlternative"):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCaseFuncAlternative"):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = MySqlParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5691
            self.match(MySqlParser.WHEN)
            self.state = 5692
            localctx.condition = self.functionArg()
            self.state = 5693
            self.match(MySqlParser.THEN)
            self.state = 5694
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LevelsInWeightStringContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx):
            super(MySqlParser.LevelsInWeightStringContext, self).copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.LevelsInWeightStringContext)
            super(MySqlParser.LevelWeightRangeContext, self).__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)
        def decimalLiteral(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterLevelWeightRange"):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLevelWeightRange"):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.LevelsInWeightStringContext)
            super(MySqlParser.LevelWeightListContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def levelInWeightListElement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LevelInWeightListElementContext,i)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterLevelWeightList"):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLevelWeightList"):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = MySqlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 5710
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5696
                self.match(MySqlParser.LEVEL)
                self.state = 5697
                self.levelInWeightListElement()
                self.state = 5702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5698
                    self.match(MySqlParser.COMMA)
                    self.state = 5699
                    self.levelInWeightListElement()
                    self.state = 5704
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5705
                self.match(MySqlParser.LEVEL)
                self.state = 5706
                localctx.firstLevel = self.decimalLiteral()
                self.state = 5707
                self.match(MySqlParser.MINUS)
                self.state = 5708
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LevelInWeightListElementContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_levelInWeightListElement

        def enterRule(self, listener):
            if hasattr(listener, "enterLevelInWeightListElement"):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLevelInWeightListElement"):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = MySqlParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5712
            self.decimalLiteral()
            self.state = 5714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE:
                self.state = 5713
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.ASC or _la==MySqlParser.DESC or _la==MySqlParser.REVERSE):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.AggregateWindowedFunctionContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(MySqlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener):
            if hasattr(listener, "enterAggregateWindowedFunction"):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitAggregateWindowedFunction"):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = MySqlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 5772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,841,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5716
                _la = self._input.LA(1)
                if not(((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & ((1 << (MySqlParser.AVG - 209)) | (1 << (MySqlParser.MAX - 209)) | (1 << (MySqlParser.MIN - 209)) | (1 << (MySqlParser.SUM - 209)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5717
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALL or _la==MySqlParser.DISTINCT:
                    self.state = 5718
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==MySqlParser.ALL or _la==MySqlParser.DISTINCT):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5721
                self.functionArg()
                self.state = 5722
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5724
                self.match(MySqlParser.COUNT)
                self.state = 5725
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5731
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [MySqlParser.STAR]:
                    self.state = 5726
                    localctx.starArg = self.match(MySqlParser.STAR)
                    pass
                elif token in [MySqlParser.ALL, MySqlParser.CASE, MySqlParser.CAST, MySqlParser.CONVERT, MySqlParser.CURRENT_USER, MySqlParser.DATABASE, MySqlParser.EXISTS, MySqlParser.FALSE, MySqlParser.IF, MySqlParser.INSERT, MySqlParser.INTERVAL, MySqlParser.LEFT, MySqlParser.NOT, MySqlParser.NULL_LITERAL, MySqlParser.REPLACE, MySqlParser.RIGHT, MySqlParser.TRUE, MySqlParser.VALUES, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.DATETIME, MySqlParser.YEAR, MySqlParser.CHAR, MySqlParser.BINARY, MySqlParser.TEXT, MySqlParser.ENUM, MySqlParser.AVG, MySqlParser.BIT_AND, MySqlParser.BIT_OR, MySqlParser.BIT_XOR, MySqlParser.COUNT, MySqlParser.GROUP_CONCAT, MySqlParser.MAX, MySqlParser.MIN, MySqlParser.STD, MySqlParser.STDDEV, MySqlParser.STDDEV_POP, MySqlParser.STDDEV_SAMP, MySqlParser.SUM, MySqlParser.VAR_POP, MySqlParser.VAR_SAMP, MySqlParser.VARIANCE, MySqlParser.CURRENT_DATE, MySqlParser.CURRENT_TIME, MySqlParser.CURRENT_TIMESTAMP, MySqlParser.LOCALTIME, MySqlParser.CURDATE, MySqlParser.CURTIME, MySqlParser.DATE_ADD, MySqlParser.DATE_SUB, MySqlParser.EXTRACT, MySqlParser.LOCALTIMESTAMP, MySqlParser.NOW, MySqlParser.POSITION, MySqlParser.SUBSTR, MySqlParser.SUBSTRING, MySqlParser.SYSDATE, MySqlParser.TRIM, MySqlParser.UTC_DATE, MySqlParser.UTC_TIME, MySqlParser.UTC_TIMESTAMP, MySqlParser.ACCOUNT, MySqlParser.ACTION, MySqlParser.AFTER, MySqlParser.AGGREGATE, MySqlParser.ALGORITHM, MySqlParser.ANY, MySqlParser.AT, MySqlParser.AUTHORS, MySqlParser.AUTOCOMMIT, MySqlParser.AUTOEXTEND_SIZE, MySqlParser.AUTO_INCREMENT, MySqlParser.AVG_ROW_LENGTH, MySqlParser.BEGIN, MySqlParser.BINLOG, MySqlParser.BIT, MySqlParser.BLOCK, MySqlParser.BOOL, MySqlParser.BOOLEAN, MySqlParser.BTREE, MySqlParser.CACHE, MySqlParser.CASCADED, MySqlParser.CHAIN, MySqlParser.CHANGED, MySqlParser.CHANNEL, MySqlParser.CHECKSUM, MySqlParser.CIPHER, MySqlParser.CLIENT, MySqlParser.CLOSE, MySqlParser.COALESCE, MySqlParser.CODE, MySqlParser.COLUMNS, MySqlParser.COLUMN_FORMAT, MySqlParser.COMMENT, MySqlParser.COMMIT, MySqlParser.COMPACT, MySqlParser.COMPLETION, MySqlParser.COMPRESSED, MySqlParser.COMPRESSION, MySqlParser.CONCURRENT, MySqlParser.CONNECTION, MySqlParser.CONSISTENT, MySqlParser.CONTAINS, MySqlParser.CONTEXT, MySqlParser.CONTRIBUTORS, MySqlParser.COPY, MySqlParser.CPU, MySqlParser.DATA, MySqlParser.DATAFILE, MySqlParser.DEALLOCATE, MySqlParser.DEFAULT_AUTH, MySqlParser.DEFINER, MySqlParser.DELAY_KEY_WRITE, MySqlParser.DES_KEY_FILE, MySqlParser.DIRECTORY, MySqlParser.DISABLE, MySqlParser.DISCARD, MySqlParser.DISK, MySqlParser.DO, MySqlParser.DUMPFILE, MySqlParser.DUPLICATE, MySqlParser.DYNAMIC, MySqlParser.ENABLE, MySqlParser.ENCRYPTION, MySqlParser.END, MySqlParser.ENDS, MySqlParser.ENGINE, MySqlParser.ENGINES, MySqlParser.ERROR, MySqlParser.ERRORS, MySqlParser.ESCAPE, MySqlParser.EVEN, MySqlParser.EVENT, MySqlParser.EVENTS, MySqlParser.EVERY, MySqlParser.EXCHANGE, MySqlParser.EXCLUSIVE, MySqlParser.EXPIRE, MySqlParser.EXPORT, MySqlParser.EXTENDED, MySqlParser.EXTENT_SIZE, MySqlParser.FAST, MySqlParser.FAULTS, MySqlParser.FIELDS, MySqlParser.FILE_BLOCK_SIZE, MySqlParser.FILTER, MySqlParser.FIRST, MySqlParser.FIXED, MySqlParser.FLUSH, MySqlParser.FOLLOWS, MySqlParser.FOUND, MySqlParser.FULL, MySqlParser.FUNCTION, MySqlParser.GENERAL, MySqlParser.GLOBAL, MySqlParser.GRANTS, MySqlParser.GROUP_REPLICATION, MySqlParser.HANDLER, MySqlParser.HASH, MySqlParser.HELP, MySqlParser.HOST, MySqlParser.HOSTS, MySqlParser.IDENTIFIED, MySqlParser.IGNORE_SERVER_IDS, MySqlParser.IMPORT, MySqlParser.INDEXES, MySqlParser.INITIAL_SIZE, MySqlParser.INPLACE, MySqlParser.INSERT_METHOD, MySqlParser.INSTALL, MySqlParser.INSTANCE, MySqlParser.INVOKER, MySqlParser.IO, MySqlParser.IO_THREAD, MySqlParser.IPC, MySqlParser.ISOLATION, MySqlParser.ISSUER, MySqlParser.JSON, MySqlParser.KEY_BLOCK_SIZE, MySqlParser.LANGUAGE, MySqlParser.LAST, MySqlParser.LEAVES, MySqlParser.LESS, MySqlParser.LEVEL, MySqlParser.LIST, MySqlParser.LOCAL, MySqlParser.LOGFILE, MySqlParser.LOGS, MySqlParser.MASTER, MySqlParser.MASTER_AUTO_POSITION, MySqlParser.MASTER_CONNECT_RETRY, MySqlParser.MASTER_DELAY, MySqlParser.MASTER_HEARTBEAT_PERIOD, MySqlParser.MASTER_HOST, MySqlParser.MASTER_LOG_FILE, MySqlParser.MASTER_LOG_POS, MySqlParser.MASTER_PASSWORD, MySqlParser.MASTER_PORT, MySqlParser.MASTER_RETRY_COUNT, MySqlParser.MASTER_SSL, MySqlParser.MASTER_SSL_CA, MySqlParser.MASTER_SSL_CAPATH, MySqlParser.MASTER_SSL_CERT, MySqlParser.MASTER_SSL_CIPHER, MySqlParser.MASTER_SSL_CRL, MySqlParser.MASTER_SSL_CRLPATH, MySqlParser.MASTER_SSL_KEY, MySqlParser.MASTER_TLS_VERSION, MySqlParser.MASTER_USER, MySqlParser.MAX_CONNECTIONS_PER_HOUR, MySqlParser.MAX_QUERIES_PER_HOUR, MySqlParser.MAX_ROWS, MySqlParser.MAX_SIZE, MySqlParser.MAX_UPDATES_PER_HOUR, MySqlParser.MAX_USER_CONNECTIONS, MySqlParser.MEDIUM, MySqlParser.MERGE, MySqlParser.MID, MySqlParser.MIGRATE, MySqlParser.MIN_ROWS, MySqlParser.MODE, MySqlParser.MODIFY, MySqlParser.MUTEX, MySqlParser.MYSQL, MySqlParser.NAME, MySqlParser.NAMES, MySqlParser.NCHAR, MySqlParser.NEVER, MySqlParser.NEXT, MySqlParser.NO, MySqlParser.NODEGROUP, MySqlParser.NONE, MySqlParser.OFFLINE, MySqlParser.OFFSET, MySqlParser.OJ, MySqlParser.OLD_PASSWORD, MySqlParser.ONE, MySqlParser.ONLINE, MySqlParser.ONLY, MySqlParser.OPEN, MySqlParser.OPTIMIZER_COSTS, MySqlParser.OPTIONS, MySqlParser.OWNER, MySqlParser.PACK_KEYS, MySqlParser.PAGE, MySqlParser.PARSER, MySqlParser.PARTIAL, MySqlParser.PARTITIONING, MySqlParser.PARTITIONS, MySqlParser.PASSWORD, MySqlParser.PHASE, MySqlParser.PLUGIN, MySqlParser.PLUGIN_DIR, MySqlParser.PLUGINS, MySqlParser.PORT, MySqlParser.PRECEDES, MySqlParser.PREPARE, MySqlParser.PRESERVE, MySqlParser.PREV, MySqlParser.PROCESSLIST, MySqlParser.PROFILE, MySqlParser.PROFILES, MySqlParser.PROXY, MySqlParser.QUERY, MySqlParser.QUICK, MySqlParser.REBUILD, MySqlParser.RECOVER, MySqlParser.REDO_BUFFER_SIZE, MySqlParser.REDUNDANT, MySqlParser.RELAY, MySqlParser.RELAY_LOG_FILE, MySqlParser.RELAY_LOG_POS, MySqlParser.RELAYLOG, MySqlParser.REMOVE, MySqlParser.REORGANIZE, MySqlParser.REPAIR, MySqlParser.REPLICATE_DO_DB, MySqlParser.REPLICATE_DO_TABLE, MySqlParser.REPLICATE_IGNORE_DB, MySqlParser.REPLICATE_IGNORE_TABLE, MySqlParser.REPLICATE_REWRITE_DB, MySqlParser.REPLICATE_WILD_DO_TABLE, MySqlParser.REPLICATE_WILD_IGNORE_TABLE, MySqlParser.REPLICATION, MySqlParser.RESET, MySqlParser.RESUME, MySqlParser.RETURNS, MySqlParser.ROLLBACK, MySqlParser.ROLLUP, MySqlParser.ROTATE, MySqlParser.ROW, MySqlParser.ROWS, MySqlParser.ROW_FORMAT, MySqlParser.SAVEPOINT, MySqlParser.SCHEDULE, MySqlParser.SECURITY, MySqlParser.SERVER, MySqlParser.SESSION, MySqlParser.SHARE, MySqlParser.SHARED, MySqlParser.SIGNED, MySqlParser.SIMPLE, MySqlParser.SLAVE, MySqlParser.SLOW, MySqlParser.SNAPSHOT, MySqlParser.SOCKET, MySqlParser.SOME, MySqlParser.SONAME, MySqlParser.SOUNDS, MySqlParser.SOURCE, MySqlParser.SQL_AFTER_GTIDS, MySqlParser.SQL_AFTER_MTS_GAPS, MySqlParser.SQL_BEFORE_GTIDS, MySqlParser.SQL_BUFFER_RESULT, MySqlParser.SQL_CACHE, MySqlParser.SQL_NO_CACHE, MySqlParser.SQL_THREAD, MySqlParser.START, MySqlParser.STARTS, MySqlParser.STATS_AUTO_RECALC, MySqlParser.STATS_PERSISTENT, MySqlParser.STATS_SAMPLE_PAGES, MySqlParser.STATUS, MySqlParser.STOP, MySqlParser.STORAGE, MySqlParser.STRING, MySqlParser.SUBJECT, MySqlParser.SUBPARTITION, MySqlParser.SUBPARTITIONS, MySqlParser.SUSPEND, MySqlParser.SWAPS, MySqlParser.SWITCHES, MySqlParser.TABLESPACE, MySqlParser.TEMPORARY, MySqlParser.TEMPTABLE, MySqlParser.THAN, MySqlParser.TRADITIONAL, MySqlParser.TRANSACTION, MySqlParser.TRIGGERS, MySqlParser.TRUNCATE, MySqlParser.UNDEFINED, MySqlParser.UNDOFILE, MySqlParser.UNDO_BUFFER_SIZE, MySqlParser.UNINSTALL, MySqlParser.UNKNOWN, MySqlParser.UNTIL, MySqlParser.UPGRADE, MySqlParser.USER, MySqlParser.USE_FRM, MySqlParser.USER_RESOURCES, MySqlParser.VALIDATION, MySqlParser.VALUE, MySqlParser.VARIABLES, MySqlParser.VIEW, MySqlParser.WAIT, MySqlParser.WARNINGS, MySqlParser.WITHOUT, MySqlParser.WORK, MySqlParser.WRAPPER, MySqlParser.X509, MySqlParser.XA, MySqlParser.XML, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.TABLES, MySqlParser.ROUTINE, MySqlParser.EXECUTE, MySqlParser.FILE, MySqlParser.PROCESS, MySqlParser.RELOAD, MySqlParser.SHUTDOWN, MySqlParser.SUPER, MySqlParser.PRIVILEGES, MySqlParser.ARMSCII8, MySqlParser.ASCII, MySqlParser.BIG5, MySqlParser.CP1250, MySqlParser.CP1251, MySqlParser.CP1256, MySqlParser.CP1257, MySqlParser.CP850, MySqlParser.CP852, MySqlParser.CP866, MySqlParser.CP932, MySqlParser.DEC8, MySqlParser.EUCJPMS, MySqlParser.EUCKR, MySqlParser.GB2312, MySqlParser.GBK, MySqlParser.GEOSTD8, MySqlParser.GREEK, MySqlParser.HEBREW, MySqlParser.HP8, MySqlParser.KEYBCS2, MySqlParser.KOI8R, MySqlParser.KOI8U, MySqlParser.LATIN1, MySqlParser.LATIN2, MySqlParser.LATIN5, MySqlParser.LATIN7, MySqlParser.MACCE, MySqlParser.MACROMAN, MySqlParser.SJIS, MySqlParser.SWE7, MySqlParser.TIS620, MySqlParser.UCS2, MySqlParser.UJIS, MySqlParser.UTF16, MySqlParser.UTF16LE, MySqlParser.UTF32, MySqlParser.UTF8, MySqlParser.UTF8MB3, MySqlParser.UTF8MB4, MySqlParser.ARCHIVE, MySqlParser.BLACKHOLE, MySqlParser.CSV, MySqlParser.FEDERATED, MySqlParser.INNODB, MySqlParser.MEMORY, MySqlParser.MRG_MYISAM, MySqlParser.MYISAM, MySqlParser.NDB, MySqlParser.NDBCLUSTER, MySqlParser.PERFOMANCE_SCHEMA, MySqlParser.REPEATABLE, MySqlParser.COMMITTED, MySqlParser.UNCOMMITTED, MySqlParser.SERIALIZABLE, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION, MySqlParser.PLUS, MySqlParser.MINUS, MySqlParser.EXCLAMATION_SYMBOL, MySqlParser.BIT_NOT_OP, MySqlParser.LR_BRACKET, MySqlParser.ZERO_DECIMAL, MySqlParser.ONE_DECIMAL, MySqlParser.TWO_DECIMAL, MySqlParser.CHARSET_REVERSE_QOUTE_STRING, MySqlParser.START_NATIONAL_STRING_LITERAL, MySqlParser.STRING_LITERAL, MySqlParser.DECIMAL_LITERAL, MySqlParser.HEXADECIMAL_LITERAL, MySqlParser.REAL_LITERAL, MySqlParser.NULL_SPEC_LITERAL, MySqlParser.BIT_STRING, MySqlParser.STRING_CHARSET_NAME, MySqlParser.ID, MySqlParser.REVERSE_QUOTE_ID, MySqlParser.LOCAL_ID, MySqlParser.GLOBAL_ID]:
                    self.state = 5728
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==MySqlParser.ALL:
                        self.state = 5727
                        localctx.aggregator = self.match(MySqlParser.ALL)


                    self.state = 5730
                    self.functionArg()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5733
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5734
                self.match(MySqlParser.COUNT)
                self.state = 5735
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5736
                localctx.aggregator = self.match(MySqlParser.DISTINCT)
                self.state = 5737
                self.functionArgs()
                self.state = 5738
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5740
                _la = self._input.LA(1)
                if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (MySqlParser.BIT_AND - 210)) | (1 << (MySqlParser.BIT_OR - 210)) | (1 << (MySqlParser.BIT_XOR - 210)) | (1 << (MySqlParser.STD - 210)) | (1 << (MySqlParser.STDDEV - 210)) | (1 << (MySqlParser.STDDEV_POP - 210)) | (1 << (MySqlParser.STDDEV_SAMP - 210)) | (1 << (MySqlParser.VAR_POP - 210)) | (1 << (MySqlParser.VAR_SAMP - 210)) | (1 << (MySqlParser.VARIANCE - 210)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5741
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ALL:
                    self.state = 5742
                    localctx.aggregator = self.match(MySqlParser.ALL)


                self.state = 5745
                self.functionArg()
                self.state = 5746
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5748
                self.match(MySqlParser.GROUP_CONCAT)
                self.state = 5749
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5751
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.DISTINCT:
                    self.state = 5750
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)


                self.state = 5753
                self.functionArgs()
                self.state = 5764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.ORDER:
                    self.state = 5754
                    self.match(MySqlParser.ORDER)
                    self.state = 5755
                    self.match(MySqlParser.BY)
                    self.state = 5756
                    self.orderByExpression()
                    self.state = 5761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==MySqlParser.COMMA:
                        self.state = 5757
                        self.match(MySqlParser.COMMA)
                        self.state = 5758
                        self.orderByExpression()
                        self.state = 5763
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 5768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.SEPARATOR:
                    self.state = 5766
                    self.match(MySqlParser.SEPARATOR)
                    self.state = 5767
                    localctx.separator = self.match(MySqlParser.STRING_LITERAL)


                self.state = 5770
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ScalarFunctionNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(MySqlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(MySqlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySqlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(MySqlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(MySqlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(MySqlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySqlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySqlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_scalarFunctionName

        def enterRule(self, listener):
            if hasattr(listener, "enterScalarFunctionName"):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitScalarFunctionName"):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = MySqlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_scalarFunctionName)
        try:
            self.state = 5797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.DATABASE, MySqlParser.LEFT, MySqlParser.RIGHT, MySqlParser.DATE, MySqlParser.TIME, MySqlParser.TIMESTAMP, MySqlParser.YEAR, MySqlParser.COUNT, MySqlParser.POSITION, MySqlParser.QUARTER, MySqlParser.MONTH, MySqlParser.DAY, MySqlParser.HOUR, MySqlParser.MINUTE, MySqlParser.WEEK, MySqlParser.SECOND, MySqlParser.MICROSECOND, MySqlParser.GEOMETRYCOLLECTION, MySqlParser.LINESTRING, MySqlParser.MULTILINESTRING, MySqlParser.MULTIPOINT, MySqlParser.MULTIPOLYGON, MySqlParser.POINT, MySqlParser.POLYGON, MySqlParser.ABS, MySqlParser.ACOS, MySqlParser.ADDDATE, MySqlParser.ADDTIME, MySqlParser.AES_DECRYPT, MySqlParser.AES_ENCRYPT, MySqlParser.AREA, MySqlParser.ASBINARY, MySqlParser.ASIN, MySqlParser.ASTEXT, MySqlParser.ASWKB, MySqlParser.ASWKT, MySqlParser.ASYMMETRIC_DECRYPT, MySqlParser.ASYMMETRIC_DERIVE, MySqlParser.ASYMMETRIC_ENCRYPT, MySqlParser.ASYMMETRIC_SIGN, MySqlParser.ASYMMETRIC_VERIFY, MySqlParser.ATAN, MySqlParser.ATAN2, MySqlParser.BENCHMARK, MySqlParser.BIN, MySqlParser.BIT_COUNT, MySqlParser.BIT_LENGTH, MySqlParser.BUFFER, MySqlParser.CEIL, MySqlParser.CEILING, MySqlParser.CENTROID, MySqlParser.CHARACTER_LENGTH, MySqlParser.CHARSET, MySqlParser.CHAR_LENGTH, MySqlParser.COERCIBILITY, MySqlParser.COLLATION, MySqlParser.COMPRESS, MySqlParser.CONCAT, MySqlParser.CONCAT_WS, MySqlParser.CONNECTION_ID, MySqlParser.CONV, MySqlParser.CONVERT_TZ, MySqlParser.COS, MySqlParser.COT, MySqlParser.CRC32, MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, MySqlParser.CREATE_DH_PARAMETERS, MySqlParser.CREATE_DIGEST, MySqlParser.CROSSES, MySqlParser.DATEDIFF, MySqlParser.DATE_FORMAT, MySqlParser.DAYNAME, MySqlParser.DAYOFMONTH, MySqlParser.DAYOFWEEK, MySqlParser.DAYOFYEAR, MySqlParser.DECODE, MySqlParser.DEGREES, MySqlParser.DES_DECRYPT, MySqlParser.DES_ENCRYPT, MySqlParser.DIMENSION, MySqlParser.DISJOINT, MySqlParser.ELT, MySqlParser.ENCODE, MySqlParser.ENCRYPT, MySqlParser.ENDPOINT, MySqlParser.ENVELOPE, MySqlParser.EQUALS, MySqlParser.EXP, MySqlParser.EXPORT_SET, MySqlParser.EXTERIORRING, MySqlParser.EXTRACTVALUE, MySqlParser.FIELD, MySqlParser.FIND_IN_SET, MySqlParser.FLOOR, MySqlParser.FORMAT, MySqlParser.FOUND_ROWS, MySqlParser.FROM_BASE64, MySqlParser.FROM_DAYS, MySqlParser.FROM_UNIXTIME, MySqlParser.GEOMCOLLFROMTEXT, MySqlParser.GEOMCOLLFROMWKB, MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.GEOMETRYCOLLECTIONFROMWKB, MySqlParser.GEOMETRYFROMTEXT, MySqlParser.GEOMETRYFROMWKB, MySqlParser.GEOMETRYN, MySqlParser.GEOMETRYTYPE, MySqlParser.GEOMFROMTEXT, MySqlParser.GEOMFROMWKB, MySqlParser.GET_FORMAT, MySqlParser.GET_LOCK, MySqlParser.GLENGTH, MySqlParser.GREATEST, MySqlParser.GTID_SUBSET, MySqlParser.GTID_SUBTRACT, MySqlParser.HEX, MySqlParser.IFNULL, MySqlParser.INET6_ATON, MySqlParser.INET6_NTOA, MySqlParser.INET_ATON, MySqlParser.INET_NTOA, MySqlParser.INSTR, MySqlParser.INTERIORRINGN, MySqlParser.INTERSECTS, MySqlParser.ISCLOSED, MySqlParser.ISEMPTY, MySqlParser.ISNULL, MySqlParser.ISSIMPLE, MySqlParser.IS_FREE_LOCK, MySqlParser.IS_IPV4, MySqlParser.IS_IPV4_COMPAT, MySqlParser.IS_IPV4_MAPPED, MySqlParser.IS_IPV6, MySqlParser.IS_USED_LOCK, MySqlParser.LAST_INSERT_ID, MySqlParser.LCASE, MySqlParser.LEAST, MySqlParser.LENGTH, MySqlParser.LINEFROMTEXT, MySqlParser.LINEFROMWKB, MySqlParser.LINESTRINGFROMTEXT, MySqlParser.LINESTRINGFROMWKB, MySqlParser.LN, MySqlParser.LOAD_FILE, MySqlParser.LOCATE, MySqlParser.LOG, MySqlParser.LOG10, MySqlParser.LOG2, MySqlParser.LOWER, MySqlParser.LPAD, MySqlParser.LTRIM, MySqlParser.MAKEDATE, MySqlParser.MAKETIME, MySqlParser.MAKE_SET, MySqlParser.MASTER_POS_WAIT, MySqlParser.MBRCONTAINS, MySqlParser.MBRDISJOINT, MySqlParser.MBREQUAL, MySqlParser.MBRINTERSECTS, MySqlParser.MBROVERLAPS, MySqlParser.MBRTOUCHES, MySqlParser.MBRWITHIN, MySqlParser.MD5, MySqlParser.MLINEFROMTEXT, MySqlParser.MLINEFROMWKB, MySqlParser.MONTHNAME, MySqlParser.MPOINTFROMTEXT, MySqlParser.MPOINTFROMWKB, MySqlParser.MPOLYFROMTEXT, MySqlParser.MPOLYFROMWKB, MySqlParser.MULTILINESTRINGFROMTEXT, MySqlParser.MULTILINESTRINGFROMWKB, MySqlParser.MULTIPOINTFROMTEXT, MySqlParser.MULTIPOINTFROMWKB, MySqlParser.MULTIPOLYGONFROMTEXT, MySqlParser.MULTIPOLYGONFROMWKB, MySqlParser.NAME_CONST, MySqlParser.NULLIF, MySqlParser.NUMGEOMETRIES, MySqlParser.NUMINTERIORRINGS, MySqlParser.NUMPOINTS, MySqlParser.OCT, MySqlParser.OCTET_LENGTH, MySqlParser.ORD, MySqlParser.OVERLAPS, MySqlParser.PERIOD_ADD, MySqlParser.PERIOD_DIFF, MySqlParser.PI, MySqlParser.POINTFROMTEXT, MySqlParser.POINTFROMWKB, MySqlParser.POINTN, MySqlParser.POLYFROMTEXT, MySqlParser.POLYFROMWKB, MySqlParser.POLYGONFROMTEXT, MySqlParser.POLYGONFROMWKB, MySqlParser.POW, MySqlParser.POWER, MySqlParser.QUOTE, MySqlParser.RADIANS, MySqlParser.RAND, MySqlParser.RANDOM_BYTES, MySqlParser.RELEASE_LOCK, MySqlParser.REVERSE, MySqlParser.ROUND, MySqlParser.ROW_COUNT, MySqlParser.RPAD, MySqlParser.RTRIM, MySqlParser.SEC_TO_TIME, MySqlParser.SESSION_USER, MySqlParser.SHA, MySqlParser.SHA1, MySqlParser.SHA2, MySqlParser.SIGN, MySqlParser.SIN, MySqlParser.SLEEP, MySqlParser.SOUNDEX, MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, MySqlParser.SQRT, MySqlParser.SRID, MySqlParser.STARTPOINT, MySqlParser.STRCMP, MySqlParser.STR_TO_DATE, MySqlParser.ST_AREA, MySqlParser.ST_ASBINARY, MySqlParser.ST_ASTEXT, MySqlParser.ST_ASWKB, MySqlParser.ST_ASWKT, MySqlParser.ST_BUFFER, MySqlParser.ST_CENTROID, MySqlParser.ST_CONTAINS, MySqlParser.ST_CROSSES, MySqlParser.ST_DIFFERENCE, MySqlParser.ST_DIMENSION, MySqlParser.ST_DISJOINT, MySqlParser.ST_DISTANCE, MySqlParser.ST_ENDPOINT, MySqlParser.ST_ENVELOPE, MySqlParser.ST_EQUALS, MySqlParser.ST_EXTERIORRING, MySqlParser.ST_GEOMCOLLFROMTEXT, MySqlParser.ST_GEOMCOLLFROMTXT, MySqlParser.ST_GEOMCOLLFROMWKB, MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, MySqlParser.ST_GEOMETRYFROMTEXT, MySqlParser.ST_GEOMETRYFROMWKB, MySqlParser.ST_GEOMETRYN, MySqlParser.ST_GEOMETRYTYPE, MySqlParser.ST_GEOMFROMTEXT, MySqlParser.ST_GEOMFROMWKB, MySqlParser.ST_INTERIORRINGN, MySqlParser.ST_INTERSECTION, MySqlParser.ST_INTERSECTS, MySqlParser.ST_ISCLOSED, MySqlParser.ST_ISEMPTY, MySqlParser.ST_ISSIMPLE, MySqlParser.ST_LINEFROMTEXT, MySqlParser.ST_LINEFROMWKB, MySqlParser.ST_LINESTRINGFROMTEXT, MySqlParser.ST_LINESTRINGFROMWKB, MySqlParser.ST_NUMGEOMETRIES, MySqlParser.ST_NUMINTERIORRING, MySqlParser.ST_NUMINTERIORRINGS, MySqlParser.ST_NUMPOINTS, MySqlParser.ST_OVERLAPS, MySqlParser.ST_POINTFROMTEXT, MySqlParser.ST_POINTFROMWKB, MySqlParser.ST_POINTN, MySqlParser.ST_POLYFROMTEXT, MySqlParser.ST_POLYFROMWKB, MySqlParser.ST_POLYGONFROMTEXT, MySqlParser.ST_POLYGONFROMWKB, MySqlParser.ST_SRID, MySqlParser.ST_STARTPOINT, MySqlParser.ST_SYMDIFFERENCE, MySqlParser.ST_TOUCHES, MySqlParser.ST_UNION, MySqlParser.ST_WITHIN, MySqlParser.ST_X, MySqlParser.ST_Y, MySqlParser.SUBDATE, MySqlParser.SUBSTRING_INDEX, MySqlParser.SUBTIME, MySqlParser.SYSTEM_USER, MySqlParser.TAN, MySqlParser.TIMEDIFF, MySqlParser.TIMESTAMPADD, MySqlParser.TIMESTAMPDIFF, MySqlParser.TIME_FORMAT, MySqlParser.TIME_TO_SEC, MySqlParser.TOUCHES, MySqlParser.TO_BASE64, MySqlParser.TO_DAYS, MySqlParser.TO_SECONDS, MySqlParser.UCASE, MySqlParser.UNCOMPRESS, MySqlParser.UNCOMPRESSED_LENGTH, MySqlParser.UNHEX, MySqlParser.UNIX_TIMESTAMP, MySqlParser.UPDATEXML, MySqlParser.UPPER, MySqlParser.UUID, MySqlParser.UUID_SHORT, MySqlParser.VALIDATE_PASSWORD_STRENGTH, MySqlParser.VERSION, MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, MySqlParser.WEEKDAY, MySqlParser.WEEKOFYEAR, MySqlParser.WEIGHT_STRING, MySqlParser.WITHIN, MySqlParser.YEARWEEK, MySqlParser.Y_FUNCTION, MySqlParser.X_FUNCTION]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5774
                self.functionNameBase()
                pass
            elif token in [MySqlParser.ASCII]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5775
                self.match(MySqlParser.ASCII)
                pass
            elif token in [MySqlParser.CURDATE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5776
                self.match(MySqlParser.CURDATE)
                pass
            elif token in [MySqlParser.CURRENT_DATE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5777
                self.match(MySqlParser.CURRENT_DATE)
                pass
            elif token in [MySqlParser.CURRENT_TIME]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5778
                self.match(MySqlParser.CURRENT_TIME)
                pass
            elif token in [MySqlParser.CURRENT_TIMESTAMP]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5779
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [MySqlParser.CURTIME]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5780
                self.match(MySqlParser.CURTIME)
                pass
            elif token in [MySqlParser.DATE_ADD]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5781
                self.match(MySqlParser.DATE_ADD)
                pass
            elif token in [MySqlParser.DATE_SUB]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5782
                self.match(MySqlParser.DATE_SUB)
                pass
            elif token in [MySqlParser.IF]:
                self.enterOuterAlt(localctx, 10)
                self.state = 5783
                self.match(MySqlParser.IF)
                pass
            elif token in [MySqlParser.INSERT]:
                self.enterOuterAlt(localctx, 11)
                self.state = 5784
                self.match(MySqlParser.INSERT)
                pass
            elif token in [MySqlParser.LOCALTIME]:
                self.enterOuterAlt(localctx, 12)
                self.state = 5785
                self.match(MySqlParser.LOCALTIME)
                pass
            elif token in [MySqlParser.LOCALTIMESTAMP]:
                self.enterOuterAlt(localctx, 13)
                self.state = 5786
                self.match(MySqlParser.LOCALTIMESTAMP)
                pass
            elif token in [MySqlParser.MID]:
                self.enterOuterAlt(localctx, 14)
                self.state = 5787
                self.match(MySqlParser.MID)
                pass
            elif token in [MySqlParser.NOW]:
                self.enterOuterAlt(localctx, 15)
                self.state = 5788
                self.match(MySqlParser.NOW)
                pass
            elif token in [MySqlParser.REPLACE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 5789
                self.match(MySqlParser.REPLACE)
                pass
            elif token in [MySqlParser.SUBSTR]:
                self.enterOuterAlt(localctx, 17)
                self.state = 5790
                self.match(MySqlParser.SUBSTR)
                pass
            elif token in [MySqlParser.SUBSTRING]:
                self.enterOuterAlt(localctx, 18)
                self.state = 5791
                self.match(MySqlParser.SUBSTRING)
                pass
            elif token in [MySqlParser.SYSDATE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 5792
                self.match(MySqlParser.SYSDATE)
                pass
            elif token in [MySqlParser.TRIM]:
                self.enterOuterAlt(localctx, 20)
                self.state = 5793
                self.match(MySqlParser.TRIM)
                pass
            elif token in [MySqlParser.UTC_DATE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 5794
                self.match(MySqlParser.UTC_DATE)
                pass
            elif token in [MySqlParser.UTC_TIME]:
                self.enterOuterAlt(localctx, 22)
                self.state = 5795
                self.match(MySqlParser.UTC_TIME)
                pass
            elif token in [MySqlParser.UTC_TIMESTAMP]:
                self.enterOuterAlt(localctx, 23)
                self.state = 5796
                self.match(MySqlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PasswordFunctionClauseContext, self).__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_passwordFunctionClause

        def enterRule(self, listener):
            if hasattr(listener, "enterPasswordFunctionClause"):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPasswordFunctionClause"):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = MySqlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5799
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==MySqlParser.OLD_PASSWORD or _la==MySqlParser.PASSWORD):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5800
            self.match(MySqlParser.LR_BRACKET)
            self.state = 5801
            self.functionArg()
            self.state = 5802
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FunctionArgsContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def fullColumnName(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def functionCall(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionCallContext,i)


        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionArgs

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionArgs"):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionArgs"):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = MySqlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,843,self._ctx)
            if la_ == 1:
                self.state = 5804
                self.constant()
                pass

            elif la_ == 2:
                self.state = 5805
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 5806
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 5807
                self.expression(0)
                pass


            self.state = 5819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==MySqlParser.COMMA:
                self.state = 5810
                self.match(MySqlParser.COMMA)
                self.state = 5815
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,844,self._ctx)
                if la_ == 1:
                    self.state = 5811
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 5812
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 5813
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 5814
                    self.expression(0)
                    pass


                self.state = 5821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FunctionArgContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionArg

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionArg"):
                listener.enterFunctionArg(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionArg"):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = MySqlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_functionArg)
        try:
            self.state = 5826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,846,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5822
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5823
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5824
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5825
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expression

     
        def copyFrom(self, ctx):
            super(MySqlParser.ExpressionContext, self).copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionContext)
            super(MySqlParser.IsExpressionContext, self).__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterIsExpression"):
                listener.enterIsExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsExpression"):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionContext)
            super(MySqlParser.NotExpressionContext, self).__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterNotExpression"):
                listener.enterNotExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNotExpression"):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionContext)
            super(MySqlParser.LogicalExpressionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(MySqlParser.LogicalOperatorContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterLogicalExpression"):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLogicalExpression"):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionContext)
            super(MySqlParser.PredicateExpressionContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterPredicateExpression"):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPredicateExpression"):
                listener.exitPredicateExpression(self)



    def expression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 586
        self.enterRecursionRule(localctx, 586, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,848,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5829
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.NOT or _la==MySqlParser.EXCLAMATION_SYMBOL):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5830
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = MySqlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5831
                self.predicate(0)
                self.state = 5832
                self.match(MySqlParser.IS)
                self.state = 5834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==MySqlParser.NOT:
                    self.state = 5833
                    self.match(MySqlParser.NOT)


                self.state = 5836
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==MySqlParser.FALSE or _la==MySqlParser.TRUE or _la==MySqlParser.UNKNOWN):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = MySqlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5838
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5847
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,849,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MySqlParser.LogicalExpressionContext(self, MySqlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 5841
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 5842
                    self.logicalOperator()
                    self.state = 5843
                    self.expression(4) 
                self.state = 5849
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,849,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PredicateContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_predicate

     
        def copyFrom(self, ctx):
            super(MySqlParser.PredicateContext, self).copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.SoundsLikePredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSoundsLikePredicate"):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSoundsLikePredicate"):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.ExpressionAtomPredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterExpressionAtomPredicate"):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExpressionAtomPredicate"):
                listener.exitExpressionAtomPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.InPredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterInPredicate"):
                listener.enterInPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitInPredicate"):
                listener.exitInPredicate(self)


    class SubqueryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.SubqueryComparasionPredicateContext, self).__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)
        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubqueryComparasionPredicate"):
                listener.enterSubqueryComparasionPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubqueryComparasionPredicate"):
                listener.exitSubqueryComparasionPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.BetweenPredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(MySqlParser.AND, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterBetweenPredicate"):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBetweenPredicate"):
                listener.exitBetweenPredicate(self)


    class BinaryComparasionPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.BinaryComparasionPredicateContext, self).__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterBinaryComparasionPredicate"):
                listener.enterBinaryComparasionPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBinaryComparasionPredicate"):
                listener.exitBinaryComparasionPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.IsNullPredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterIsNullPredicate"):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIsNullPredicate"):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.LikePredicateContext, self).__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterLikePredicate"):
                listener.enterLikePredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLikePredicate"):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.PredicateContext)
            super(MySqlParser.RegexpPredicateContext, self).__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(MySqlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(MySqlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterRegexpPredicate"):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitRegexpPredicate"):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 588
        self.enterRecursionRule(localctx, 588, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySqlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 5853
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,850,self._ctx)
            if la_ == 1:
                self.state = 5851
                self.match(MySqlParser.LOCAL_ID)
                self.state = 5852
                self.match(MySqlParser.VAR_ASSIGN)


            self.state = 5855
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 5914
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,858,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5912
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BinaryComparasionPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5857
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 5858
                        self.comparisonOperator()
                        self.state = 5859
                        localctx.right = self.predicate(8)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.BetweenPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5861
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 5863
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 5862
                            self.match(MySqlParser.NOT)


                        self.state = 5865
                        self.match(MySqlParser.BETWEEN)
                        self.state = 5866
                        self.predicate(0)
                        self.state = 5867
                        self.match(MySqlParser.AND)
                        self.state = 5868
                        self.predicate(6)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.SoundsLikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5870
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 5871
                        self.match(MySqlParser.SOUNDS)
                        self.state = 5872
                        self.match(MySqlParser.LIKE)
                        self.state = 5873
                        self.predicate(5)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.RegexpPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5874
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5876
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 5875
                            self.match(MySqlParser.NOT)


                        self.state = 5878
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.REGEXP or _la==MySqlParser.RLIKE):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5879
                        self.predicate(3)
                        pass

                    elif la_ == 5:
                        localctx = MySqlParser.InPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5880
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 5882
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 5881
                            self.match(MySqlParser.NOT)


                        self.state = 5884
                        self.match(MySqlParser.IN)
                        self.state = 5885
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 5888
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,854,self._ctx)
                        if la_ == 1:
                            self.state = 5886
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 5887
                            self.expressions()
                            pass


                        self.state = 5890
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = MySqlParser.IsNullPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5892
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 5893
                        self.match(MySqlParser.IS)
                        self.state = 5894
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = MySqlParser.SubqueryComparasionPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5895
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 5896
                        self.comparisonOperator()
                        self.state = 5897
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==MySqlParser.ALL or _la==MySqlParser.ANY or _la==MySqlParser.SOME):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 5898
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 5899
                        self.selectStatement()
                        self.state = 5900
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = MySqlParser.LikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 5902
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 5904
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==MySqlParser.NOT:
                            self.state = 5903
                            self.match(MySqlParser.NOT)


                        self.state = 5906
                        self.match(MySqlParser.LIKE)
                        self.state = 5907
                        self.predicate(0)
                        self.state = 5910
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,856,self._ctx)
                        if la_ == 1:
                            self.state = 5908
                            self.match(MySqlParser.ESCAPE)
                            self.state = 5909
                            self.match(MySqlParser.STRING_LITERAL)


                        pass

             
                self.state = 5916
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,858,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ExpressionAtomContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx):
            super(MySqlParser.ExpressionAtomContext, self).copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.UnaryExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterUnaryExpressionAtom"):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnaryExpressionAtom"):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.CollateExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterCollateExpressionAtom"):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCollateExpressionAtom"):
                listener.exitCollateExpressionAtom(self)


    class SubqueryExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.SubqueryExpessionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterSubqueryExpessionAtom"):
                listener.enterSubqueryExpessionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitSubqueryExpessionAtom"):
                listener.exitSubqueryExpessionAtom(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.MysqlVariableExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterMysqlVariableExpressionAtom"):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMysqlVariableExpressionAtom"):
                listener.exitMysqlVariableExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.NestedExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterNestedExpressionAtom"):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNestedExpressionAtom"):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.NestedRowExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener):
            if hasattr(listener, "enterNestedRowExpressionAtom"):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitNestedRowExpressionAtom"):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.MathExpressionAtomContext, self).__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(MySqlParser.MathOperatorContext,0)

        def expressionAtom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterMathExpressionAtom"):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMathExpressionAtom"):
                listener.exitMathExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.IntervalExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterIntervalExpressionAtom"):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntervalExpressionAtom"):
                listener.exitIntervalExpressionAtom(self)


    class ExistsExpessionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.ExistsExpessionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener):
            if hasattr(listener, "enterExistsExpessionAtom"):
                listener.enterExistsExpessionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitExistsExpessionAtom"):
                listener.exitExistsExpessionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.ConstantExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterConstantExpressionAtom"):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitConstantExpressionAtom"):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.FunctionCallExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionCallExpressionAtom"):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionCallExpressionAtom"):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.BinaryExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterBinaryExpressionAtom"):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBinaryExpressionAtom"):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.FullColumnNameExpressionAtomContext, self).__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def enterRule(self, listener):
            if hasattr(listener, "enterFullColumnNameExpressionAtom"):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFullColumnNameExpressionAtom"):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx): # actually a MySqlParser.ExpressionAtomContext)
            super(MySqlParser.BitExpressionAtomContext, self).__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(MySqlParser.BitOperatorContext,0)

        def expressionAtom(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener):
            if hasattr(listener, "enterBitExpressionAtom"):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBitExpressionAtom"):
                listener.exitBitExpressionAtom(self)



    def expressionAtom(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 590
        self.enterRecursionRule(localctx, 590, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,861,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 5918
                self.constant()
                pass

            elif la_ == 2:
                localctx = MySqlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5919
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = MySqlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5920
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = MySqlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5921
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = MySqlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5922
                self.unaryOperator()
                self.state = 5923
                self.expressionAtom(9)
                pass

            elif la_ == 6:
                localctx = MySqlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5925
                self.match(MySqlParser.BINARY)
                self.state = 5926
                self.expressionAtom(8)
                pass

            elif la_ == 7:
                localctx = MySqlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5927
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5928
                self.expression(0)
                self.state = 5933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==MySqlParser.COMMA:
                    self.state = 5929
                    self.match(MySqlParser.COMMA)
                    self.state = 5930
                    self.expression(0)
                    self.state = 5935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5936
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = MySqlParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5938
                self.match(MySqlParser.ROW)
                self.state = 5939
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5940
                self.expression(0)
                self.state = 5943 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 5941
                    self.match(MySqlParser.COMMA)
                    self.state = 5942
                    self.expression(0)
                    self.state = 5945 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==MySqlParser.COMMA):
                        break

                self.state = 5947
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.ExistsExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5949
                self.match(MySqlParser.EXISTS)
                self.state = 5950
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5951
                self.selectStatement()
                self.state = 5952
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubqueryExpessionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5954
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5955
                self.selectStatement()
                self.state = 5956
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 5958
                self.match(MySqlParser.INTERVAL)
                self.state = 5959
                self.expression(0)
                self.state = 5960
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 5977
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,863,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 5975
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BitExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 5964
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 5965
                        self.bitOperator()
                        self.state = 5966
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.MathExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 5968
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 5969
                        self.mathOperator()
                        self.state = 5970
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.CollateExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 5972
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 5973
                        self.match(MySqlParser.COLLATE)
                        self.state = 5974
                        self.collationName()
                        pass

             
                self.state = 5979
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,863,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.UnaryOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(MySqlParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unaryOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterUnaryOperator"):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitUnaryOperator"):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = MySqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5980
            _la = self._input.LA(1)
            if not(_la==MySqlParser.NOT or ((((_la - 931)) & ~0x3f) == 0 and ((1 << (_la - 931)) & ((1 << (MySqlParser.PLUS - 931)) | (1 << (MySqlParser.MINUS - 931)) | (1 << (MySqlParser.EXCLAMATION_SYMBOL - 931)) | (1 << (MySqlParser.BIT_NOT_OP - 931)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.ComparisonOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_comparisonOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterComparisonOperator"):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitComparisonOperator"):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = MySqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_comparisonOperator)
        try:
            self.state = 5996
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5982
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5983
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5984
                self.match(MySqlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5985
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 5986
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5987
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 5988
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5989
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 5990
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5991
                self.match(MySqlParser.EXCLAMATION_SYMBOL)
                self.state = 5992
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5993
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 5994
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5995
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.LogicalOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def BIT_AND_OP(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_AND_OP)
            else:
                return self.getToken(MySqlParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(MySqlParser.XOR, 0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def BIT_OR_OP(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_OR_OP)
            else:
                return self.getToken(MySqlParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_logicalOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterLogicalOperator"):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitLogicalOperator"):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = MySqlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_logicalOperator)
        try:
            self.state = 6005
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.AND]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5998
                self.match(MySqlParser.AND)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5999
                self.match(MySqlParser.BIT_AND_OP)
                self.state = 6000
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.XOR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6001
                self.match(MySqlParser.XOR)
                pass
            elif token in [MySqlParser.OR]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6002
                self.match(MySqlParser.OR)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6003
                self.match(MySqlParser.BIT_OR_OP)
                self.state = 6004
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.BitOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.LESS_SYMBOL)
            else:
                return self.getToken(MySqlParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(MySqlParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(MySqlParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(MySqlParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_bitOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterBitOperator"):
                listener.enterBitOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitBitOperator"):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = MySqlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_bitOperator)
        try:
            self.state = 6014
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [MySqlParser.LESS_SYMBOL]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6007
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 6008
                self.match(MySqlParser.LESS_SYMBOL)
                pass
            elif token in [MySqlParser.GREATER_SYMBOL]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6009
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 6010
                self.match(MySqlParser.GREATER_SYMBOL)
                pass
            elif token in [MySqlParser.BIT_AND_OP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6011
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [MySqlParser.BIT_XOR_OP]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6012
                self.match(MySqlParser.BIT_XOR_OP)
                pass
            elif token in [MySqlParser.BIT_OR_OP]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6013
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.MathOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(MySqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(MySqlParser.MODULE, 0)

        def DIV(self):
            return self.getToken(MySqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def MINUSMINUS(self):
            return self.getToken(MySqlParser.MINUSMINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mathOperator

        def enterRule(self, listener):
            if hasattr(listener, "enterMathOperator"):
                listener.enterMathOperator(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitMathOperator"):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = MySqlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6016
            _la = self._input.LA(1)
            if not(((((_la - 928)) & ~0x3f) == 0 and ((1 << (_la - 928)) & ((1 << (MySqlParser.STAR - 928)) | (1 << (MySqlParser.DIVIDE - 928)) | (1 << (MySqlParser.MODULE - 928)) | (1 << (MySqlParser.PLUS - 928)) | (1 << (MySqlParser.MINUSMINUS - 928)) | (1 << (MySqlParser.MINUS - 928)) | (1 << (MySqlParser.DIV - 928)) | (1 << (MySqlParser.MOD - 928)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.CharsetNameBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(MySqlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(MySqlParser.BIG5, 0)

        def CP1250(self):
            return self.getToken(MySqlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(MySqlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(MySqlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(MySqlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(MySqlParser.CP850, 0)

        def CP852(self):
            return self.getToken(MySqlParser.CP852, 0)

        def CP866(self):
            return self.getToken(MySqlParser.CP866, 0)

        def CP932(self):
            return self.getToken(MySqlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(MySqlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(MySqlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(MySqlParser.EUCKR, 0)

        def GB2312(self):
            return self.getToken(MySqlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(MySqlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(MySqlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(MySqlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(MySqlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(MySqlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(MySqlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(MySqlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(MySqlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(MySqlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(MySqlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(MySqlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(MySqlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(MySqlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(MySqlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(MySqlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(MySqlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(MySqlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(MySqlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(MySqlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(MySqlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(MySqlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(MySqlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(MySqlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(MySqlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(MySqlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetNameBase

        def enterRule(self, listener):
            if hasattr(listener, "enterCharsetNameBase"):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitCharsetNameBase"):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = MySqlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6018
            _la = self._input.LA(1)
            if not(((((_la - 567)) & ~0x3f) == 0 and ((1 << (_la - 567)) & ((1 << (MySqlParser.ARMSCII8 - 567)) | (1 << (MySqlParser.ASCII - 567)) | (1 << (MySqlParser.BIG5 - 567)) | (1 << (MySqlParser.CP1250 - 567)) | (1 << (MySqlParser.CP1251 - 567)) | (1 << (MySqlParser.CP1256 - 567)) | (1 << (MySqlParser.CP1257 - 567)) | (1 << (MySqlParser.CP850 - 567)) | (1 << (MySqlParser.CP852 - 567)) | (1 << (MySqlParser.CP866 - 567)) | (1 << (MySqlParser.CP932 - 567)) | (1 << (MySqlParser.DEC8 - 567)) | (1 << (MySqlParser.EUCJPMS - 567)) | (1 << (MySqlParser.EUCKR - 567)) | (1 << (MySqlParser.GB2312 - 567)) | (1 << (MySqlParser.GBK - 567)) | (1 << (MySqlParser.GEOSTD8 - 567)) | (1 << (MySqlParser.GREEK - 567)) | (1 << (MySqlParser.HEBREW - 567)) | (1 << (MySqlParser.HP8 - 567)) | (1 << (MySqlParser.KEYBCS2 - 567)) | (1 << (MySqlParser.KOI8R - 567)) | (1 << (MySqlParser.KOI8U - 567)) | (1 << (MySqlParser.LATIN1 - 567)) | (1 << (MySqlParser.LATIN2 - 567)) | (1 << (MySqlParser.LATIN5 - 567)) | (1 << (MySqlParser.LATIN7 - 567)) | (1 << (MySqlParser.MACCE - 567)) | (1 << (MySqlParser.MACROMAN - 567)) | (1 << (MySqlParser.SJIS - 567)) | (1 << (MySqlParser.SWE7 - 567)) | (1 << (MySqlParser.TIS620 - 567)) | (1 << (MySqlParser.UCS2 - 567)) | (1 << (MySqlParser.UJIS - 567)) | (1 << (MySqlParser.UTF16 - 567)) | (1 << (MySqlParser.UTF16LE - 567)) | (1 << (MySqlParser.UTF32 - 567)) | (1 << (MySqlParser.UTF8 - 567)) | (1 << (MySqlParser.UTF8MB3 - 567)) | (1 << (MySqlParser.UTF8MB4 - 567)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.TransactionLevelBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevelBase

        def enterRule(self, listener):
            if hasattr(listener, "enterTransactionLevelBase"):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitTransactionLevelBase"):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = MySqlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6020
            _la = self._input.LA(1)
            if not(((((_la - 618)) & ~0x3f) == 0 and ((1 << (_la - 618)) & ((1 << (MySqlParser.REPEATABLE - 618)) | (1 << (MySqlParser.COMMITTED - 618)) | (1 << (MySqlParser.UNCOMMITTED - 618)) | (1 << (MySqlParser.SERIALIZABLE - 618)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.PrivilegesBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilegesBase

        def enterRule(self, listener):
            if hasattr(listener, "enterPrivilegesBase"):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitPrivilegesBase"):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = MySqlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6022
            _la = self._input.LA(1)
            if not(((((_la - 558)) & ~0x3f) == 0 and ((1 << (_la - 558)) & ((1 << (MySqlParser.TABLES - 558)) | (1 << (MySqlParser.ROUTINE - 558)) | (1 << (MySqlParser.EXECUTE - 558)) | (1 << (MySqlParser.FILE - 558)) | (1 << (MySqlParser.PROCESS - 558)) | (1 << (MySqlParser.RELOAD - 558)) | (1 << (MySqlParser.SHUTDOWN - 558)) | (1 << (MySqlParser.SUPER - 558)) | (1 << (MySqlParser.PRIVILEGES - 558)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.IntervalTypeBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalTypeBase

        def enterRule(self, listener):
            if hasattr(listener, "enterIntervalTypeBase"):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitIntervalTypeBase"):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = MySqlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6024
            _la = self._input.LA(1)
            if not(((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & ((1 << (MySqlParser.QUARTER - 550)) | (1 << (MySqlParser.MONTH - 550)) | (1 << (MySqlParser.DAY - 550)) | (1 << (MySqlParser.HOUR - 550)) | (1 << (MySqlParser.MINUTE - 550)) | (1 << (MySqlParser.WEEK - 550)) | (1 << (MySqlParser.SECOND - 550)) | (1 << (MySqlParser.MICROSECOND - 550)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.DataTypeBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dataTypeBase

        def enterRule(self, listener):
            if hasattr(listener, "enterDataTypeBase"):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitDataTypeBase"):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = MySqlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6026
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.DATETIME - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.TEXT - 180)) | (1 << (MySqlParser.ENUM - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.KeywordsCanBeIdContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)

        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)

        def EVEN(self):
            return self.getToken(MySqlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)

        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def OJ(self):
            return self.getToken(MySqlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)

        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_keywordsCanBeId

        def enterRule(self, listener):
            if hasattr(listener, "enterKeywordsCanBeId"):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitKeywordsCanBeId"):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = MySqlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6028
            _la = self._input.LA(1)
            if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (MySqlParser.ACCOUNT - 244)) | (1 << (MySqlParser.ACTION - 244)) | (1 << (MySqlParser.AFTER - 244)) | (1 << (MySqlParser.AGGREGATE - 244)) | (1 << (MySqlParser.ALGORITHM - 244)) | (1 << (MySqlParser.ANY - 244)) | (1 << (MySqlParser.AT - 244)) | (1 << (MySqlParser.AUTHORS - 244)) | (1 << (MySqlParser.AUTOCOMMIT - 244)) | (1 << (MySqlParser.AUTOEXTEND_SIZE - 244)) | (1 << (MySqlParser.AUTO_INCREMENT - 244)) | (1 << (MySqlParser.AVG_ROW_LENGTH - 244)) | (1 << (MySqlParser.BEGIN - 244)) | (1 << (MySqlParser.BINLOG - 244)) | (1 << (MySqlParser.BIT - 244)) | (1 << (MySqlParser.BLOCK - 244)) | (1 << (MySqlParser.BOOL - 244)) | (1 << (MySqlParser.BOOLEAN - 244)) | (1 << (MySqlParser.BTREE - 244)) | (1 << (MySqlParser.CACHE - 244)) | (1 << (MySqlParser.CASCADED - 244)) | (1 << (MySqlParser.CHAIN - 244)) | (1 << (MySqlParser.CHANGED - 244)) | (1 << (MySqlParser.CHANNEL - 244)) | (1 << (MySqlParser.CHECKSUM - 244)) | (1 << (MySqlParser.CIPHER - 244)) | (1 << (MySqlParser.CLIENT - 244)) | (1 << (MySqlParser.CLOSE - 244)) | (1 << (MySqlParser.COALESCE - 244)) | (1 << (MySqlParser.CODE - 244)) | (1 << (MySqlParser.COLUMNS - 244)) | (1 << (MySqlParser.COLUMN_FORMAT - 244)) | (1 << (MySqlParser.COMMENT - 244)) | (1 << (MySqlParser.COMMIT - 244)) | (1 << (MySqlParser.COMPACT - 244)) | (1 << (MySqlParser.COMPLETION - 244)) | (1 << (MySqlParser.COMPRESSED - 244)) | (1 << (MySqlParser.COMPRESSION - 244)) | (1 << (MySqlParser.CONCURRENT - 244)) | (1 << (MySqlParser.CONNECTION - 244)) | (1 << (MySqlParser.CONSISTENT - 244)) | (1 << (MySqlParser.CONTAINS - 244)) | (1 << (MySqlParser.CONTEXT - 244)) | (1 << (MySqlParser.CONTRIBUTORS - 244)) | (1 << (MySqlParser.COPY - 244)) | (1 << (MySqlParser.CPU - 244)) | (1 << (MySqlParser.DATA - 244)) | (1 << (MySqlParser.DATAFILE - 244)) | (1 << (MySqlParser.DEALLOCATE - 244)) | (1 << (MySqlParser.DEFAULT_AUTH - 244)) | (1 << (MySqlParser.DEFINER - 244)) | (1 << (MySqlParser.DELAY_KEY_WRITE - 244)) | (1 << (MySqlParser.DES_KEY_FILE - 244)) | (1 << (MySqlParser.DIRECTORY - 244)) | (1 << (MySqlParser.DISABLE - 244)) | (1 << (MySqlParser.DISCARD - 244)) | (1 << (MySqlParser.DISK - 244)) | (1 << (MySqlParser.DO - 244)) | (1 << (MySqlParser.DUMPFILE - 244)) | (1 << (MySqlParser.DUPLICATE - 244)) | (1 << (MySqlParser.DYNAMIC - 244)) | (1 << (MySqlParser.ENABLE - 244)) | (1 << (MySqlParser.ENCRYPTION - 244)) | (1 << (MySqlParser.END - 244)))) != 0) or ((((_la - 308)) & ~0x3f) == 0 and ((1 << (_la - 308)) & ((1 << (MySqlParser.ENDS - 308)) | (1 << (MySqlParser.ENGINE - 308)) | (1 << (MySqlParser.ENGINES - 308)) | (1 << (MySqlParser.ERROR - 308)) | (1 << (MySqlParser.ERRORS - 308)) | (1 << (MySqlParser.ESCAPE - 308)) | (1 << (MySqlParser.EVEN - 308)) | (1 << (MySqlParser.EVENT - 308)) | (1 << (MySqlParser.EVENTS - 308)) | (1 << (MySqlParser.EVERY - 308)) | (1 << (MySqlParser.EXCHANGE - 308)) | (1 << (MySqlParser.EXCLUSIVE - 308)) | (1 << (MySqlParser.EXPIRE - 308)) | (1 << (MySqlParser.EXPORT - 308)) | (1 << (MySqlParser.EXTENDED - 308)) | (1 << (MySqlParser.EXTENT_SIZE - 308)) | (1 << (MySqlParser.FAST - 308)) | (1 << (MySqlParser.FAULTS - 308)) | (1 << (MySqlParser.FIELDS - 308)) | (1 << (MySqlParser.FILE_BLOCK_SIZE - 308)) | (1 << (MySqlParser.FILTER - 308)) | (1 << (MySqlParser.FIRST - 308)) | (1 << (MySqlParser.FIXED - 308)) | (1 << (MySqlParser.FLUSH - 308)) | (1 << (MySqlParser.FOLLOWS - 308)) | (1 << (MySqlParser.FOUND - 308)) | (1 << (MySqlParser.FULL - 308)) | (1 << (MySqlParser.FUNCTION - 308)) | (1 << (MySqlParser.GENERAL - 308)) | (1 << (MySqlParser.GLOBAL - 308)) | (1 << (MySqlParser.GRANTS - 308)) | (1 << (MySqlParser.GROUP_REPLICATION - 308)) | (1 << (MySqlParser.HANDLER - 308)) | (1 << (MySqlParser.HASH - 308)) | (1 << (MySqlParser.HELP - 308)) | (1 << (MySqlParser.HOST - 308)) | (1 << (MySqlParser.HOSTS - 308)) | (1 << (MySqlParser.IDENTIFIED - 308)) | (1 << (MySqlParser.IGNORE_SERVER_IDS - 308)) | (1 << (MySqlParser.IMPORT - 308)) | (1 << (MySqlParser.INDEXES - 308)) | (1 << (MySqlParser.INITIAL_SIZE - 308)) | (1 << (MySqlParser.INPLACE - 308)) | (1 << (MySqlParser.INSERT_METHOD - 308)) | (1 << (MySqlParser.INSTALL - 308)) | (1 << (MySqlParser.INSTANCE - 308)) | (1 << (MySqlParser.INVOKER - 308)) | (1 << (MySqlParser.IO - 308)) | (1 << (MySqlParser.IO_THREAD - 308)) | (1 << (MySqlParser.IPC - 308)) | (1 << (MySqlParser.ISOLATION - 308)) | (1 << (MySqlParser.ISSUER - 308)) | (1 << (MySqlParser.JSON - 308)) | (1 << (MySqlParser.KEY_BLOCK_SIZE - 308)) | (1 << (MySqlParser.LANGUAGE - 308)) | (1 << (MySqlParser.LAST - 308)) | (1 << (MySqlParser.LEAVES - 308)) | (1 << (MySqlParser.LESS - 308)) | (1 << (MySqlParser.LEVEL - 308)) | (1 << (MySqlParser.LIST - 308)) | (1 << (MySqlParser.LOCAL - 308)) | (1 << (MySqlParser.LOGFILE - 308)) | (1 << (MySqlParser.LOGS - 308)) | (1 << (MySqlParser.MASTER - 308)))) != 0) or ((((_la - 372)) & ~0x3f) == 0 and ((1 << (_la - 372)) & ((1 << (MySqlParser.MASTER_AUTO_POSITION - 372)) | (1 << (MySqlParser.MASTER_CONNECT_RETRY - 372)) | (1 << (MySqlParser.MASTER_DELAY - 372)) | (1 << (MySqlParser.MASTER_HEARTBEAT_PERIOD - 372)) | (1 << (MySqlParser.MASTER_HOST - 372)) | (1 << (MySqlParser.MASTER_LOG_FILE - 372)) | (1 << (MySqlParser.MASTER_LOG_POS - 372)) | (1 << (MySqlParser.MASTER_PASSWORD - 372)) | (1 << (MySqlParser.MASTER_PORT - 372)) | (1 << (MySqlParser.MASTER_RETRY_COUNT - 372)) | (1 << (MySqlParser.MASTER_SSL - 372)) | (1 << (MySqlParser.MASTER_SSL_CA - 372)) | (1 << (MySqlParser.MASTER_SSL_CAPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_CERT - 372)) | (1 << (MySqlParser.MASTER_SSL_CIPHER - 372)) | (1 << (MySqlParser.MASTER_SSL_CRL - 372)) | (1 << (MySqlParser.MASTER_SSL_CRLPATH - 372)) | (1 << (MySqlParser.MASTER_SSL_KEY - 372)) | (1 << (MySqlParser.MASTER_TLS_VERSION - 372)) | (1 << (MySqlParser.MASTER_USER - 372)) | (1 << (MySqlParser.MAX_CONNECTIONS_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_QUERIES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_ROWS - 372)) | (1 << (MySqlParser.MAX_SIZE - 372)) | (1 << (MySqlParser.MAX_UPDATES_PER_HOUR - 372)) | (1 << (MySqlParser.MAX_USER_CONNECTIONS - 372)) | (1 << (MySqlParser.MEDIUM - 372)) | (1 << (MySqlParser.MERGE - 372)) | (1 << (MySqlParser.MID - 372)) | (1 << (MySqlParser.MIGRATE - 372)) | (1 << (MySqlParser.MIN_ROWS - 372)) | (1 << (MySqlParser.MODE - 372)) | (1 << (MySqlParser.MODIFY - 372)) | (1 << (MySqlParser.MUTEX - 372)) | (1 << (MySqlParser.MYSQL - 372)) | (1 << (MySqlParser.NAME - 372)) | (1 << (MySqlParser.NAMES - 372)) | (1 << (MySqlParser.NCHAR - 372)) | (1 << (MySqlParser.NEVER - 372)) | (1 << (MySqlParser.NEXT - 372)) | (1 << (MySqlParser.NO - 372)) | (1 << (MySqlParser.NODEGROUP - 372)) | (1 << (MySqlParser.NONE - 372)) | (1 << (MySqlParser.OFFLINE - 372)) | (1 << (MySqlParser.OFFSET - 372)) | (1 << (MySqlParser.OJ - 372)) | (1 << (MySqlParser.OLD_PASSWORD - 372)) | (1 << (MySqlParser.ONE - 372)) | (1 << (MySqlParser.ONLINE - 372)) | (1 << (MySqlParser.ONLY - 372)) | (1 << (MySqlParser.OPEN - 372)) | (1 << (MySqlParser.OPTIMIZER_COSTS - 372)) | (1 << (MySqlParser.OPTIONS - 372)) | (1 << (MySqlParser.OWNER - 372)) | (1 << (MySqlParser.PACK_KEYS - 372)) | (1 << (MySqlParser.PAGE - 372)) | (1 << (MySqlParser.PARSER - 372)) | (1 << (MySqlParser.PARTIAL - 372)) | (1 << (MySqlParser.PARTITIONING - 372)) | (1 << (MySqlParser.PARTITIONS - 372)) | (1 << (MySqlParser.PASSWORD - 372)) | (1 << (MySqlParser.PHASE - 372)) | (1 << (MySqlParser.PLUGIN - 372)) | (1 << (MySqlParser.PLUGIN_DIR - 372)))) != 0) or ((((_la - 436)) & ~0x3f) == 0 and ((1 << (_la - 436)) & ((1 << (MySqlParser.PLUGINS - 436)) | (1 << (MySqlParser.PORT - 436)) | (1 << (MySqlParser.PRECEDES - 436)) | (1 << (MySqlParser.PREPARE - 436)) | (1 << (MySqlParser.PRESERVE - 436)) | (1 << (MySqlParser.PREV - 436)) | (1 << (MySqlParser.PROCESSLIST - 436)) | (1 << (MySqlParser.PROFILE - 436)) | (1 << (MySqlParser.PROFILES - 436)) | (1 << (MySqlParser.PROXY - 436)) | (1 << (MySqlParser.QUERY - 436)) | (1 << (MySqlParser.QUICK - 436)) | (1 << (MySqlParser.REBUILD - 436)) | (1 << (MySqlParser.RECOVER - 436)) | (1 << (MySqlParser.REDO_BUFFER_SIZE - 436)) | (1 << (MySqlParser.REDUNDANT - 436)) | (1 << (MySqlParser.RELAY - 436)) | (1 << (MySqlParser.RELAY_LOG_FILE - 436)) | (1 << (MySqlParser.RELAY_LOG_POS - 436)) | (1 << (MySqlParser.RELAYLOG - 436)) | (1 << (MySqlParser.REMOVE - 436)) | (1 << (MySqlParser.REORGANIZE - 436)) | (1 << (MySqlParser.REPAIR - 436)) | (1 << (MySqlParser.REPLICATE_DO_DB - 436)) | (1 << (MySqlParser.REPLICATE_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_DB - 436)) | (1 << (MySqlParser.REPLICATE_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_REWRITE_DB - 436)) | (1 << (MySqlParser.REPLICATE_WILD_DO_TABLE - 436)) | (1 << (MySqlParser.REPLICATE_WILD_IGNORE_TABLE - 436)) | (1 << (MySqlParser.REPLICATION - 436)) | (1 << (MySqlParser.RESET - 436)) | (1 << (MySqlParser.RESUME - 436)) | (1 << (MySqlParser.RETURNS - 436)) | (1 << (MySqlParser.ROLLBACK - 436)) | (1 << (MySqlParser.ROLLUP - 436)) | (1 << (MySqlParser.ROTATE - 436)) | (1 << (MySqlParser.ROW - 436)) | (1 << (MySqlParser.ROWS - 436)) | (1 << (MySqlParser.ROW_FORMAT - 436)) | (1 << (MySqlParser.SAVEPOINT - 436)) | (1 << (MySqlParser.SCHEDULE - 436)) | (1 << (MySqlParser.SECURITY - 436)) | (1 << (MySqlParser.SERVER - 436)) | (1 << (MySqlParser.SESSION - 436)) | (1 << (MySqlParser.SHARE - 436)) | (1 << (MySqlParser.SHARED - 436)) | (1 << (MySqlParser.SIGNED - 436)) | (1 << (MySqlParser.SIMPLE - 436)) | (1 << (MySqlParser.SLAVE - 436)) | (1 << (MySqlParser.SLOW - 436)) | (1 << (MySqlParser.SNAPSHOT - 436)) | (1 << (MySqlParser.SOCKET - 436)) | (1 << (MySqlParser.SOME - 436)) | (1 << (MySqlParser.SONAME - 436)) | (1 << (MySqlParser.SOUNDS - 436)) | (1 << (MySqlParser.SOURCE - 436)) | (1 << (MySqlParser.SQL_AFTER_GTIDS - 436)) | (1 << (MySqlParser.SQL_AFTER_MTS_GAPS - 436)) | (1 << (MySqlParser.SQL_BEFORE_GTIDS - 436)) | (1 << (MySqlParser.SQL_BUFFER_RESULT - 436)) | (1 << (MySqlParser.SQL_CACHE - 436)) | (1 << (MySqlParser.SQL_NO_CACHE - 436)) | (1 << (MySqlParser.SQL_THREAD - 436)))) != 0) or ((((_la - 500)) & ~0x3f) == 0 and ((1 << (_la - 500)) & ((1 << (MySqlParser.START - 500)) | (1 << (MySqlParser.STARTS - 500)) | (1 << (MySqlParser.STATS_AUTO_RECALC - 500)) | (1 << (MySqlParser.STATS_PERSISTENT - 500)) | (1 << (MySqlParser.STATS_SAMPLE_PAGES - 500)) | (1 << (MySqlParser.STATUS - 500)) | (1 << (MySqlParser.STOP - 500)) | (1 << (MySqlParser.STORAGE - 500)) | (1 << (MySqlParser.STRING - 500)) | (1 << (MySqlParser.SUBJECT - 500)) | (1 << (MySqlParser.SUBPARTITION - 500)) | (1 << (MySqlParser.SUBPARTITIONS - 500)) | (1 << (MySqlParser.SUSPEND - 500)) | (1 << (MySqlParser.SWAPS - 500)) | (1 << (MySqlParser.SWITCHES - 500)) | (1 << (MySqlParser.TABLESPACE - 500)) | (1 << (MySqlParser.TEMPORARY - 500)) | (1 << (MySqlParser.TEMPTABLE - 500)) | (1 << (MySqlParser.THAN - 500)) | (1 << (MySqlParser.TRADITIONAL - 500)) | (1 << (MySqlParser.TRANSACTION - 500)) | (1 << (MySqlParser.TRIGGERS - 500)) | (1 << (MySqlParser.TRUNCATE - 500)) | (1 << (MySqlParser.UNDEFINED - 500)) | (1 << (MySqlParser.UNDOFILE - 500)) | (1 << (MySqlParser.UNDO_BUFFER_SIZE - 500)) | (1 << (MySqlParser.UNINSTALL - 500)) | (1 << (MySqlParser.UNKNOWN - 500)) | (1 << (MySqlParser.UNTIL - 500)) | (1 << (MySqlParser.UPGRADE - 500)) | (1 << (MySqlParser.USER - 500)) | (1 << (MySqlParser.USE_FRM - 500)) | (1 << (MySqlParser.USER_RESOURCES - 500)) | (1 << (MySqlParser.VALIDATION - 500)) | (1 << (MySqlParser.VALUE - 500)) | (1 << (MySqlParser.VARIABLES - 500)) | (1 << (MySqlParser.VIEW - 500)) | (1 << (MySqlParser.WAIT - 500)) | (1 << (MySqlParser.WARNINGS - 500)) | (1 << (MySqlParser.WITHOUT - 500)) | (1 << (MySqlParser.WORK - 500)) | (1 << (MySqlParser.WRAPPER - 500)) | (1 << (MySqlParser.X509 - 500)) | (1 << (MySqlParser.XA - 500)) | (1 << (MySqlParser.XML - 500)))) != 0) or _la==MySqlParser.MEMORY):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(MySqlParser.FunctionNameBaseContext, self).__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySqlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(MySqlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySqlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySqlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySqlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(MySqlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(MySqlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(MySqlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(MySqlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(MySqlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(MySqlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(MySqlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(MySqlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(MySqlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(MySqlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(MySqlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(MySqlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySqlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(MySqlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(MySqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySqlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(MySqlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(MySqlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySqlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(MySqlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(MySqlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(MySqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(MySqlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySqlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(MySqlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySqlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(MySqlParser.COS, 0)

        def COT(self):
            return self.getToken(MySqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(MySqlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(MySqlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(MySqlParser.CROSSES, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(MySqlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySqlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(MySqlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySqlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySqlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySqlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(MySqlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(MySqlParser.DEGREES, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySqlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySqlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(MySqlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(MySqlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(MySqlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(MySqlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(MySqlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(MySqlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(MySqlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(MySqlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(MySqlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(MySqlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(MySqlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(MySqlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(MySqlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySqlParser.FIND_IN_SET, 0)

        def FLOOR(self):
            return self.getToken(MySqlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySqlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(MySqlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(MySqlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySqlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(MySqlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(MySqlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(MySqlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(MySqlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(MySqlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(MySqlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(MySqlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(MySqlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(MySqlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(MySqlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(MySqlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(MySqlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySqlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(MySqlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(MySqlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(MySqlParser.INTERSECTS, 0)

        def ISCLOSED(self):
            return self.getToken(MySqlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(MySqlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(MySqlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(MySqlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySqlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(MySqlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(MySqlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(MySqlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(MySqlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySqlParser.IS_USED_LOCK, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySqlParser.LAST_INSERT_ID, 0)

        def LCASE(self):
            return self.getToken(MySqlParser.LCASE, 0)

        def LEAST(self):
            return self.getToken(MySqlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySqlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(MySqlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(MySqlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(MySqlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(MySqlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySqlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(MySqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(MySqlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySqlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(MySqlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySqlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySqlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(MySqlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySqlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(MySqlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySqlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(MySqlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(MySqlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(MySqlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(MySqlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(MySqlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(MySqlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(MySqlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(MySqlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(MySqlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(MySqlParser.MLINEFROMWKB, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySqlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(MySqlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(MySqlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(MySqlParser.NAME_CONST, 0)

        def NULLIF(self):
            return self.getToken(MySqlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(MySqlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(MySqlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(MySqlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(MySqlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(MySqlParser.OVERLAPS, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySqlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySqlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(MySqlParser.PI, 0)

        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(MySqlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(MySqlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(MySqlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(MySqlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(MySqlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)

        def POW(self):
            return self.getToken(MySqlParser.POW, 0)

        def POWER(self):
            return self.getToken(MySqlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(MySqlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(MySqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySqlParser.RAND, 0)

        def RANDOM_BYTES(self):
            return self.getToken(MySqlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySqlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(MySqlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(MySqlParser.ROW_COUNT, 0)

        def RPAD(self):
            return self.getToken(MySqlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySqlParser.RTRIM, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySqlParser.SEC_TO_TIME, 0)

        def SESSION_USER(self):
            return self.getToken(MySqlParser.SESSION_USER, 0)

        def SHA(self):
            return self.getToken(MySqlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(MySqlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(MySqlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(MySqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySqlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(MySqlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(MySqlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(MySqlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(MySqlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(MySqlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(MySqlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySqlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(MySqlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(MySqlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(MySqlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(MySqlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(MySqlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(MySqlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(MySqlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(MySqlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(MySqlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(MySqlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(MySqlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(MySqlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(MySqlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(MySqlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(MySqlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(MySqlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(MySqlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(MySqlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(MySqlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(MySqlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(MySqlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(MySqlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(MySqlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(MySqlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(MySqlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(MySqlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(MySqlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(MySqlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(MySqlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(MySqlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(MySqlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(MySqlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(MySqlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(MySqlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(MySqlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(MySqlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(MySqlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySqlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(MySqlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(MySqlParser.TAN, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(MySqlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySqlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySqlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySqlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySqlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(MySqlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(MySqlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(MySqlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySqlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(MySqlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(MySqlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(MySqlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySqlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(MySqlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(MySqlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(MySqlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(MySqlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(MySqlParser.VERSION, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySqlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySqlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(MySqlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySqlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(MySqlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(MySqlParser.X_FUNCTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionNameBase

        def enterRule(self, listener):
            if hasattr(listener, "enterFunctionNameBase"):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener):
            if hasattr(listener, "exitFunctionNameBase"):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = MySqlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6030
            _la = self._input.LA(1)
            if not(_la==MySqlParser.DATABASE or _la==MySqlParser.LEFT or _la==MySqlParser.RIGHT or ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (MySqlParser.DATE - 180)) | (1 << (MySqlParser.TIME - 180)) | (1 << (MySqlParser.TIMESTAMP - 180)) | (1 << (MySqlParser.YEAR - 180)) | (1 << (MySqlParser.COUNT - 180)) | (1 << (MySqlParser.POSITION - 180)))) != 0) or ((((_la - 550)) & ~0x3f) == 0 and ((1 << (_la - 550)) & ((1 << (MySqlParser.QUARTER - 550)) | (1 << (MySqlParser.MONTH - 550)) | (1 << (MySqlParser.DAY - 550)) | (1 << (MySqlParser.HOUR - 550)) | (1 << (MySqlParser.MINUTE - 550)) | (1 << (MySqlParser.WEEK - 550)) | (1 << (MySqlParser.SECOND - 550)) | (1 << (MySqlParser.MICROSECOND - 550)))) != 0) or ((((_la - 622)) & ~0x3f) == 0 and ((1 << (_la - 622)) & ((1 << (MySqlParser.GEOMETRYCOLLECTION - 622)) | (1 << (MySqlParser.LINESTRING - 622)) | (1 << (MySqlParser.MULTILINESTRING - 622)) | (1 << (MySqlParser.MULTIPOINT - 622)) | (1 << (MySqlParser.MULTIPOLYGON - 622)) | (1 << (MySqlParser.POINT - 622)) | (1 << (MySqlParser.POLYGON - 622)) | (1 << (MySqlParser.ABS - 622)) | (1 << (MySqlParser.ACOS - 622)) | (1 << (MySqlParser.ADDDATE - 622)) | (1 << (MySqlParser.ADDTIME - 622)) | (1 << (MySqlParser.AES_DECRYPT - 622)) | (1 << (MySqlParser.AES_ENCRYPT - 622)) | (1 << (MySqlParser.AREA - 622)) | (1 << (MySqlParser.ASBINARY - 622)) | (1 << (MySqlParser.ASIN - 622)) | (1 << (MySqlParser.ASTEXT - 622)) | (1 << (MySqlParser.ASWKB - 622)) | (1 << (MySqlParser.ASWKT - 622)) | (1 << (MySqlParser.ASYMMETRIC_DECRYPT - 622)) | (1 << (MySqlParser.ASYMMETRIC_DERIVE - 622)) | (1 << (MySqlParser.ASYMMETRIC_ENCRYPT - 622)) | (1 << (MySqlParser.ASYMMETRIC_SIGN - 622)) | (1 << (MySqlParser.ASYMMETRIC_VERIFY - 622)) | (1 << (MySqlParser.ATAN - 622)) | (1 << (MySqlParser.ATAN2 - 622)) | (1 << (MySqlParser.BENCHMARK - 622)) | (1 << (MySqlParser.BIN - 622)) | (1 << (MySqlParser.BIT_COUNT - 622)) | (1 << (MySqlParser.BIT_LENGTH - 622)) | (1 << (MySqlParser.BUFFER - 622)) | (1 << (MySqlParser.CEIL - 622)) | (1 << (MySqlParser.CEILING - 622)) | (1 << (MySqlParser.CENTROID - 622)) | (1 << (MySqlParser.CHARACTER_LENGTH - 622)) | (1 << (MySqlParser.CHARSET - 622)) | (1 << (MySqlParser.CHAR_LENGTH - 622)) | (1 << (MySqlParser.COERCIBILITY - 622)) | (1 << (MySqlParser.COLLATION - 622)) | (1 << (MySqlParser.COMPRESS - 622)) | (1 << (MySqlParser.CONCAT - 622)) | (1 << (MySqlParser.CONCAT_WS - 622)) | (1 << (MySqlParser.CONNECTION_ID - 622)) | (1 << (MySqlParser.CONV - 622)) | (1 << (MySqlParser.CONVERT_TZ - 622)) | (1 << (MySqlParser.COS - 622)) | (1 << (MySqlParser.COT - 622)) | (1 << (MySqlParser.CRC32 - 622)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY - 622)) | (1 << (MySqlParser.CREATE_ASYMMETRIC_PUB_KEY - 622)) | (1 << (MySqlParser.CREATE_DH_PARAMETERS - 622)) | (1 << (MySqlParser.CREATE_DIGEST - 622)) | (1 << (MySqlParser.CROSSES - 622)) | (1 << (MySqlParser.DATEDIFF - 622)) | (1 << (MySqlParser.DATE_FORMAT - 622)) | (1 << (MySqlParser.DAYNAME - 622)) | (1 << (MySqlParser.DAYOFMONTH - 622)) | (1 << (MySqlParser.DAYOFWEEK - 622)) | (1 << (MySqlParser.DAYOFYEAR - 622)) | (1 << (MySqlParser.DECODE - 622)) | (1 << (MySqlParser.DEGREES - 622)) | (1 << (MySqlParser.DES_DECRYPT - 622)) | (1 << (MySqlParser.DES_ENCRYPT - 622)) | (1 << (MySqlParser.DIMENSION - 622)))) != 0) or ((((_la - 686)) & ~0x3f) == 0 and ((1 << (_la - 686)) & ((1 << (MySqlParser.DISJOINT - 686)) | (1 << (MySqlParser.ELT - 686)) | (1 << (MySqlParser.ENCODE - 686)) | (1 << (MySqlParser.ENCRYPT - 686)) | (1 << (MySqlParser.ENDPOINT - 686)) | (1 << (MySqlParser.ENVELOPE - 686)) | (1 << (MySqlParser.EQUALS - 686)) | (1 << (MySqlParser.EXP - 686)) | (1 << (MySqlParser.EXPORT_SET - 686)) | (1 << (MySqlParser.EXTERIORRING - 686)) | (1 << (MySqlParser.EXTRACTVALUE - 686)) | (1 << (MySqlParser.FIELD - 686)) | (1 << (MySqlParser.FIND_IN_SET - 686)) | (1 << (MySqlParser.FLOOR - 686)) | (1 << (MySqlParser.FORMAT - 686)) | (1 << (MySqlParser.FOUND_ROWS - 686)) | (1 << (MySqlParser.FROM_BASE64 - 686)) | (1 << (MySqlParser.FROM_DAYS - 686)) | (1 << (MySqlParser.FROM_UNIXTIME - 686)) | (1 << (MySqlParser.GEOMCOLLFROMTEXT - 686)) | (1 << (MySqlParser.GEOMCOLLFROMWKB - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMTEXT - 686)) | (1 << (MySqlParser.GEOMETRYCOLLECTIONFROMWKB - 686)) | (1 << (MySqlParser.GEOMETRYFROMTEXT - 686)) | (1 << (MySqlParser.GEOMETRYFROMWKB - 686)) | (1 << (MySqlParser.GEOMETRYN - 686)) | (1 << (MySqlParser.GEOMETRYTYPE - 686)) | (1 << (MySqlParser.GEOMFROMTEXT - 686)) | (1 << (MySqlParser.GEOMFROMWKB - 686)) | (1 << (MySqlParser.GET_FORMAT - 686)) | (1 << (MySqlParser.GET_LOCK - 686)) | (1 << (MySqlParser.GLENGTH - 686)) | (1 << (MySqlParser.GREATEST - 686)) | (1 << (MySqlParser.GTID_SUBSET - 686)) | (1 << (MySqlParser.GTID_SUBTRACT - 686)) | (1 << (MySqlParser.HEX - 686)) | (1 << (MySqlParser.IFNULL - 686)) | (1 << (MySqlParser.INET6_ATON - 686)) | (1 << (MySqlParser.INET6_NTOA - 686)) | (1 << (MySqlParser.INET_ATON - 686)) | (1 << (MySqlParser.INET_NTOA - 686)) | (1 << (MySqlParser.INSTR - 686)) | (1 << (MySqlParser.INTERIORRINGN - 686)) | (1 << (MySqlParser.INTERSECTS - 686)) | (1 << (MySqlParser.ISCLOSED - 686)) | (1 << (MySqlParser.ISEMPTY - 686)) | (1 << (MySqlParser.ISNULL - 686)) | (1 << (MySqlParser.ISSIMPLE - 686)) | (1 << (MySqlParser.IS_FREE_LOCK - 686)) | (1 << (MySqlParser.IS_IPV4 - 686)) | (1 << (MySqlParser.IS_IPV4_COMPAT - 686)) | (1 << (MySqlParser.IS_IPV4_MAPPED - 686)) | (1 << (MySqlParser.IS_IPV6 - 686)) | (1 << (MySqlParser.IS_USED_LOCK - 686)) | (1 << (MySqlParser.LAST_INSERT_ID - 686)) | (1 << (MySqlParser.LCASE - 686)) | (1 << (MySqlParser.LEAST - 686)) | (1 << (MySqlParser.LENGTH - 686)) | (1 << (MySqlParser.LINEFROMTEXT - 686)) | (1 << (MySqlParser.LINEFROMWKB - 686)) | (1 << (MySqlParser.LINESTRINGFROMTEXT - 686)) | (1 << (MySqlParser.LINESTRINGFROMWKB - 686)) | (1 << (MySqlParser.LN - 686)) | (1 << (MySqlParser.LOAD_FILE - 686)))) != 0) or ((((_la - 750)) & ~0x3f) == 0 and ((1 << (_la - 750)) & ((1 << (MySqlParser.LOCATE - 750)) | (1 << (MySqlParser.LOG - 750)) | (1 << (MySqlParser.LOG10 - 750)) | (1 << (MySqlParser.LOG2 - 750)) | (1 << (MySqlParser.LOWER - 750)) | (1 << (MySqlParser.LPAD - 750)) | (1 << (MySqlParser.LTRIM - 750)) | (1 << (MySqlParser.MAKEDATE - 750)) | (1 << (MySqlParser.MAKETIME - 750)) | (1 << (MySqlParser.MAKE_SET - 750)) | (1 << (MySqlParser.MASTER_POS_WAIT - 750)) | (1 << (MySqlParser.MBRCONTAINS - 750)) | (1 << (MySqlParser.MBRDISJOINT - 750)) | (1 << (MySqlParser.MBREQUAL - 750)) | (1 << (MySqlParser.MBRINTERSECTS - 750)) | (1 << (MySqlParser.MBROVERLAPS - 750)) | (1 << (MySqlParser.MBRTOUCHES - 750)) | (1 << (MySqlParser.MBRWITHIN - 750)) | (1 << (MySqlParser.MD5 - 750)) | (1 << (MySqlParser.MLINEFROMTEXT - 750)) | (1 << (MySqlParser.MLINEFROMWKB - 750)) | (1 << (MySqlParser.MONTHNAME - 750)) | (1 << (MySqlParser.MPOINTFROMTEXT - 750)) | (1 << (MySqlParser.MPOINTFROMWKB - 750)) | (1 << (MySqlParser.MPOLYFROMTEXT - 750)) | (1 << (MySqlParser.MPOLYFROMWKB - 750)) | (1 << (MySqlParser.MULTILINESTRINGFROMTEXT - 750)) | (1 << (MySqlParser.MULTILINESTRINGFROMWKB - 750)) | (1 << (MySqlParser.MULTIPOINTFROMTEXT - 750)) | (1 << (MySqlParser.MULTIPOINTFROMWKB - 750)) | (1 << (MySqlParser.MULTIPOLYGONFROMTEXT - 750)) | (1 << (MySqlParser.MULTIPOLYGONFROMWKB - 750)) | (1 << (MySqlParser.NAME_CONST - 750)) | (1 << (MySqlParser.NULLIF - 750)) | (1 << (MySqlParser.NUMGEOMETRIES - 750)) | (1 << (MySqlParser.NUMINTERIORRINGS - 750)) | (1 << (MySqlParser.NUMPOINTS - 750)) | (1 << (MySqlParser.OCT - 750)) | (1 << (MySqlParser.OCTET_LENGTH - 750)) | (1 << (MySqlParser.ORD - 750)) | (1 << (MySqlParser.OVERLAPS - 750)) | (1 << (MySqlParser.PERIOD_ADD - 750)) | (1 << (MySqlParser.PERIOD_DIFF - 750)) | (1 << (MySqlParser.PI - 750)) | (1 << (MySqlParser.POINTFROMTEXT - 750)) | (1 << (MySqlParser.POINTFROMWKB - 750)) | (1 << (MySqlParser.POINTN - 750)) | (1 << (MySqlParser.POLYFROMTEXT - 750)) | (1 << (MySqlParser.POLYFROMWKB - 750)) | (1 << (MySqlParser.POLYGONFROMTEXT - 750)) | (1 << (MySqlParser.POLYGONFROMWKB - 750)) | (1 << (MySqlParser.POW - 750)) | (1 << (MySqlParser.POWER - 750)) | (1 << (MySqlParser.QUOTE - 750)) | (1 << (MySqlParser.RADIANS - 750)) | (1 << (MySqlParser.RAND - 750)) | (1 << (MySqlParser.RANDOM_BYTES - 750)) | (1 << (MySqlParser.RELEASE_LOCK - 750)) | (1 << (MySqlParser.REVERSE - 750)) | (1 << (MySqlParser.ROUND - 750)) | (1 << (MySqlParser.ROW_COUNT - 750)) | (1 << (MySqlParser.RPAD - 750)) | (1 << (MySqlParser.RTRIM - 750)) | (1 << (MySqlParser.SEC_TO_TIME - 750)))) != 0) or ((((_la - 814)) & ~0x3f) == 0 and ((1 << (_la - 814)) & ((1 << (MySqlParser.SESSION_USER - 814)) | (1 << (MySqlParser.SHA - 814)) | (1 << (MySqlParser.SHA1 - 814)) | (1 << (MySqlParser.SHA2 - 814)) | (1 << (MySqlParser.SIGN - 814)) | (1 << (MySqlParser.SIN - 814)) | (1 << (MySqlParser.SLEEP - 814)) | (1 << (MySqlParser.SOUNDEX - 814)) | (1 << (MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS - 814)) | (1 << (MySqlParser.SQRT - 814)) | (1 << (MySqlParser.SRID - 814)) | (1 << (MySqlParser.STARTPOINT - 814)) | (1 << (MySqlParser.STRCMP - 814)) | (1 << (MySqlParser.STR_TO_DATE - 814)) | (1 << (MySqlParser.ST_AREA - 814)) | (1 << (MySqlParser.ST_ASBINARY - 814)) | (1 << (MySqlParser.ST_ASTEXT - 814)) | (1 << (MySqlParser.ST_ASWKB - 814)) | (1 << (MySqlParser.ST_ASWKT - 814)) | (1 << (MySqlParser.ST_BUFFER - 814)) | (1 << (MySqlParser.ST_CENTROID - 814)) | (1 << (MySqlParser.ST_CONTAINS - 814)) | (1 << (MySqlParser.ST_CROSSES - 814)) | (1 << (MySqlParser.ST_DIFFERENCE - 814)) | (1 << (MySqlParser.ST_DIMENSION - 814)) | (1 << (MySqlParser.ST_DISJOINT - 814)) | (1 << (MySqlParser.ST_DISTANCE - 814)) | (1 << (MySqlParser.ST_ENDPOINT - 814)) | (1 << (MySqlParser.ST_ENVELOPE - 814)) | (1 << (MySqlParser.ST_EQUALS - 814)) | (1 << (MySqlParser.ST_EXTERIORRING - 814)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTEXT - 814)) | (1 << (MySqlParser.ST_GEOMCOLLFROMTXT - 814)) | (1 << (MySqlParser.ST_GEOMCOLLFROMWKB - 814)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT - 814)) | (1 << (MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB - 814)) | (1 << (MySqlParser.ST_GEOMETRYFROMTEXT - 814)) | (1 << (MySqlParser.ST_GEOMETRYFROMWKB - 814)) | (1 << (MySqlParser.ST_GEOMETRYN - 814)) | (1 << (MySqlParser.ST_GEOMETRYTYPE - 814)) | (1 << (MySqlParser.ST_GEOMFROMTEXT - 814)) | (1 << (MySqlParser.ST_GEOMFROMWKB - 814)) | (1 << (MySqlParser.ST_INTERIORRINGN - 814)) | (1 << (MySqlParser.ST_INTERSECTION - 814)) | (1 << (MySqlParser.ST_INTERSECTS - 814)) | (1 << (MySqlParser.ST_ISCLOSED - 814)) | (1 << (MySqlParser.ST_ISEMPTY - 814)) | (1 << (MySqlParser.ST_ISSIMPLE - 814)) | (1 << (MySqlParser.ST_LINEFROMTEXT - 814)) | (1 << (MySqlParser.ST_LINEFROMWKB - 814)) | (1 << (MySqlParser.ST_LINESTRINGFROMTEXT - 814)) | (1 << (MySqlParser.ST_LINESTRINGFROMWKB - 814)) | (1 << (MySqlParser.ST_NUMGEOMETRIES - 814)) | (1 << (MySqlParser.ST_NUMINTERIORRING - 814)) | (1 << (MySqlParser.ST_NUMINTERIORRINGS - 814)) | (1 << (MySqlParser.ST_NUMPOINTS - 814)) | (1 << (MySqlParser.ST_OVERLAPS - 814)) | (1 << (MySqlParser.ST_POINTFROMTEXT - 814)) | (1 << (MySqlParser.ST_POINTFROMWKB - 814)) | (1 << (MySqlParser.ST_POINTN - 814)) | (1 << (MySqlParser.ST_POLYFROMTEXT - 814)) | (1 << (MySqlParser.ST_POLYFROMWKB - 814)) | (1 << (MySqlParser.ST_POLYGONFROMTEXT - 814)) | (1 << (MySqlParser.ST_POLYGONFROMWKB - 814)))) != 0) or ((((_la - 878)) & ~0x3f) == 0 and ((1 << (_la - 878)) & ((1 << (MySqlParser.ST_SRID - 878)) | (1 << (MySqlParser.ST_STARTPOINT - 878)) | (1 << (MySqlParser.ST_SYMDIFFERENCE - 878)) | (1 << (MySqlParser.ST_TOUCHES - 878)) | (1 << (MySqlParser.ST_UNION - 878)) | (1 << (MySqlParser.ST_WITHIN - 878)) | (1 << (MySqlParser.ST_X - 878)) | (1 << (MySqlParser.ST_Y - 878)) | (1 << (MySqlParser.SUBDATE - 878)) | (1 << (MySqlParser.SUBSTRING_INDEX - 878)) | (1 << (MySqlParser.SUBTIME - 878)) | (1 << (MySqlParser.SYSTEM_USER - 878)) | (1 << (MySqlParser.TAN - 878)) | (1 << (MySqlParser.TIMEDIFF - 878)) | (1 << (MySqlParser.TIMESTAMPADD - 878)) | (1 << (MySqlParser.TIMESTAMPDIFF - 878)) | (1 << (MySqlParser.TIME_FORMAT - 878)) | (1 << (MySqlParser.TIME_TO_SEC - 878)) | (1 << (MySqlParser.TOUCHES - 878)) | (1 << (MySqlParser.TO_BASE64 - 878)) | (1 << (MySqlParser.TO_DAYS - 878)) | (1 << (MySqlParser.TO_SECONDS - 878)) | (1 << (MySqlParser.UCASE - 878)) | (1 << (MySqlParser.UNCOMPRESS - 878)) | (1 << (MySqlParser.UNCOMPRESSED_LENGTH - 878)) | (1 << (MySqlParser.UNHEX - 878)) | (1 << (MySqlParser.UNIX_TIMESTAMP - 878)) | (1 << (MySqlParser.UPDATEXML - 878)) | (1 << (MySqlParser.UPPER - 878)) | (1 << (MySqlParser.UUID - 878)) | (1 << (MySqlParser.UUID_SHORT - 878)) | (1 << (MySqlParser.VALIDATE_PASSWORD_STRENGTH - 878)) | (1 << (MySqlParser.VERSION - 878)) | (1 << (MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS - 878)) | (1 << (MySqlParser.WEEKDAY - 878)) | (1 << (MySqlParser.WEEKOFYEAR - 878)) | (1 << (MySqlParser.WEIGHT_STRING - 878)) | (1 << (MySqlParser.WITHIN - 878)) | (1 << (MySqlParser.YEARWEEK - 878)) | (1 << (MySqlParser.Y_FUNCTION - 878)) | (1 << (MySqlParser.X_FUNCTION - 878)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[293] = self.expression_sempred
        self._predicates[294] = self.predicate_sempred
        self._predicates[295] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx, predIndex):
            if predIndex == 1:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 3)
         

    def expressionAtom_sempred(self, localctx, predIndex):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 11)
         




